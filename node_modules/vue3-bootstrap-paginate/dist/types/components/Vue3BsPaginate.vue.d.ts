import { type PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    total: {
        type: NumberConstructor;
        required: true;
    };
    perPage: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    pagesShown: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    modelValue: {
        type: NumberConstructor;
        required: true;
        validator: (value: number) => boolean;
    };
    version: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    size: {
        type: PropType<"lg" | "sm">;
        default: string;
    };
    alignment: {
        type: PropType<"center" | "end">;
        default: string;
    };
    prevContent: {
        type: StringConstructor;
        default: string;
    };
    nextContent: {
        type: StringConstructor;
        default: string;
    };
    firstJumpContent: {
        type: StringConstructor;
        default: string;
    };
    lastJumpContent: {
        type: StringConstructor;
        default: string;
    };
    showPrevNextButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    showJumpButtons: {
        type: BooleanConstructor;
        default: boolean;
    };
    onChange: {
        type: FunctionConstructor;
        default: () => void;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    total: {
        type: NumberConstructor;
        required: true;
    };
    perPage: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    pagesShown: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    modelValue: {
        type: NumberConstructor;
        required: true;
        validator: (value: number) => boolean;
    };
    version: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    size: {
        type: PropType<"lg" | "sm">;
        default: string;
    };
    alignment: {
        type: PropType<"center" | "end">;
        default: string;
    };
    prevContent: {
        type: StringConstructor;
        default: string;
    };
    nextContent: {
        type: StringConstructor;
        default: string;
    };
    firstJumpContent: {
        type: StringConstructor;
        default: string;
    };
    lastJumpContent: {
        type: StringConstructor;
        default: string;
    };
    showPrevNextButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    showJumpButtons: {
        type: BooleanConstructor;
        default: boolean;
    };
    onChange: {
        type: FunctionConstructor;
        default: () => void;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    version: number;
    perPage: number;
    pagesShown: number;
    size: "lg" | "sm";
    alignment: "center" | "end";
    prevContent: string;
    nextContent: string;
    firstJumpContent: string;
    lastJumpContent: string;
    showPrevNextButton: boolean;
    showJumpButtons: boolean;
    onChange: Function;
}>;
export default _default;
