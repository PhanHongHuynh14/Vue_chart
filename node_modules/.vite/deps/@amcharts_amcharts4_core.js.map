{
  "version": 3,
  "sources": ["../../src/.internal/core/elements/Image.ts", "../../src/.internal/core/elements/Polyarc.ts", "../../src/.internal/core/utils/Morpher.ts", "../../src/.internal/core/elements/Polygon.ts", "../../src/.internal/core/elements/Preloader.ts", "../../src/.internal/core/elements/CloseButton.ts", "../../src/.internal/core/elements/SwitchButton.ts", "../../src/.internal/core/elements/Slider.ts", "../../src/.internal/core/elements/PlayButton.ts", "../../src/.internal/core/rendering/fills/RadialGradientModifier.ts", "../../src/.internal/core/rendering/fills/LinePattern.ts", "../../src/.internal/core/rendering/fills/CirclePattern.ts", "../../src/.internal/core/rendering/fills/RectPattern.ts", "../../src/.internal/core/rendering/filters/ColorizeFilter.ts", "../../src/.internal/core/rendering/filters/BlurFilter.ts", "../../src/.internal/core/rendering/filters/FocusFilter.ts", "../../src/.internal/core/utils/PatternSet.ts", "../../src/.internal/core/utils/Plugin.ts", "../../src/.internal/core/elements/AmChartsLogo.ts", "../../src/.internal/core/utils/Instance.ts"],
  "sourcesContent": ["/**\r\n * Functionality for adding images in SVG tree.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Image]].\r\n */\r\nexport interface IImageProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * A URI of the image.\r\n\t */\r\n\thref?: string;\r\n\r\n\t/**\r\n\t * Sets image `width` in relation to its `height`.\r\n\t */\r\n\twidthRatio?: number;\r\n\r\n\t/**\r\n\t * Sets image `height` in relation to its `width`.\r\n\t */\r\n\theightRatio?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Image]].\r\n */\r\nexport interface IImageEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Image]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IImageAdapters extends ISpriteAdapters, IImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\r\nexport class Image extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IImageEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Image\";\r\n\t\tthis.element = this.paper.add(\"image\");\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.width = 50;\r\n\t\tthis.height = 50;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws an `<image>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.href) {\r\n\r\n\t\t\tlet width = this.innerWidth;\r\n\t\t\tlet height = this.innerHeight;\r\n\r\n\t\t\tif ($type.isNumber(this.widthRatio)) {\r\n\t\t\t\twidth = height * this.widthRatio;\r\n\t\t\t\tthis.width = width;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this.heightRatio)) {\r\n\t\t\t\theight = width * this.heightRatio;\r\n\t\t\t\tthis.height = height;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis.element.attr({\r\n\t\t\t\t\"width\": width,\r\n\t\t\t\t\"height\": height\r\n\t\t\t});\r\n\t\t\tthis.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An image URI.\r\n\t *\r\n\t * @param value  Image URI\r\n\t */\r\n\tpublic set href(value: string) {\r\n\t\tthis.setPropertyValue(\"href\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image URI\r\n\t */\r\n\tpublic get href(): string {\r\n\t\treturn this.getPropertyValue(\"href\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets image `width` relatively to its `height`.\r\n\t *\r\n\t * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n\t * `50`.\r\n\t *\r\n\t * @param value  Ratio\r\n\t */\r\n\tpublic set widthRatio(value: number) {\r\n\t\tthis.setPropertyValue(\"widthRatio\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ratio\r\n\t */\r\n\tpublic get widthRatio(): number {\r\n\t\treturn this.getPropertyValue(\"widthRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets image `height` relatively to its `width`.\r\n\t *\r\n\t * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n\t * `50`.\r\n\t *\r\n\t * @param value  Ratio\r\n\t */\r\n\tpublic set heightRatio(value: number) {\r\n\t\tthis.setPropertyValue(\"heightRatio\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ratio\r\n\t */\r\n\tpublic get heightRatio(): number {\r\n\t\treturn this.getPropertyValue(\"heightRatio\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\treturn {\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.pixelWidth,\r\n\t\t\theight: this.pixelHeight\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Image\"] = Image;\r\n", "/**\r\n * Module for a multi-part arched line.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline, IPolylineProperties, IPolylineAdapters, IPolylineEvents } from \"./Polyline\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Polyarc]].\r\n */\r\nexport interface IPolyarcProperties extends IPolylineProperties {\r\n\r\n\t/**\r\n\t * Relative position along the line the control point is. (0-1)\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tcontrolPointPosition: number;\r\n\r\n\t/**\r\n\t * Relative distance of the control point. (0-1)\r\n\t *\r\n\t * Default is half the length of the line. (0.5)\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tcontrolPointDistance: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Polyarc]].\r\n */\r\nexport interface IPolyarcEvents extends IPolylineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Polyarc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPolyarcAdapters extends IPolylineAdapters, IPolyarcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\r\nexport class Polyarc extends Polyline {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPolyarcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPolyarcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPolyarcEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Polyarc\";\r\n\r\n\t\tthis.controlPointDistance = 0.5;\r\n\t\tthis.controlPointPosition = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creats and adds an SVG path for the arc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makePath(): void {\r\n\t\tthis._distance = 0;\r\n\t\tlet segments = this.segments;\r\n\r\n\t\tif (segments && segments.length > 0) {\r\n\t\t\tlet path: string = \"\";\r\n\t\t\tthis._realSegments = [];\r\n\r\n\t\t\tfor (let i = 0, len = segments.length; i < len; i++) {\r\n\t\t\t\tlet points: IPoint[] = segments[i];\r\n\t\t\t\tlet realPoints: IPoint[] = [];\r\n\t\t\t\tthis._realSegments.push(realPoints);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tpath += $path.moveTo(points[0]);\r\n\r\n\t\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\t\tlet pointA: IPoint = points[p - 1];\r\n\t\t\t\t\t\tlet pointB: IPoint = points[p];\r\n\r\n\t\t\t\t\t\tlet distanceAB: number = $math.getDistance(pointB, pointA);\r\n\t\t\t\t\t\tlet cpDistance: number = distanceAB * this.controlPointDistance;\r\n\t\t\t\t\t\tlet controlPointPosition: number = this.controlPointPosition;\r\n\t\t\t\t\t\tlet angle: number = -$math.getAngle(pointA, pointB);\r\n\r\n\t\t\t\t\t\tlet cpx: number = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\r\n\t\t\t\t\t\tlet cpy: number = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\r\n\t\t\t\t\t\tlet controlPoint1: IPoint = { x: cpx, y: cpy };\r\n\r\n\t\t\t\t\t\tlet cpx2: number = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\r\n\t\t\t\t\t\tlet cpy2: number = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\r\n\t\t\t\t\t\tlet controlPoint2: IPoint = { x: cpx2, y: cpy2 };\r\n\r\n\t\t\t\t\t\tpath += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2);\r\n\r\n\t\t\t\t\t\t// we add a lot of points in order to get the position/angle later\r\n\t\t\t\t\t\tlet stepCount: number = Math.ceil(distanceAB);\r\n\t\t\t\t\t\tlet prevPoint: IPoint = pointA;\r\n\t\t\t\t\t\tif (stepCount > 0) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i <= stepCount; i++) {\r\n\t\t\t\t\t\t\t\tlet point: IPoint = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i / stepCount);\r\n\t\t\t\t\t\t\t\trealPoints.push(point);\r\n\t\t\t\t\t\t\t\tthis._distance += $math.getDistance(prevPoint, point);\r\n\t\t\t\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trealPoints.push(pointA);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position along the line the control point is. (0-1)\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Position (0-1)\r\n\t */\r\n\tpublic set controlPointPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointPosition\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get controlPointPosition(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative distance of the control point. (0-1)\r\n\t *\r\n\t * Default is half the length of the line. (0.5)\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Distance (0-1)\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (0-1)\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;\r\n", "/**\r\n * Morpher module contains functionality that allows morphing one polygon to\r\n * another.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { IMorphable } from \"../defs/IMorphable\";\r\nimport { IAnimatable, Animation, AnimationDisposer } from \"../utils/Animation\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * Morpher can be used to morph one polygon to some other polygon.\r\n */\r\nexport class Morpher extends BaseObject implements IAnimatable {\r\n\r\n\t/**\r\n\t * An element that will be a subject for morphing.\r\n\t */\r\n\tpublic morphable: IMorphable;\r\n\r\n\t/**\r\n\t * [_morphFromPointsReal description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _morphFromPointsReal: $type.Optional<Array<Array<Array<IPoint>>>>;\r\n\r\n\t/**\r\n\t * [_morphToPointsReal description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _morphToPointsReal: $type.Optional<Array<Array<Array<IPoint>>>>;\r\n\r\n\t/**\r\n\t * [_morphToPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _morphToPoints: $type.Optional<Array<Array<Array<IPoint>>>>;\r\n\r\n\t/**\r\n\t * Morph progress (0-1)\r\n\t */\r\n\tprotected _morphProgress: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * List of animations currently running.\r\n\t */\r\n\tprotected _animations: $type.Optional<Array<Animation>>;\r\n\r\n\t/**\r\n\t * A storage for measurements.\r\n\t */\r\n\tprotected _bboxes: IRectangle[] = [];\r\n\r\n\t/**\r\n\t * Duration of the morphing animation in milliseconds.\r\n\t */\r\n\tpublic morphDuration: number = 800;\r\n\r\n\t/**\r\n\t * An easing function to use for morphing animation.\r\n\t *\r\n\t * @see {@link Ease}\r\n\t */\r\n\tpublic morphEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * If set to `true`, all separate parts of the multi-part polygon will\r\n\t * morph into a single circle or polygon when using built-in methods\r\n\t * `morphToCircle()` or `morphToPolygon()`.\r\n\t *\r\n\t * Otherwise each separate part of polygon will morph to individual target\r\n\t * circle or polgyon.\r\n\t */\r\n\tpublic morphToSingle: boolean = true;\r\n\r\n\t/**\r\n\t * A ratio to scale morphed object in relation to the source object.\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param morphable An object to morph\r\n\t */\r\n\tconstructor(morphable: IMorphable) {\r\n\t\tsuper();\r\n\t\tthis.className = \"Morpher\";\r\n\t\tthis.morphable = morphable;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Morphs a polygon to another polygon.\r\n\t *\r\n\t * @param toPoints  Corner points of the target shape\r\n\t * @param duration  Duration in milliseconds\r\n\t * @param easing    Easing function\r\n\t * @return Animation\r\n\t */\r\n\tpublic morphToPolygon(toPoints: Array<Array<Array<IPoint>>>, duration?: number, easing?: (value: number) => number): Animation {\r\n\t\tlet points: Array<Array<Array<IPoint>>> = this.morphable.currentPoints;\r\n\t\tif(points && toPoints){\r\n\t\t\tthis.sortPoints(points);\r\n\t\t\tthis.sortPoints(toPoints);\r\n\r\n\t\t\tthis._morphFromPointsReal = [];\r\n\t\t\tthis._morphToPointsReal = [];\r\n\r\n\t\t\tif (!$type.hasValue(duration)) {\r\n\t\t\t\tduration = this.morphDuration;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.hasValue(easing)) {\r\n\t\t\t\teasing = this.morphEasing;\r\n\t\t\t}\r\n\r\n\t\t\tthis._morphFromPointsReal = this.normalizePoints(toPoints, points);\r\n\t\t\tthis._morphToPointsReal = this.normalizePoints(points, toPoints);\r\n\r\n\t\t\tthis.morphable.currentPoints = this._morphFromPointsReal;\r\n\r\n\t\t\tlet animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n\t\t\tthis._disposers.push(animation);\r\n\t\t\tanimation.start()\r\n\t\t\treturn animation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [normalizePoints description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param pointsA  Point A\r\n\t * @param pointsB  Point B\r\n\t * @return Normalized points\r\n\t */\r\n\tpublic normalizePoints(pointsA: Array<Array<Array<IPoint>>>, pointsB: Array<Array<Array<IPoint>>>): Array<Array<Array<IPoint>>> {\r\n\t\tfor (let i = 0, len = pointsA.length; i < len; i++) {\r\n\t\t\tlet surfaceA: Array<IPoint> = pointsA[i][0];\r\n\r\n\t\t\tlet holeA: Array<IPoint> = pointsA[i][1];\r\n\t\t\tlet bboxA: IRectangle = $type.getValue($math.getBBox(surfaceA));\r\n\r\n\t\t\tlet middleX = bboxA.x + bboxA.width;\r\n\t\t\tlet middleY = bboxA.y + bboxA.height;\r\n\r\n\t\t\t// check if we have the same in PointsB\r\n\t\t\tif (!pointsB[i]) {\r\n\t\t\t\tpointsB[i] = [];\r\n\t\t\t}\r\n\r\n\t\t\t// check if we have surface in pointsB\r\n\t\t\tif (surfaceA && !pointsB[i][0]) {\r\n\t\t\t\tpointsB[i][0] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];\r\n\t\t\t}\r\n\r\n\t\t\tif (pointsB[i][0]) {\r\n\t\t\t\tpointsB[i][0] = this.addPoints(pointsB[i][0], surfaceA.length);\r\n\r\n\t\t\t\tlet distance = Infinity;\r\n\t\t\t\tlet splitAt = 0;\r\n\r\n\t\t\t\tfor (let a = 0; a < pointsB[i][0].length; a++) {\r\n\t\t\t\t\tlet newDistance = $math.getDistance(pointsB[i][0][a], surfaceA[0]);\r\n\t\t\t\t\tif (newDistance < distance) {\r\n\t\t\t\t\t\tsplitAt = a;\r\n\t\t\t\t\t\tdistance = newDistance;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet partA = pointsB[i][0].slice(0, splitAt);\r\n\t\t\t\tlet partB = pointsB[i][0].slice(splitAt);\r\n\t\t\t\tpointsB[i][0] = partB.concat(partA);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (holeA) {\r\n\t\t\t\tif (!pointsB[i][1]) {\r\n\t\t\t\t\tpointsB[i][1] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];\r\n\t\t\t\t}\r\n\t\t\t\tpointsB[i][1] = this.addPoints(pointsB[i][1], holeA.length);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pointsB;\r\n\t}\r\n\r\n\t/**\r\n\t * [sortPoints description]\r\n\t *\r\n\t * @ignore Exclude from doc\r\n\t * @todo Description\r\n\t * @param points  [description]\r\n\t * @return                        common bbox of points\r\n\t */\r\n\tpublic sortPoints(points: Array<Array<Array<IPoint>>>): $type.Optional<IRectangle> {\r\n\t\tpoints.sort(function(a, b) {\r\n\t\t\tlet bbox1: IRectangle = $type.getValue($math.getBBox(a[0]));\r\n\t\t\tlet bbox2: IRectangle = $type.getValue($math.getBBox(b[0]));\r\n\r\n\t\t\tif (bbox1.width * bbox1.height > bbox2.width * bbox2.height) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet bboxes: IRectangle[] = [];\r\n\t\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\t\tlet surface: IPoint[] = points[i][0];\r\n\t\t\tif (surface) {\r\n\t\t\t\tbboxes.push($type.getValue($math.getBBox(surface)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $math.getCommonRectangle(bboxes);\r\n\t}\r\n\r\n\t/**\r\n\t * Morphs polygon to a circle (it is actually a polygon which makes a circle).\r\n\t *\r\n\t * @param radius    Target circle radius (px)\r\n\t * @param duration  Duration (ms)\r\n\t * @param easing    Easing function\r\n\t * @return Animation\r\n\t */\r\n\tpublic morphToCircle(radius?: number, duration?: number, easing?: (value: number) => number): Animation {\r\n\t\tlet points: Array<Array<Array<IPoint>>> = this.morphable.points;\r\n\r\n\t\tlet commonBBox = this.sortPoints(points);\r\n\r\n\t\tthis._morphFromPointsReal = [];\r\n\t\tthis._morphToPointsReal = [];\r\n\r\n\t\tif (!$type.hasValue(duration)) {\r\n\t\t\tduration = this.morphDuration;\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(easing)) {\r\n\t\t\teasing = this.morphEasing;\r\n\t\t}\r\n\r\n\t\t// surface\r\n\t\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\t\tlet surface: IPoint[] = points[i][0];\r\n\t\t\tlet hole: IPoint[] = points[i][1];\r\n\r\n\t\t\tthis._morphFromPointsReal[i] = [];\r\n\t\t\tthis._morphToPointsReal[i] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet toPoints: IPoint[] = surface;\r\n\t\t\t\tlet fromPoints: IPoint[] = surface;\r\n\t\t\t\tlet bbox: IRectangle = $type.getValue($math.getBBox(fromPoints)) // this._bboxes[i];\r\n\r\n\t\t\t\tif (this.morphToSingle) {\r\n\t\t\t\t\tbbox = $type.getValue(commonBBox);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet middleX: number = bbox.x + bbox.width / 2;\r\n\t\t\t\tlet middleY: number = bbox.y + bbox.height / 2;\r\n\t\t\t\tlet realRadius: $type.Optional<number> = radius;\r\n\t\t\t\tif (!$type.isNumber(realRadius)) {\r\n\t\t\t\t\trealRadius = Math.min(bbox.width / 2, bbox.height / 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttoPoints = [];\r\n\r\n\t\t\t\t// find angle for the first point\r\n\t\t\t\tlet startAngle: number = $math.getAngle({ x: middleX, y: middleY }, surface[0]);\r\n\t\t\t\tlet count: number = 100;\r\n\r\n\t\t\t\tif (surface.length > count) {\r\n\t\t\t\t\tcount = surface.length;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfromPoints = this.addPoints(surface, count);\r\n\t\t\t\tcount = fromPoints.length; // add Points might increase number a bit\r\n\r\n\t\t\t\tlet angle: number = 360 / (count - 1);\r\n\r\n\t\t\t\tfor (let a: number = 0; a < count; a++) {\r\n\t\t\t\t\tlet realAngle: number = angle * a + startAngle;\r\n\t\t\t\t\tlet pointOnCircle: IPoint = { x: middleX + realRadius * $math.cos(realAngle), y: middleY + realRadius * $math.sin(realAngle) };\r\n\t\t\t\t\ttoPoints[a] = pointOnCircle;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (hole && hole.length > 0) {\r\n\t\t\t\t\tfor (let i = 0, hlen = hole.length; i < hlen; i++) {\r\n\t\t\t\t\t\ttoPoints.push({ x: middleX, y: middleY });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._morphFromPointsReal[i][0] = fromPoints;\r\n\t\t\t\tthis._morphToPointsReal[i][0] = toPoints;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.morphable.currentPoints = this._morphFromPointsReal;\r\n\r\n\t\tlet animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n\t\tthis._disposers.push(animation);\r\n\t\tanimation.start()\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @ignore Exclude from doc\r\n\t * @todo Description\r\n\t * @param points         [description]\r\n\t * @param mustHaveCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic addPoints(points: IPoint[], mustHaveCount: number): IPoint[] {\r\n\t\tlet addToSegmentCount: number = Math.round(mustHaveCount / points.length);\r\n\t\tlet newPoints: IPoint[] = [];\r\n\t\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\t\tlet point0: IPoint = points[i];\r\n\t\t\tlet point1: IPoint;\r\n\t\t\tif (i == points.length - 1) {\r\n\t\t\t\tpoint1 = points[0];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpoint1 = points[i + 1];\r\n\t\t\t}\r\n\r\n\t\t\tnewPoints.push(point0);\r\n\r\n\t\t\tfor (let p: number = 1; p < addToSegmentCount; p++) {\r\n\t\t\t\tlet percent: number = p / addToSegmentCount;\r\n\t\t\t\tlet extraPoint: IPoint = { x: point0.x + (point1.x - point0.x) * percent, y: point0.y + (point1.y - point0.y) * percent }\r\n\t\t\t\tnewPoints.push(extraPoint);\r\n\t\t\t}\r\n\r\n\t\t\t// stop adding in case we already added more than left in original\r\n\t\t\tif (newPoints.length + points.length - i == mustHaveCount) {\r\n\t\t\t\taddToSegmentCount = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (newPoints.length < mustHaveCount && points.length > 0) {\r\n\t\t\tlet lastPoint: IPoint = points[points.length - 1];\r\n\t\t\tfor (let p: number = newPoints.length; p < mustHaveCount; p++) {\r\n\t\t\t\t// add same as last\r\n\t\t\t\tnewPoints.push({ x: lastPoint.x, y: lastPoint.y });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn newPoints;\r\n\t}\r\n\r\n\t/**\r\n\t * Morphs polygon into a rectangular polygon.\r\n\t *\r\n\t * @param width     Width of the target rectangle (px)\r\n\t * @param height    Height of the target rectangle (px)\r\n\t * @param duration  Duration (ms)\r\n\t * @param easing    Easing function\r\n\t * @return Animation\r\n\t */\r\n\tpublic morphToRectangle(width?: number, height?: number, duration?: number, easing?: (value: number) => number): Animation {\r\n\t\tlet points: Array<Array<Array<IPoint>>> = this.morphable.points;\r\n\r\n\t\tthis.sortPoints(points);\r\n\r\n\t\tthis._morphFromPointsReal = [];\r\n\t\tthis._morphToPointsReal = [];\r\n\r\n\t\tif (!$type.hasValue(duration)) {\r\n\t\t\tduration = this.morphDuration;\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(easing)) {\r\n\t\t\teasing = this.morphEasing;\r\n\t\t}\r\n\r\n\t\t//\t\tlet biggestBBox: IRectangle = this._bboxes[this._biggestIndex];\r\n\r\n\t\t// surface\r\n\t\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\t\tlet surface: IPoint[] = points[i][0];\r\n\t\t\tlet hole: IPoint[] = points[i][1];\r\n\r\n\t\t\tthis._morphFromPointsReal[i] = [];\r\n\t\t\tthis._morphToPointsReal[i] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet toPoints: IPoint[] = surface;\r\n\t\t\t\tlet fromPoints: IPoint[] = surface;\r\n\t\t\t\tlet bbox: IRectangle = this._bboxes[i];\r\n\r\n\r\n\t\t\t\t// we only work with first area. TODO: maybe we should find the biggest one?\r\n\t\t\t\tif (this.morphToSingle) {\r\n\t\t\t\t\t//if (i != this._biggestIndex) {\r\n\t\t\t\t\t//\tbbox = { x: biggestBBox.x + biggestBBox.width / 2, y: biggestBBox.y + biggestBBox.height / 2, width: 0, height: 0 };\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet x: number = bbox.x;\r\n\t\t\t\tlet y: number = bbox.y;\r\n\r\n\t\t\t\tlet realWidth: $type.Optional<number> = width;\r\n\t\t\t\tlet realHeight: $type.Optional<number> = height;\r\n\r\n\t\t\t\tif (!$type.isNumber(realWidth)) {\r\n\t\t\t\t\trealWidth = bbox.width;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(realHeight)) {\r\n\t\t\t\t\trealHeight = bbox.height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttoPoints = [{ x: x, y: y }, { x: x + realWidth, y: y }, { x: x + realWidth, y: y + realHeight }, { x: x, y: y + realHeight }];\r\n\t\t\t\ttoPoints = this.addPoints(toPoints, surface.length);\r\n\r\n\t\t\t\t// if polygon has less points then count, add\r\n\t\t\t\tif (surface.length < 4) {\r\n\t\t\t\t\tfor (let i = surface.length; i < 4; i++) {\r\n\t\t\t\t\t\ttoPoints.push({ x: surface[i].x, y: surface[i].y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (hole && hole.length > 0) {\r\n\t\t\t\t\tlet middleX: number = bbox.x + bbox.width / 2;\r\n\t\t\t\t\tlet middleY: number = bbox.y + bbox.height / 2;\r\n\r\n\t\t\t\t\tfor (let i = 0, hlen = hole.length; i < hlen; i++) {\r\n\t\t\t\t\t\ttoPoints.push({ x: middleX, y: middleY });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._morphFromPointsReal[i][0] = fromPoints;\r\n\t\t\t\tthis._morphToPointsReal[i][0] = toPoints;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.morphable.currentPoints = this._morphFromPointsReal;\r\n\r\n\t\tlet animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n\t\tthis._disposers.push(animation);\r\n\t\tanimation.start()\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Progress of the morph transition.\r\n\t *\r\n\t * Setting this will also trigger actual transformation.\r\n\t *\r\n\t * @param value  Progress (0-1)\r\n\t */\r\n\tpublic set morphProgress(value: $type.Optional<number>) {\r\n\t\tthis._morphProgress = value;\r\n\r\n\t\tlet currentPoints: Array<Array<Array<IPoint>>> = [];\r\n\r\n\t\tif (value != null) {\r\n\t\t\tlet fromPoints: $type.Optional<Array<Array<Array<IPoint>>>> = this._morphFromPointsReal;\r\n\t\t\tlet toPoints: $type.Optional<Array<Array<Array<IPoint>>>> = this._morphToPointsReal;\r\n\r\n\t\t\tif (fromPoints != null && toPoints != null) {\r\n\r\n\t\t\t\tfor (let i = 0, len = fromPoints.length; i < len; i++) {\r\n\r\n\t\t\t\t\tlet currentArea: Array<Array<IPoint>> = [];\r\n\t\t\t\t\tcurrentPoints.push(currentArea);\r\n\r\n\t\t\t\t\tlet surfaceFrom: IPoint[] = fromPoints[i][0];\r\n\t\t\t\t\tlet holeFrom: IPoint[] = fromPoints[i][1];\r\n\r\n\t\t\t\t\tlet surfaceTo: IPoint[] = toPoints[i][0];\r\n\t\t\t\t\tlet holeTo: IPoint[] = toPoints[i][1];\r\n\r\n\t\t\t\t\tif (surfaceFrom && surfaceFrom.length > 0 && surfaceTo && surfaceTo.length > 0) {\r\n\r\n\t\t\t\t\t\tlet currentSurface: IPoint[] = [];\r\n\r\n\t\t\t\t\t\tfor (let i = 0, slen = surfaceFrom.length; i < slen; i++) {\r\n\t\t\t\t\t\t\tlet point0: IPoint = surfaceFrom[i];\r\n\t\t\t\t\t\t\tlet point1: IPoint = surfaceTo[i];\r\n\r\n\t\t\t\t\t\t\tlet currentPoint: IPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value }\r\n\r\n\t\t\t\t\t\t\tcurrentSurface.push(currentPoint);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurrentArea[0] = currentSurface;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (holeFrom && holeFrom.length > 0 && holeTo && holeTo.length > 0) {\r\n\t\t\t\t\t\tlet currentHole: IPoint[] = [];\r\n\t\t\t\t\t\tfor (let i = 0, hlen = holeFrom.length; i < hlen; i++) {\r\n\t\t\t\t\t\t\tlet point0: IPoint = holeFrom[i];\r\n\t\t\t\t\t\t\tlet point1: IPoint = holeTo[i];\r\n\r\n\t\t\t\t\t\t\tlet currentPoint: IPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value }\r\n\r\n\t\t\t\t\t\t\tcurrentHole.push(currentPoint);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurrentArea[1] = currentHole;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.morphable.currentPoints = currentPoints;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the progress of morph transition.\r\n\t *\r\n\t * @return Progress (0-1)\r\n\t */\r\n\tpublic get morphProgress(): $type.Optional<number> {\r\n\t\treturn this._morphProgress;\r\n\t}\r\n\r\n\t/**\r\n\t * Restores the polygon to its original appearance.\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param easing    Easing function\r\n\t * @return Animation\r\n\t */\r\n\tpublic morphBack(duration?: number, easing?: (value: number) => number): Animation {\r\n\t\tthis._morphToPointsReal = this._morphFromPointsReal;\r\n\t\tthis._morphFromPointsReal = this.morphable.currentPoints;\r\n\r\n\t\tif (!$type.hasValue(duration)) {\r\n\t\t\tduration = this.morphDuration;\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(easing)) {\r\n\t\t\teasing = this.morphEasing;\r\n\t\t}\r\n\r\n\t\tlet animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n\t\tthis._disposers.push(animation);\r\n\t\tanimation.start()\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list of morph animations currently being played.\r\n\t *\r\n\t * @return List of animations\r\n\t */\r\n\tpublic get animations(): Array<Animation> {\r\n\t\tif (!this._animations) {\r\n\t\t\tthis._animations = [];\r\n\t\t\tthis._disposers.push(new AnimationDisposer(this._animations));\r\n\t\t}\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n}\r\n", "/**\r\n * Polygon module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { Morpher } from \"../utils/Morpher\";\r\nimport { IMorphable } from \"../defs/IMorphable\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Polygon]].\r\n */\r\nexport interface IPolygonProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * An array of X/Y coordinates for each elbow of the polygon.\r\n\t */\r\n\tpoints?: Array<Array<Array<IPoint>>>;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Polygon]].\r\n */\r\nexport interface IPolygonEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Polygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPolygonAdapters extends ISpriteAdapters, IPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a polygon.\r\n *\r\n * @see {@link IPolygonEvents} for a list of available events\r\n * @see {@link IPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class Polygon extends Sprite implements IMorphable {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPolygonEvents;\r\n\r\n\t/**\r\n\t * A morpher instance that is used to morph polygon into some other shape.\r\n\t */\r\n\tprotected _morpher: $type.Optional<Morpher>;\r\n\r\n\t/**\r\n\t * Current points that morpher uses. This is needed so that we don't\r\n\t * overwrite polygons original points.\r\n\t */\r\n\tprotected _currentPoints: Array<Array<Array<IPoint>>>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Polygon\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.shapeRendering = \"auto\";\r\n\t\tthis._currentPoints = [];\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * An array of X/Y coordinates for each elbow of the polygon.\r\n\t *\r\n\t * @todo Example\r\n\t * @param points  Polygon points\r\n\t */\r\n\tpublic set points(points: Array<Array<Array<IPoint>>>) {\r\n\t\tthis.setPropertyValue(\"points\", points, true);\r\n\t\tthis._currentPoints = points;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Polygon points\r\n\t */\r\n\tpublic get points(): Array<Array<Array<IPoint>>> {\r\n\t\tlet points = this.getPropertyValue(\"points\");\r\n\t\tlet path = this.path;\r\n\r\n\t\tif (path && (!points || points.length == 0)) {\r\n\r\n\t\t\tlet valueStr = path.slice(1, path.length - 1);\r\n\r\n\t\t\tlet segments: string[] = valueStr.split(\"ZM\");\r\n\r\n\t\t\tfor (let s = 0; s < segments.length; s++) {\r\n\t\t\t\tlet segment = segments[s];\r\n\t\t\t\tif (segment.length > 0) {\r\n\t\t\t\t\tlet areaHole = segment.split(\"M\");\r\n\r\n\t\t\t\t\tlet areaArr = areaHole[0];\r\n\t\t\t\t\tlet holeArr = areaHole[1];\r\n\r\n\t\t\t\t\tif (areaArr && areaArr.length > 0) {\r\n\r\n\t\t\t\t\t\tlet pointsArr = areaArr.split(\"L\");\r\n\t\t\t\t\t\tif (pointsArr.length > 0) {\r\n\r\n\t\t\t\t\t\t\tlet area: IPoint[] = [];\r\n\r\n\t\t\t\t\t\t\tlet areaAndHole: Array<Array<IPoint>> = [area];\r\n\t\t\t\t\t\t\tpoints.push(areaAndHole);\r\n\r\n\t\t\t\t\t\t\tfor (let p = 0; p < pointsArr.length; p++) {\r\n\t\t\t\t\t\t\t\tlet coords = pointsArr[p].split(\",\");\r\n\t\t\t\t\t\t\t\tarea.push({ x: +coords[0], y: +coords[1] });\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (holeArr && holeArr.length > 0) {\r\n\t\t\t\t\t\t\t\tlet pointsArr = holeArr.split(\"L\");\r\n\t\t\t\t\t\t\t\tif (pointsArr.length > 0) {\r\n\t\t\t\t\t\t\t\t\tlet hole: IPoint[] = [];\r\n\t\t\t\t\t\t\t\t\tareaAndHole.push(hole);\r\n\t\t\t\t\t\t\t\t\tfor (let p = pointsArr.length - 1; p >= 0; p--) {\r\n\t\t\t\t\t\t\t\t\t\tlet coords = pointsArr[p].split(\",\");\r\n\t\t\t\t\t\t\t\t\t\thole.push({ x: +coords[0], y: +coords[1] });\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.setPropertyValue(\"points\", points);\r\n\t\t\tthis._currentPoints = points;\r\n\t\t}\r\n\t\treturn points;\r\n\t}\r\n\r\n\t/**\r\n\t * Current points. Used when morphing the element, so that original `points`\r\n\t * are not overwritten.\r\n\t *\r\n\t * @param points  Polygon points\r\n\t */\r\n\tpublic set currentPoints(points: Array<Array<Array<IPoint>>>) {\r\n\t\tif (this._currentPoints != points) {\r\n\t\t\tthis._currentPoints = points;\r\n\t\t\tthis.draw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Polygon points\r\n\t */\r\n\tpublic get currentPoints(): Array<Array<Array<IPoint>>> {\r\n\t\tif((!this._currentPoints || this._currentPoints.length == 0) && this.path){\r\n\t\t\tthis._currentPoints = this.points;\r\n\t\t}\r\n\t\treturn this._currentPoints;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tlet path: string = \"\";\r\n\t\tlet points: Array<Array<Array<IPoint>>> = this._currentPoints;\r\n\r\n\t\tlet left: $type.Optional<number>;\r\n\t\tlet right: $type.Optional<number>;\r\n\t\tlet top: $type.Optional<number>;\r\n\t\tlet bottom: $type.Optional<number>;\r\n\r\n\t\tif (points.length > 0) {\r\n\t\t\t// separate areas\r\n\t\t\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\t\t\t// surface\r\n\t\t\t\tlet surface: IPoint[] = points[i][0];\r\n\t\t\t\tlet hole: IPoint[] = points[i][1];\r\n\r\n\t\t\t\tif (surface && surface.length > 0) {\r\n\t\t\t\t\tlet point: IPoint = surface[0];\r\n\r\n\t\t\t\t\tpath += $path.moveTo(point);\r\n\r\n\t\t\t\t\tfor (let s: number = 0; s < surface.length; s++) {\r\n\t\t\t\t\t\tpoint = surface[s];\r\n\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(right) || (right < point.x)) {\r\n\t\t\t\t\t\t\tright = point.x;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!$type.isNumber(left) || (left > point.x)) {\r\n\t\t\t\t\t\t\tleft = point.x;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(top) || (top > point.y)) {\r\n\t\t\t\t\t\t\ttop = point.y;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!$type.isNumber(bottom) || (bottom < point.y)) {\r\n\t\t\t\t\t\t\tbottom = point.y;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// hole\r\n\t\t\t\tif (hole && hole.length > 0) {\r\n\t\t\t\t\tlet point: IPoint = hole[0];\r\n\t\t\t\t\tpath += $path.moveTo(point);\r\n\r\n\t\t\t\t\tfor (let h = 0, hlen = hole.length; h < hlen; h++) {\r\n\t\t\t\t\t\tpoint = hole[h];\r\n\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (path) {\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.bbox.x = left;\r\n\t\t\tthis.bbox.y = top;\r\n\t\t\tthis.bbox.width = right - left;\r\n\t\t\tthis.bbox.height = bottom - top;\r\n\r\n\t\t\tsuper.setPath(path);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setPath(value: string): boolean {\r\n\t\tif (super.setPath(value)) {\r\n\t\t\tthis.points = [];\r\n\t\t\tthis._bbox = this.group.getBBox();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Measures element\r\n\t */\r\n\tprotected measureElement(): void {\r\n\r\n\t\t// Overriding to avoid extra measurement.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated center point for the shape.\r\n\t *\r\n\t * @readonly\r\n\t * @return Center\r\n\t */\r\n\tpublic get centerPoint(): IPoint {\r\n\t\treturn { x: this.bbox.x + this.bbox.width / 2, y: this.bbox.y + this.bbox.height / 2 };\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Morpher]] instance that is used to morph polygon into some other\r\n\t * shape.\r\n\t *\r\n\t * @readonly\r\n\t * @return Morpher instance\r\n\t */\r\n\tpublic get morpher(): Morpher {\r\n\t\tif (!this._morpher) {\r\n\t\t\tthis._morpher = new Morpher(this);\r\n\t\t\tthis._disposers.push(this._morpher);\r\n\t\t}\r\n\t\treturn this._morpher;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polygon\"] = Polygon;\r\n", "/**\r\n * Preloader module.\r\n *\r\n * Preloader is a progress indicator.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Slice } from \"./Slice\";\r\nimport { Label } from \"./Label\";\r\nimport { registry } from \"../Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Preloader]].\r\n */\r\nexport interface IPreloaderProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Current preload progress. (0-1)\r\n\t *\r\n\t * * 0 - 0%\r\n\t * * 0.5 - 50%\r\n\t * * 1 - 100%\r\n\t */\r\n\tprogress?: number;\r\n\r\n\t/**\r\n\t * Delay display of preloader by X milliseconds.\r\n\t *\r\n\t * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n\t * set to 1) before `delay` ms, the loader is never shown.\r\n\t *\r\n\t * This is used to avoid brief flashing of the preload for very quick loads.\r\n\t *\r\n\t * @default 1000\r\n\t */\r\n\tdelay?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Preloader]].\r\n */\r\nexport interface IPreloaderEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Preloader]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPreloaderAdapters extends IContainerAdapters, IPreloaderProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IPreloaderEvents} for a list of available events\r\n * @see {@link IPreloaderAdapters} for a list of available Adapters\r\n */\r\nexport class Preloader extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPreloaderProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPreloaderAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPreloaderEvents;\r\n\r\n\t/**\r\n\t * A [[Slice]] element that indicates load progress.\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic progressSlice: Slice;\r\n\r\n\t/**\r\n\t * A [[Slice]] element that shows the full ring. (background for the\r\n\t * `progressSlice`)\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic backgroundSlice: Slice;\r\n\r\n\t/**\r\n\t * Label that displays progress in percent.\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Logs the timestamp of when the loader was initiated. It will be used to\r\n\t * delay showing of the Preloader so for quick operations it does not even\r\n\t * appear on screen.\r\n\t */\r\n\tprotected _started: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Preloader\";\r\n\r\n\t\t// Set dimensions\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create main container\r\n\t\tlet sliceContainer: Container = this.createChild(Container);\r\n\t\tsliceContainer.shouldClone = false;\r\n\r\n\t\t// Add background (100%) slice\r\n\t\tlet backgroundSlice: Slice = sliceContainer.createChild(Slice);\r\n\t\tbackgroundSlice.shouldClone = false;\r\n\t\tbackgroundSlice.radius = 53;\r\n\t\tbackgroundSlice.arc = 360;\r\n\t\tbackgroundSlice.fill = interfaceColors.getFor(\"fill\");\r\n\t\tbackgroundSlice.fillOpacity = 0.8;\r\n\t\tbackgroundSlice.innerRadius = 42;\r\n\t\tbackgroundSlice.isMeasured = false;\r\n\t\tthis.backgroundSlice = backgroundSlice;\r\n\r\n\t\t// Add progress slice\r\n\t\tlet progressSlice: Slice = sliceContainer.createChild(Slice);\r\n\t\tprogressSlice.shouldClone = false;\r\n\t\tprogressSlice.radius = 50;\r\n\t\tprogressSlice.innerRadius = 45;\r\n\t\tprogressSlice.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tprogressSlice.fillOpacity = 0.2;\r\n\t\tprogressSlice.isMeasured = false;\r\n\t\tthis.progressSlice = progressSlice;\r\n\r\n\t\t// Add text label element\r\n\t\tlet label: Label = sliceContainer.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.fill = interfaceColors.getFor(\"text\");\r\n\t\tlabel.align = \"center\";\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.textAlign = \"middle\";\r\n\t\tlabel.fillOpacity = 0.4;\r\n\t\tthis.label = label;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.background.opacity = 1;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.delay = 300;\r\n\r\n\t\t// Create hidden state\r\n\t\tlet hiddenState = this.states.create(\"hidden\");\r\n\t\thiddenState.properties.opacity = 0;\r\n\r\n\t\t// Hide by default\r\n\t\tthis.visible = false;\r\n\t\tthis.hide(0);\r\n\t\tthis.__disabled = true;\r\n\r\n\t\t// Make it disposable\r\n\t\t// @todo Maybe it's enough to just dispose `sliceContainer`?\r\n\t\tthis._disposers.push(this.backgroundSlice);\r\n\t\tthis._disposers.push(this.progressSlice);\r\n\t\tthis._disposers.push(this.label);\r\n\t\tthis._disposers.push(sliceContainer);\r\n\t}\r\n\r\n\t/**\r\n\t * Current preload progress. (0-1)\r\n\t *\r\n\t * * 0 - 0%\r\n\t * * 0.5 - 50%\r\n\t * * 1 - 100%\r\n\t *\r\n\t * Setting this to a value less than 1, will automatically reveal the\r\n\t * preloader, while setting it to 1 (100%) will hide it.\r\n\t *\r\n\t * @param value Progress (0-1)\r\n\t */\r\n\tpublic set progress(value: number) {\r\n\t\tthis.__disabled = false;\r\n\r\n\t\tthis.validateLayout(); // show not in center without this\r\n\r\n\t\tthis.setPropertyValue(\"progress\", value);\r\n\r\n\t\t/*if (!this.visible && value == 1) {\r\n\t\t\treturn;\r\n\t\t}*/\r\n\r\n\t\tthis.progressSlice.arc = 360 * value;\r\n\r\n\t\tif (this.label) {\r\n\t\t\tthis.label.text = Math.round(value * 100) + \"%\";\r\n\t\t}\r\n\r\n\t\tif (value >= 1) {\r\n\r\n\t\t\t// Cancel the timeout\r\n\t\t\tif (this._started) {\r\n\t\t\t\tthis._started = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// TODO remove closure ?\r\n\t\t\tregistry.events.once(\"enterframe\", () => {\r\n\t\t\t\tlet animation = this.hide();\r\n\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.interactionsEnabled = false;\r\n\t\t\tthis.setPropertyValue(\"progress\", 0);\r\n\t\t}\r\n\t\telse if (value > 0) {\r\n\t\t\tif (this.delay) {\r\n\t\t\t\tif (!this._started) {\r\n\t\t\t\t\tthis._started = new Date().getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse if ((this._started + this.delay) <= new Date().getTime()) {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.show();\r\n\t\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.__disabled = false;\r\n\t\t\t\tthis.show();\r\n\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Progress (0-1)\r\n\t */\r\n\tpublic get progress(): number {\r\n\t\treturn this.getPropertyValue(\"progress\");\r\n\t}\r\n\r\n\t/**\r\n\t * Delay display of preloader by X milliseconds.\r\n\t *\r\n\t * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n\t * set to 1) before `delay` ms, the loader is never shown.\r\n\t *\r\n\t * This is used to avoid brief flashing of the preload for very quick loads.\r\n\t *\r\n\t * @default 1000\r\n\t * @param value  Delay (ms)\r\n\t */\r\n\tpublic set delay(value: number) {\r\n\t\tthis.setPropertyValue(\"delay\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Delay (ms)\r\n\t */\r\n\tpublic get delay(): number {\r\n\t\treturn this.getPropertyValue(\"delay\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Preloader\"] = Preloader;\r\n", "/**\r\n * Zoom out button functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CloseButton]].\r\n */\r\nexport interface ICloseButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[CloseButton]].\r\n */\r\nexport interface ICloseButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CloseButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICloseButtonAdapters extends IButtonAdapters, ICloseButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link ICloseButtonEvents} for a list of available events\r\n * @see {@link ICloseButtonAdapters} for a list of available Adapters\r\n */\r\nexport class CloseButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICloseButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICloseButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICloseButtonEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CloseButton\";\r\n\r\n\t\tthis.padding(8, 8, 8, 8);\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tthis.width = 30;\r\n\t\tthis.height = 30;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.cursorOverStyle = MouseCursorStyle.pointer;\r\n\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(20, 20, 20, 20);\r\n\r\n\t\tlet bgc = interfaceColors.getFor(\"background\");\r\n\t\tbackground.fill = bgc;\r\n\t\tbackground.stroke = interfaceColors.getFor(\"primaryButton\");\r\n\t\tbackground.strokeOpacity = 1;\r\n\t\tbackground.strokeWidth = 1;\r\n\r\n\t\tlet downColor = interfaceColors.getFor(\"primaryButtonActive\")\r\n\r\n\t\tlet bhs =background.states.getKey(\"hover\");\r\n\t\tbhs.properties.strokeWidth = 3;\r\n\t\tbhs.properties.fill = bgc;\r\n\r\n\t\tlet bds = background.states.getKey(\"down\");\t\t\t\t\r\n\t\tbds.properties.stroke = downColor;\r\n\t\tbds.properties.fill = bgc;\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\t\ticon.stroke = background.stroke;\r\n\r\n\t\tthis.icon = icon;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet w = this.pixelWidth / 3;\r\n\t\tlet h = this.pixelHeight / 3;\r\n\r\n\t\tlet path = $path.moveTo({ x: -w / 2, y: -h / 2 });\r\n\t\tpath += $path.lineTo({ x: w / 2, y: h / 2 });\r\n\t\tpath += $path.moveTo({ x: w / 2, y: -h / 2 });\r\n\t\tpath += $path.lineTo({ x: -w / 2, y: h / 2 });\r\n\t\tthis.icon.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Close\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CloseButton\"] = CloseButton;\r\n", "/**\r\n * Functionality for drawing simple SwitchButtons.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Label } from \"./Label\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SwitchButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISwitchButtonAdapters extends IContainerAdapters, ISwitchButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * SwitchButton class is capable of drawing a simple rectangular SwitchButton with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link ISwitchButtonEvents} for a list of available events\r\n * @see {@link ISwitchButtonAdapters} for a list of available Adapters\r\n */\r\nexport class SwitchButton extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISwitchButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISwitchButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISwitchButtonEvents;\r\n\r\n\t/**\r\n\t * Icon reference.\r\n\t */\r\n\tprotected _icon: Sprite;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _leftLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _rightLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * A type for background.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\tprotected _switchButton: Button;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SwitchButton\";\r\n\r\n\t\tthis.tooltipY = 0;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"horizontal\";\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.padding(8, 16, 8, 16);\r\n\t\tthis.setStateOnChildren = true;\r\n\t\tthis.states.create(\"active\");\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create the label element\r\n\t\tlet leftLabel = new Label();\r\n\t\tleftLabel.fillOpacity = 0.3;\r\n\t\tlet llas = leftLabel.states.create(\"active\");\r\n\t\tllas.properties.fillOpacity = 1;\r\n\t\tleftLabel.isActive = true;\r\n\t\tthis.leftLabel = leftLabel;\r\n\r\n\t\tlet button = new Button();\r\n\t\tlet circle = new Circle();\r\n\t\tbutton.contentValign = \"none\";\r\n\t\tbutton.padding(0, 0, 0, 0);\r\n\t\tcircle.radius = 10;\r\n\t\tbutton.icon = circle;\r\n\t\tbutton.icon.valign = \"middle\";\r\n\t\tbutton.label = undefined;\r\n\t\tlet p100 = percent(100);\r\n\t\tbutton.background.cornerRadius(p100, p100, p100, p100);\r\n\t\tbutton.width = circle.radius * 3.5;\r\n\t\tbutton.height = circle.radius * 2.1;\r\n\t\tbutton.marginLeft = 8;\r\n\t\tbutton.marginRight = 8;\r\n\t\tbutton.togglable = true;\r\n\t\tcircle.dx = -circle.radius * 0.7;\r\n\t\tcircle.fill = interfaceColors.getFor(\"primaryButton\");\r\n\r\n\t\tlet hs = circle.states.create(\"hover\");\r\n\t\ths.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\r\n\t\tlet as = circle.states.create(\"active\");\r\n\t\tas.properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\t\tas.properties.dx = circle.radius * 0.7;\r\n\r\n\t\tthis.switchButton = button;\r\n\r\n\t\tthis.events.on(\"toggled\", () => {\r\n\t\t\tthis.leftLabel.isActive = !this.isActive;\r\n\t\t\tthis.rightLabel.isActive = this.isActive;\r\n\t\t})\r\n\r\n\t\t// Create the label element\r\n\t\tlet rightLabel = new Label();\r\n\t\trightLabel.fillOpacity = 0.3;\r\n\r\n\t\tlet rlas = rightLabel.states.create(\"active\");\r\n\t\trlas.properties.fillOpacity = 1;\r\n\t\tthis.rightLabel = rightLabel;\r\n\r\n\t\t// Set up accessibility\r\n\t\t// A Button should be always focusable\r\n\t\tthis.role = \"button\";\r\n\t\tthis.focusable = true;\r\n\r\n\t\trightLabel.valign = \"middle\";\r\n\t\tleftLabel.valign = \"middle\";\r\n\t\tbutton.valign = \"middle\"\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param left label element\r\n\t */\r\n\tpublic set leftLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._leftLabel) {\r\n\t\t\tthis.removeDispose(this._leftLabel);\r\n\t\t}\r\n\t\tthis._leftLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._leftLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Left label element\r\n\t */\r\n\tpublic get leftLabel(): $type.Optional<Label> {\r\n\t\treturn this._leftLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param rigth label element\r\n\t */\r\n\tpublic set rightLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._rightLabel) {\r\n\t\t\tthis.removeDispose(this._rightLabel);\r\n\t\t}\r\n\t\tthis._rightLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._rightLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rigth label element\r\n\t */\r\n\tpublic get rightLabel(): $type.Optional<Label> {\r\n\t\treturn this._rightLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @deprecated Use `switchButton` instead\r\n\t */\r\n\tpublic get switch(): $type.Optional<Button> {\r\n\t\treturn this._switchButton;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element for switch.\r\n\t *\r\n\t * @param Button\r\n\t */\r\n\tpublic set switchButton(button: $type.Optional<Button>) {\r\n\t\tif (this._switchButton) {\r\n\t\t\tthis.removeDispose(this._switchButton);\r\n\t\t}\r\n\t\tthis._switchButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.parent = this;\r\n\t\t\tbutton.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._switchButton);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Button\r\n\t */\r\n\tpublic get switchButton(): $type.Optional<Button> {\r\n\t\treturn this._switchButton;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and other attributes.\r\n\t *\r\n\t * @param source  Source\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source.leftLabel) {\r\n\t\t\tthis.leftLabel.copyFrom(source.leftLabel)\r\n\t\t}\r\n\t\tif (source.rightLabel) {\r\n\t\t\tthis.rightLabel.copyFrom(source.rightLabel)\r\n\t\t}\r\n\t\tif (source.switchButton) {\r\n\t\t\tthis.switchButton.copyFrom(source.switchButton)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SwitchButton\"] = SwitchButton;\r\n", "/**\r\n * Slider is a scrollbar with just one selection grip.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Slider]].\r\n */\r\nexport interface ISliderProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[Slider]].\r\n */\r\nexport interface ISliderEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slider]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISliderAdapters extends IScrollbarAdapters, ISliderProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a slider - a version of scrollbar with just one grip.\r\n *\r\n * @see {@link ISliderEvents} for a list of available events\r\n * @see {@link ISliderAdapters} for a list of available Adapters\r\n */\r\nexport class Slider extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISliderProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISliderAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISliderEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Slider\";\r\n\r\n\t\tthis.thumb.opacity = 0;\r\n\t\tthis.thumb.interactionsEnabled = false;\r\n\t\tthis.endGrip.opacity = 0;\r\n\t\tthis.endGrip.interactionsEnabled = false;\r\n\r\n\t\tthis.startGrip.events.on(\"drag\", () => {\r\n\t\t\tthis.endGrip.x = this.startGrip.x;\r\n\t\t\tthis.endGrip.y = this.startGrip.y;\r\n\t\t})\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tprotected get __end(): number {\r\n\t\treturn this._start;\r\n\t}\r\n\r\n\tprotected set __end(value: number) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get end(): number {\r\n\t\treturn this._start;\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position (0-1) of the end grip.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t */\r\n\tpublic set end(position: number) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Relative position (0-1) of the start grip.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t */\r\n\tpublic set start(position: number) {\r\n\t\tif (!this._isBusy) {\r\n\t\t\tthis.__start = position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get start(): number {\r\n\t\treturn this._start;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slider\"] = Slider;\r\n", "/**\r\n * Play button functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PlayButton]].\r\n */\r\nexport interface IPlayButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[PlayButton]].\r\n */\r\nexport interface IPlayButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PlayButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPlayButtonAdapters extends IButtonAdapters, IPlayButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link IPlayButtonEvents} for a list of available events\r\n * @see {@link IPlayButtonAdapters} for a list of available Adapters\r\n */\r\nexport class PlayButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPlayButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPlayButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPlayButtonEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PlayButton\";\r\n\r\n\t\tthis.padding(12, 12, 12, 12);\r\n\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(25, 25, 25, 25);\r\n\t\tbackground.fill = interfaceColors.getFor(\"primaryButton\");\r\n\t\tbackground.stroke = interfaceColors.getFor(\"primaryButtonStroke\");\r\n\t\tbackground.strokeOpacity = 0;\r\n\r\n\t\tbackground.states.getKey(\"hover\").properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\t\tbackground.states.getKey(\"down\").properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\r\n\t\t// Create a play icon\r\n\t\tlet playIcon: Triangle = new Triangle();\r\n\t\tplayIcon.direction = \"right\";\r\n\t\tplayIcon.width = 9;\r\n\t\tplayIcon.height = 11;\r\n\t\tplayIcon.marginLeft = 1;\r\n\t\tplayIcon.marginRight = 1;\r\n\t\tplayIcon.horizontalCenter = \"middle\";\r\n\t\tplayIcon.verticalCenter = \"middle\";\r\n\r\n\t\tplayIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n\t\tplayIcon.fill = playIcon.stroke;\r\n\t\tthis.icon = playIcon;\r\n\r\n\t\t// Create a play icon\r\n\t\tlet stopIcon: RoundedRectangle = new RoundedRectangle();\r\n\t\tstopIcon.width = 11;\r\n\t\tstopIcon.height = 11;\r\n\t\tstopIcon.horizontalCenter = \"middle\";\r\n\t\tstopIcon.verticalCenter = \"middle\";\r\n\t\tstopIcon.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tstopIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n\t\tstopIcon.fill = playIcon.stroke;\r\n\r\n\t\tthis.togglable = true;\r\n\r\n\t\tlet activeState = this.states.create(\"active\");\r\n\t\tactiveState.transitionDuration = 0;\r\n\t\tactiveState.properties.icon = stopIcon;\r\n\r\n\t\tthis.defaultState.transitionDuration = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Play\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PlayButton\"] = PlayButton;\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { GradientModifier } from \"./GradientModifier\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class can be used to modify radial gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"LinearGradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nexport class RadialGradientModifier extends GradientModifier {\r\n\t/**\r\n\t * A reference to the gradient instance that this modifier is used for.\r\n\t */\r\n\tpublic gradient: RadialGradient;\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadialGradientModifier\";\r\n\t\tthis.gradient = new RadialGradient();\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.gradient = source.gradient.clone();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadialGradientModifier\"] = RadialGradientModifier;\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $path from \"../../rendering/Path\";\r\n\r\nexport interface LinePatternProperties extends PatternProperties {\r\n\tgap: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Line pattern.\r\n */\r\nexport class LinePattern extends Pattern {\r\n\r\n\t/**\r\n\t * SVG `<line>` element used for pattern.\r\n\t */\r\n\tprotected _line: AMElement;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: LinePatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.properties[\"gap\"] = 0;\r\n\t\tthis._line = this.paper.add(\"path\");\r\n\t\tthis.addElement(this._line);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the pattern.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\tthis.properties[\"shapeRendering\"] = \"auto\";\r\n\t\t}\r\n\t\tif (this._line) {\r\n\t\t\tlet w = this.width;\r\n\t\t\tlet h = this.height;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tif (!this.gap) {\r\n\t\t\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: -w, y: h / 2 }) + $path.lineTo({ x: w * 2, y: h / 2 });\r\n\r\n\t\t\t\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\t\t\t\tthis.properties[\"rotationY\"] = this.height / 2;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpath = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet step = this.gap + this.strokeWidth;\r\n\t\t\t\tlet count = this.height / step;\r\n\r\n\t\t\t\tfor (let i = -count / 2; i < count * 1.5; i++) {\r\n\t\t\t\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: -w, y: (i + 0.5) * step }) + $path.lineTo({ x: w * 2, y: (i + 0.5) * step });\r\n\r\n\t\t\t\t\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\t\t\t\t\tthis.properties[\"rotationY\"] = this.height / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: -w, y: i * step }) + $path.lineTo({ x: w * 2, y: i * step });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._line.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Number of pixels between pattern lines.\r\n\t *\r\n\t * The pattern will automatically draw required number of lines to fill\r\n\t * pattern area maintaining `gap` distance between them.\r\n\t *\r\n\t * 0 (zero) means only single line will be drawn.\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.7.7\r\n\t */\r\n\tpublic set gap(value: number) {\r\n\t\tthis.properties[\"gap\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return gap\r\n\t */\r\n\tpublic get gap(): number {\r\n\t\treturn this.properties[\"gap\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;\r\n", "/**\r\n * Rectangular pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for circle pattern\r\n */\r\nexport interface CirclePatternProperties extends PatternProperties {\r\n\tradius: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Circular pattern\r\n */\r\nexport class CirclePattern extends Pattern {\r\n\r\n\t/**\r\n\t * Reference to `<circle>` element used in pattern.\r\n\t */\r\n\tprotected _circle: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: CirclePatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.properties[\"radius\"] = 2;\r\n\t\tthis._circle = this.paper.add(\"circle\");\r\n\t\tthis.addElement(this._circle);\r\n\t\tthis.shapeRendering = \"auto\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the circle element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this._circle) {\r\n\t\t\tthis._circle.attr({ \"r\": this.radius, \"cx\": this.width / 2, \"cy\":this.height / 2});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Circle radius in pixels.\r\n\t *\r\n\t * @param value Radius (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.properties[\"radius\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.properties[\"radius\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CirclePattern\"] = CirclePattern;\r\n", "/**\r\n * Rectangular pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for rectangular pattern\r\n */\r\nexport interface RectPatternProperties extends PatternProperties {\r\n\trectWidth: number;\r\n\trectHeight: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Rectangular pattern\r\n */\r\nexport class RectPattern extends Pattern {\r\n\r\n\t/**\r\n\t * Reference to `<rect>` element used in pattern.\r\n\t */\r\n\tprotected _rect: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: RectPatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.rectHeight = 1;\r\n\t\tthis.rectWidth = 1;\r\n\t\tthis._rect = this.paper.add(\"rect\");\r\n\t\tthis.addElement(this._rect);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the rectangular element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\tthis.properties[\"rotationY\"] = this.height / 2;\t\t\r\n\t\tif (this._rect) {\r\n\t\t\tthis._rect.attr({ \"width\": this.rectWidth, \"height\": this.rectHeight, \"x\":(this.width - this.rectWidth) / 2, \"y\":(this.height - this.rectHeight) / 2 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle width in pixels.\r\n\t *\r\n\t * @param value Width (px)\r\n\t */\r\n\tpublic set rectWidth(value: number) {\r\n\t\tthis.properties[\"rectWidth\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get rectWidth(): number {\r\n\t\treturn this.properties[\"rectWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle height in pixels.\r\n\t *\r\n\t * @param value Height (px)\r\n\t */\r\n\tpublic set rectHeight(value: number) {\r\n\t\tthis.properties[\"rectHeight\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get rectHeight(): number {\r\n\t\treturn this.properties[\"rectHeight\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RectPattern\"] = RectPattern;\r\n", "/**\r\n * Module for \"Colorize\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Colorize\" filter.\r\n */\r\nexport interface ColorizeFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n\t/**\r\n\t * Intensity. (0-1)\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tintensity: number;\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Colorize\" filter.\r\n */\r\nexport class ColorizeFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: ColorizeFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link ColorizeFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<ColorizeFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feColorMatrix>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColorizeFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n\t\t//this.feColorMatrix.setAttribute(\"in\", \"SourceAlpha\");\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.intensity = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)applies colors to the already existing filter by modifying filyer's\r\n\t * color matrix element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyFilter(): void {\r\n\r\n\t\tlet i: number = this.intensity;\r\n\t\tlet ii = 1 - i;\r\n\r\n\t\tlet r: number;\r\n\t\tlet g: number;\r\n\t\tlet b: number;\r\n\r\n\t\tconst color = this.color;\r\n\r\n\t\tif (color && color.rgb) {\r\n\t\t\tr = color.rgb.r / 255 * i;\r\n\t\t\tg = color.rgb.g / 255 * i;\r\n\t\t\tb = color.rgb.b / 255 * i;\r\n\r\n\t\t} else {\r\n\t\t\tr = 0;\r\n\t\t\tg = 0;\r\n\t\t\tb = 0;\r\n\t\t}\r\n\r\n\t\tthis.feColorMatrix.attr({ \"values\": ii + \" 0 0 0 \" + r + \" 0 \" + ii + \" 0 0 \" + g + \" 0 0 \" + ii + \" 0 \" + b + \" 0 0 0 1 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * Target color to apply to the element.\r\n\t *\r\n\t * Depending on the `intensity`, all colors of the target element will steer\r\n\t * towards this color.\r\n\t *\r\n\t * E.g. setting to `am4core.color(\"greener\")` will make all colors greener.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: $type.Optional<Color>) {\r\n\t\tthis.properties[\"color\"] = value;\r\n\t\tthis.applyFilter();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): $type.Optional<Color> {\r\n\t\treturn this.properties[\"color\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Intensity of the color (0-1).\r\n\t *\r\n\t * The bigger the number the more of a `color` target's colors will become.\r\n\t *\r\n\t * 0 means the colors will remain as they are.\r\n\t * 1 means all colors will become the target `color`.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Intensity (0-1)\r\n\t */\r\n\tpublic set intensity(value: number) {\r\n\t\tthis.properties.intensity = value;\r\n\t\tthis.applyFilter();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Intensity (0-1)\r\n\t */\r\n\tpublic get intensity(): number {\r\n\t\treturn this.properties.intensity;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorizeFilter\"] = ColorizeFilter;\r\n", "/**\r\n * Module for \"Blur\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Blur\" filter.\r\n */\r\nexport interface BlurFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Horizontal offset in pixels.\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\tdx?: number;\r\n\r\n\t/**\r\n\t * Vertical offset in pixels.\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\tdy?: number;\r\n\r\n\t/**\r\n\t * Blur value.\r\n\t */\r\n\tblur: number;\r\n\r\n\t/**\r\n\t * Opacity. (0-1)\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\topacity?: number;\r\n\r\n\t/**\r\n\t * Color.\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\tcolor?: Color;\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Blur\" filter.\r\n */\r\nexport class BlurFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: BlurFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link BlurFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<BlurFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feGaussianBlur>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feGaussianBlur: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"BlurFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\r\n\t\tthis.feGaussianBlur = this.paper.add(\"feGaussianBlur\");\r\n\t\tthis.feGaussianBlur.attr({ \"result\": \"blurOut\", \"in\": \"SourceGraphic\" });\r\n\t\tthis.filterPrimitives.push(this.feGaussianBlur);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.width = 200;\r\n\t\tthis.height = 200;\r\n\t\tthis.blur = 1.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Blur value.\r\n\t *\r\n\t * The bigger the value, the blurrier the target element will become.\r\n\t *\r\n\t * @default 1.5\r\n\t * @param value Blur\r\n\t */\r\n\tpublic set blur(value: number) {\r\n\t\tthis.properties.blur = value;\r\n\t\tthis.feGaussianBlur.attr({ \"stdDeviation\": value / this.scale });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Blur\r\n\t */\r\n\tpublic get blur(): number {\r\n\t\treturn this.properties.blur;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"BlurFilter\"] = BlurFilter;\r\n", "/**\r\n * Module for \"Focus\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Focus\" filter.\r\n */\r\nexport interface FocusFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Opacity of the outline. (0-1)\r\n\t */\r\n\topacity?: number;\r\n\r\n\t/**\r\n\t * Stroke (outline) color.\r\n\t */\r\n\tstroke?: Color;\r\n\r\n\t/**\r\n\t * Stroke (outline) thickness in pixels.\r\n\t */\r\n\tstrokeWidth?: number;\r\n\r\n\t/**\r\n\t * Stroke (outline) opacity. (0-1)\r\n\t */\r\n\tstrokeOpacity?: number;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Focus\" filter.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n */\r\nexport class FocusFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: FocusFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link FocusFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<FocusFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feFlood: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feMorphology>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feMorphology: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feComposite>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feComposite: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feBlend: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FocusFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feFlood = this.paper.add(\"feFlood\");\r\n\t\tthis.feFlood.attr({ \"flood-color\": new InterfaceColorSet().getFor(\"primaryButtonHover\"), \"result\": \"base\" });\r\n\t\tthis.filterPrimitives.push(this.feFlood);\r\n\r\n\t\tthis.feMorphology = this.paper.add(\"feMorphology\");\r\n\t\tthis.feMorphology.attr({ \"result\": \"bigger\", \"in\": \"SourceGraphic\", \"operator\": \"dilate\", \"radius\": \"2\" });\r\n\t\tthis.filterPrimitives.push(this.feMorphology);\r\n\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"result\": \"mask\", \"in\": \"bigger\", \"type\": \"matrix\", \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\" });\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\tthis.feComposite = this.paper.add(\"feComposite\");\r\n\t\tthis.feComposite.attr({ \"result\": \"drop\", \"in\": \"base\", \"in2\": \"mask\", \"operator\": \"in\" });\r\n\t\tthis.filterPrimitives.push(this.feComposite);\r\n\r\n\t\tthis.feBlend = this.paper.add(\"feBlend\");\r\n\t\tthis.feBlend.attr({ \"in\": \"SourceGraphic\", \"in2\": \"drop\", \"mode\": \"normal\" });\r\n\t\tthis.filterPrimitives.push(this.feBlend);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.width = 130;\r\n\t\tthis.height = 130;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set stroke(value: $type.Optional<Color>) {\r\n\t\tthis.properties[\"stroke\"] = value;\r\n\t\tthis.feFlood.attr({ \"flood-color\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get stroke(): $type.Optional<Color> {\r\n\t\treturn this.properties[\"stroke\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) thickness in pixels.\r\n\t *\r\n\t * @param value  Outline thickness (px)\r\n\t */\r\n\tpublic set strokeWidth(value: $type.Optional<number>) {\r\n\t\tthis.properties[\"strokeWidth\"] = value;\r\n\t\tthis.feMorphology.attr({ \"radius\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outline thickness (px)\r\n\t */\r\n\tpublic get strokeWidth(): $type.Optional<number> {\r\n\t\treturn this.properties[\"strokeWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Opacity of the outline. (0-1)\r\n\t *\r\n\t * @param value  Outline opacity (0-1)\r\n\t */\r\n\tpublic set opacity(value: $type.Optional<number>) {\r\n\t\tthis.properties[\"opacity\"] = value;\r\n\t\tthis.feColorMatrix.attr({ \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \" + value + \" 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outline opacity (0-1)\r\n\t */\r\n\tpublic get opacity(): $type.Optional<number> {\r\n\t\treturn this.properties[\"opacity\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets filter's target element.\r\n\t *\r\n\t * In addition it also disables built-in focus outline on element this\r\n\t * filter is applied to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Element filter is being attached to\r\n\t */\r\n\tprotected setSprite(value: Sprite): void {\r\n\t\tif (this._sprite && this._sprite != value) {\r\n\t\t\tthis._sprite.group.removeStyle(\"outline\");\r\n\t\t}\r\n\t\tvalue.group.addStyle({\r\n\t\t\t\"outline\": \"none\"\r\n\t\t});\r\n\t\tsuper.setSprite(value);\r\n\t}\r\n\r\n}\r\n", "/**\r\n * This module contains PatternSet object definition\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color } from \"./Color\";\r\nimport { InterfaceColorSet } from \"./InterfaceColorSet\";\r\nimport { Pattern } from \"../rendering/fills/Pattern\";\r\nimport { LinePattern } from \"../rendering/fills/LinePattern\";\r\nimport { RectPattern } from \"../rendering/fills/RectPattern\";\r\nimport { CirclePattern } from \"../rendering/fills/CirclePattern\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an interable list of distinctive patterns that can be used in\r\n * conjunction to colors to generate various fill patterns.\r\n *\r\n * @important\r\n * @since 4.7.5\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nexport class PatternSet extends BaseObject {\r\n\r\n\t/**\r\n\t * Holds the list of the colors in this set. (preset or auto-generated)\r\n\t */\r\n\tprotected _list: Pattern[] = [];\r\n\r\n\t/**\r\n\t * Current step.\r\n\t */\r\n\tprotected _currentStep: number = 0;\r\n\r\n\t/**\r\n\t * If set to non-zero value, the PatternSet will start iterating patterns from\r\n\t * that particular index, not the first pattern in the list.\r\n\t */\r\n\tprotected _startIndex: number = 0;\r\n\r\n\t/**\r\n\t * Current pass in cycle. Once all patterns in the list are iterated,\r\n\t * iteration restarts from beginning and currentPass is incremented.\r\n\t */\r\n\tprotected _currentPass: number = 0;\r\n\r\n\t/**\r\n\t * A base color. If there are no colors pre-set in the color list, ColorSet\r\n\t * will use this color as a base when generating new ones, applying\r\n\t * `stepOptions` and `passOptions` to this base color.\r\n\t */\r\n\tpublic baseColor: Color = new Color({\r\n\t\tr: 103,\r\n\t\tg: 183,\r\n\t\tb: 220\r\n\t});\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PatternSet\";\r\n\r\n\t\t// Set base color to be used for pattern elements\r\n\t\tconst interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set default patterns\r\n\t\tthis.list = [\r\n\t\t\tthis.getLinePattern(1000, 45, 1, 6),\r\n\t\t\tthis.getRectPattern(10, 0, 4),\r\n\t\t\tthis.getLinePattern(1000, -45, 1, 6),\r\n\t\t\tthis.getCirclePattern(11, 2, true),\r\n\t\t\tthis.getLinePattern(6, 90, 1),\r\n\t\t\tthis.getRectPattern(12, 45, 6, true),\r\n\t\t\tthis.getLinePattern(6, 0, 1),\r\n\t\t\tthis.getRectPattern(7, 0, 4),\r\n\t\t\tthis.getLinePattern(1000, 45, 2, 3, \"4,2\"),\r\n\t\t\tthis.getCirclePattern(9, 3, false),\r\n\t\t\tthis.getLinePattern(1000, -45, 2, 3, \"4,2\"),\r\n\t\t\tthis.getRectPattern(10, 45, Math.sqrt(50)),\r\n\t\t\tthis.getLinePattern(1000, -45, 2, 1),\r\n\t\t\tthis.getRectPattern(10, 0, 9),\r\n\t\t\tthis.getLinePattern(1000, 45, 2, 1),\r\n\t\t\tthis.getLinePattern(1000, 0, 3, 1),\r\n\t\t\tthis.getRectPattern(10, 45, 10),\r\n\t\t\tthis.getLinePattern(1000, 90, 3, 1)\r\n\t\t];\r\n\r\n\t\tthis.baseColor = interfaceColors.getFor(\"stroke\");\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic getLinePattern(size: number, rotation: number, thickness: number, gap?: number, strokeDashArray?: string): LinePattern {\r\n\t\tlet pattern = new LinePattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.stroke = this.baseColor;\r\n\t\tpattern.gap = gap;\r\n\t\tpattern.strokeDasharray = strokeDashArray;\r\n\t\tpattern.strokeWidth = thickness;\r\n\t\tpattern.rotation = rotation;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\tpublic getRectPattern(size: number, rotation: number, thickness: number, outline?:boolean): RectPattern {\r\n\t\tlet pattern = new RectPattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.rectWidth = thickness;\r\n\t\tpattern.rectHeight = thickness;\r\n\r\n\t\tif(outline){\r\n\t\t\tpattern.stroke = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 1;\r\n\t\t\tpattern.fillOpacity = 0;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tpattern.fill = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 0;\r\n\t\t}\r\n\r\n\t\tif(rotation != 0){\r\n\t\t\tpattern.shapeRendering = \"auto\";\r\n\t\t}\r\n\r\n\t\tpattern.rotation = rotation;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\tpublic getCirclePattern(size: number, radius: number, outline:boolean): CirclePattern {\r\n\t\tlet pattern = new CirclePattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.shapeRendering = \"auto\";\r\n\t\tpattern.radius = radius;\r\n\t\tif(outline){\r\n\t\t\tpattern.stroke = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 1;\r\n\t\t\tpattern.fillOpacity = 0;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tpattern.fill = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 0;\r\n\t\t}\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\t/**\r\n\t * List of pre-defined patterns to be used in set.\r\n\t *\r\n\t * @param value Pattern list\r\n\t */\r\n\tpublic set list(value: Pattern[]) {\r\n\t\tthis._list = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern list\r\n\t */\r\n\tpublic get list(): Pattern[] {\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next pattern in list.\r\n\t *\r\n\t * @return Pattern\r\n\t */\r\n\tpublic next(): Pattern {\r\n\t\tconst pattern = this.getIndex(this.currentStep);\r\n\t\tthis._currentStep++;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a color at specific index in the list.\r\n\t *\r\n\t * @param  i  Index\r\n\t * @return Pattern\r\n\t */\r\n\tpublic getIndex(i: number): Pattern {\r\n\t\tlet pattern;\r\n\t\twhile (this.list.length <= i) {\r\n\t\t\tthis.generatePatterns();\r\n\t\t}\r\n\t\tpattern = this.list[i];\r\n\t\treturn pattern.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a new set of patterns.\r\n\t */\r\n\tprivate generatePatterns(): void {\r\n\t\tconst count = this.list.length / (this._currentPass + 1);\r\n\t\tthis._currentPass++;\r\n\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\tthis.list.push(this.list[i].clone());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t *\r\n\t * Calling `next()` after this will return the very first color in the color\r\n\t * list, even if it was already returned before.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis._currentStep = this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current color iteration. You can use this property to skip some\r\n\t * colors from iteration. E.g. setting it to `10` will skip first ten\r\n\t * colors.\r\n\t *\r\n\t * Please note that the number is zero-based.\r\n\t *\r\n\t * @param value  Step\r\n\t */\r\n\tpublic set currentStep(value: number) {\r\n\t\tthis._currentStep = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get currentStep(): number {\r\n\t\treturn this._currentStep;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to non-zero value, the ColorSet will start iterating colors from\r\n\t * that particular index, not the first color in the list.\r\n\t *\r\n\t * @default 0\r\n\t * @param  value  Index\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t\tthis._startIndex = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Index\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// if (config) {\r\n\r\n\t\t// \t// Set up axis ranges\r\n\t\t// \tif ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n\t\t// \t\tfor (let i = 0, len = config.list.length; i < len; i++) {\r\n\t\t// \t\t\tif (!(config.list[i] instanceof Color)) {\r\n\t\t// \t\t\t\tconfig.list[i] = color(config.list[i]);\r\n\t\t// \t\t\t}\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PatternSet\"] = PatternSet;", "/**\r\n * A plugin base class.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Optional } from \"./Type\";\r\nimport { IDisposer } from \"./Disposer\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport interface IPlugin extends IDisposer {\r\n\ttarget: Optional<Sprite>;\r\n\tinit(): void;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class that provides core functionality for plugins.\r\n *\r\n * The easiest way to start off with a new plugin is to extend this class.\r\n *\r\n * It will provide all the mandatory functionality, such as disposers.\r\n *\r\n * @since 4.2.2\r\n */\r\nexport class Plugin implements IPlugin {\r\n\r\n\r\n\t/**\r\n\t * A target object plugin is for.\r\n\t */\r\n\tpublic target: Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Is this object disposed?\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\t// Nothing to do here\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates series with required events and adapters used to hijack its\r\n\t * data.\r\n\t */\r\n\tpublic init(): void {\r\n\t\t// Does nothing\r\n\t\t// Override it\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this element is already disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes this object and related stuff.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._disposers;\r\n\r\n\t\t\tthis._disposers = <any>null;\r\n\r\n\t\t\twhile (a.length !== 0) {\r\n\t\t\t\tconst disposer = a.shift();\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "/**\r\n * AmChartsLogo module.\r\n *\r\n * AmChartsLogo shows amCharts logo for non-commercial users of a library.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Polyspline } from \"./Polyspline\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { DesaturateFilter } from \"../rendering/filters/DesaturateFilter\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AmChartsLogo]].\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IAmChartsLogoProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[AmChartsLogo]].\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IAmChartsLogoEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AmChartsLogo]].\r\n *\r\n * @see {@link Adapter}\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IAmChartsLogoAdapters extends IContainerAdapters, IAmChartsLogoProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IAmChartsLogoEvents} for a list of available events\r\n * @see {@link IAmChartsLogoAdapters} for a list of available Adapters\r\n * @ignore Exclude from docs\r\n */\r\nexport class AmChartsLogo extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAmChartsLogoProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAmChartsLogoAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAmChartsLogoEvents;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AmChartsLogo\";\r\n\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tlet d = 0.3;\r\n\t\tthis.opacity = 0.3;\r\n\t\tthis.defaultState.properties.opacity = 0.4;\r\n\t\tthis.url = \"https://www.amcharts.com/\";\r\n\t\tthis.urlTarget = \"_blank\";\r\n\r\n\t\tthis.showSystemTooltip = true;\r\n\t\tthis.readerTitle = \"Chart created using amCharts library\";\r\n\t\tthis.width = 220 * d;\r\n\t\tthis.height = 70 * d;\r\n\t\tthis.background.opacity = 0;\r\n\r\n\t\tlet aColor = color(\"#474758\");\r\n\t\tif (new InterfaceColorSet().getFor(\"background\").alternative.hex == \"#ffffff\") {\r\n\t\t\taColor = color(\"#ffffff\");\r\n\t\t}\r\n\r\n\t\tlet aGradient = new LinearGradient();\r\n\r\n\t\taGradient.addColor(aColor);\r\n\t\taGradient.addColor(aColor, 1, 0.75);\r\n\t\taGradient.addColor(color(\"#3cabff\"), 1, 0.755);\r\n\t\taGradient.rotation = -10;\r\n\r\n\t\tlet aStroke = aGradient;\r\n\r\n\t\tlet m = this.createChild(Polyspline)\r\n\t\tm.shouldClone = false;\r\n\t\tm.isMeasured = false;\r\n\t\tm.segments = [[{ x: 50 * d, y: 50 * d }, { x: 90 * d, y: 50 * d }, { x: 120 * d, y: 20 * d }, { x: 135 * d, y: 35 * d }, { x: 150 * d, y: 20 * d }, { x: 180 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]]\r\n\t\tm.strokeWidth = 6 * d;\r\n\t\tm.tensionX = 0.8;\r\n\t\tm.tensionY = 1;\r\n\r\n\t\tm.stroke = color(\"#3cabff\");\r\n\r\n\t\tlet a = this.createChild(Polyspline);\r\n\t\ta.shouldClone = false;\r\n\t\ta.isMeasured = false;\r\n\t\ta.segments = [[{ x: 20 * d, y: 50 * d }, { x: 50 * d, y: 50 * d }, { x: 90 * d, y: 12 * d }, { x: 133 * d, y: 50 * d }, { x: 170 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]]\r\n\t\ta.strokeWidth = 6 * d;\r\n\t\ta.tensionX = 0.75;\r\n\t\ta.tensionY = 1;\r\n\t\ta.stroke = aStroke;\r\n\r\n\t\tthis._disposers.push(a);\r\n\r\n\t\tlet desaturateFilter = new DesaturateFilter();\r\n\t\tthis.filters.push(desaturateFilter);\r\n\r\n\t\tlet desaturateFilterHover = new DesaturateFilter();\r\n\t\tdesaturateFilterHover.saturation = 1;\r\n\r\n\t\tlet hoverState = this.states.create(\"hover\");\r\n\t\thoverState.properties.opacity = 1;\r\n\t\thoverState.filters.push(desaturateFilterHover);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { system } from \"../System\";\r\nimport { registry } from \"../Registry\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Container } from \"../Container\";\r\nimport { Component } from \"../Component\";\r\nimport { Paper } from \"../rendering/Paper\";\r\nimport { SVGContainer, svgContainers } from \"../rendering/SVGContainer\";\r\nimport { FocusFilter } from \"../rendering/filters/FocusFilter\";\r\nimport { Preloader } from \"../elements/Preloader\";\r\nimport { AmChartsLogo } from \"../elements/AmChartsLogo\";\r\nimport { ITheme } from \"../../themes/ITheme\";\r\nimport { Tooltip } from \"../elements/Tooltip\";\r\nimport { Disposer, MultiDisposer } from \"../utils/Disposer\";\r\nimport { percent } from \"./Percent\";\r\nimport { options } from \"../Options\";\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport * as $dom from \"./DOM\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $log from \"./Log\";\r\n\r\n/**\r\n * ============================================================================\r\n * INSTANTIATION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates all HTML and SVG containers needed for the chart instance, as well\r\n * as the new [[Sprite]] (as specified in `classType` parameter).\r\n *\r\n * @param htmlElement  A container to creat elements in\r\n * @param classType    A class definition of the new element to create\r\n * @return Newly-created Sprite object\r\n */\r\nfunction createChild<T extends Sprite>(htmlElement: $type.Optional<HTMLElement | string>, classType: { new(): T; }): T {\r\n\tlet htmlContainer = $dom.getElement(htmlElement);\r\n\r\n\t// If there's no container available yet, we create a fake one\r\n\tlet tmpContainer = false;\r\n\tif (!htmlContainer) {\r\n\t\thtmlContainer = document.createElement(\"div\");\r\n\t\thtmlContainer.style.width = \"200px\";\r\n\t\thtmlContainer.style.height = \"200px\";\r\n\t\thtmlContainer.style.top = \"0\";\r\n\t\thtmlContainer.style.left = \"0\";\r\n\t\thtmlContainer.style.visibility = \"hidden\";\r\n\t\thtmlContainer.style.position = \"absolute\";\r\n\t\tdocument.body.appendChild(htmlContainer);\r\n\t\ttmpContainer = true;\r\n\t}\r\n\r\n\tif (htmlContainer) {\r\n\r\n\t\thtmlContainer.innerHTML = \"\";\r\n\t\t//htmlContainer.style.overflow = \"hidden\";\r\n\r\n\t\tlet svgDiv = new SVGContainer(htmlContainer);\r\n\t\tlet paper = new Paper(svgDiv.SVGContainer, \"svg-\" + (svgContainers.length - 1));\r\n\r\n\t\t// the approach with masks is chosen because overflow:visible is set on SVG element in order tooltips could go outside\r\n\t\t// svg area - this is often needed when working with small charts.\r\n\r\n\t\t// main container which holds content container and tooltips container\r\n\t\tlet container = new Container();\r\n\t\tcontainer.htmlContainer = htmlContainer;\r\n\t\tcontainer.svgContainer = svgDiv;\r\n\t\tcontainer.width = percent(100);\r\n\t\tcontainer.height = percent(100);\r\n\t\tcontainer.background.fillOpacity = 0;\r\n\t\tcontainer.paper = paper;\r\n\t\tpaper.append(container.group);\r\n\r\n\t\t// Set up moving to proper element container if it's not yet ready at call time\r\n\t\tif (tmpContainer) {\r\n\t\t\t$dom.ready(() => {\r\n\t\t\t\tcontainer.moveHtmlContainer(htmlElement);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// this is set from parent container, but this one doesn't have, so do it manually.\r\n\t\tcontainer.relativeWidth = 1;\r\n\t\tcontainer.relativeHeight = 1;\r\n\r\n\t\tsvgDiv.container = container;\r\n\r\n\t\t// creating classType instance\r\n\t\tlet sprite = container.createChild(classType);\r\n\t\tsprite.topParent = container;\r\n\t\tlet uid = sprite.uid;\r\n\r\n\t\tregistry.invalidSprites[uid] = [];\r\n\t\tregistry.invalidDatas[uid] = [];\r\n\t\tregistry.invalidPositions[uid] = [];\r\n\t\tregistry.invalidLayouts[uid] = [];\r\n\r\n\t\tcontainer.baseId = uid;\r\n\r\n\t\tsprite.isBaseSprite = true;\r\n\t\tsprite.focusFilter = new FocusFilter();\r\n\t\tregistry.baseSprites.push(sprite);\r\n\t\tregistry.baseSpritesByUid[uid] = sprite;\r\n\r\n\t\tsprite.maskRectangle = { x: 0, y: 0, width: Math.max(svgDiv.width || 0, 0), height: Math.max(svgDiv.height || 0, 0) };\r\n\r\n\t\t// this solves issues with display:none, as all children are measured as 0x0\r\n\t\tcontainer.events.on(\"maxsizechanged\", (event) => {\r\n\t\t\tif (event.previousWidth == 0 || event.previousHeight == 0) {\r\n\t\t\t\tcontainer.deepInvalidate();\r\n\t\t\t}\r\n\t\t\tif (sprite.maskRectangle) {\r\n\t\t\t\tsprite.maskRectangle = { x: 0, y: 0, width: Math.max(svgDiv.width || 0, 0), height: Math.max(svgDiv.height || 0, 0) };\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet loopTimer: number | null = null;\r\n\r\n\t\t// Checks to see whether the chart was properly disposed or not\r\n\t\tconst loop = () => {\r\n\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\tif ($dom.getRoot(sprite.dom) == null) {\r\n\t\t\t\t\tif (options.autoDispose) {\r\n\t\t\t\t\t\tcontainer.htmlContainer = undefined;\r\n\t\t\t\t\t\tsvgDiv.htmlElement = undefined;\r\n\t\t\t\t\t\tsprite.dispose();\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$log.warn(\"Chart was not disposed\", sprite.uid);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tloopTimer = null;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tloopTimer = window.setTimeout(loop, 1000);\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tloopTimer = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tloop();\r\n\r\n\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\tif (loopTimer !== null) {\r\n\t\t\t\tclearTimeout(loopTimer);\r\n\t\t\t}\r\n\t\t\t$array.remove(registry.baseSprites, sprite);\r\n\t\t\tregistry.baseSpritesByUid[sprite.uid] = undefined;\r\n\t\t}));\r\n\r\n\t\t// TODO figure out a better way of doing this\r\n\t\tsprite.addDisposer(container);\r\n\r\n\t\t// tooltip container\r\n\t\tlet tooltipContainer: Container = container.createChild(Container);\r\n\t\ttooltipContainer.topParent = container;\r\n\t\ttooltipContainer.width = percent(100);\r\n\t\ttooltipContainer.height = percent(100);\r\n\t\ttooltipContainer.isMeasured = false;\r\n\t\tcontainer.tooltipContainer = tooltipContainer;\r\n\r\n\t\tsprite.tooltip = new Tooltip();\r\n\t\tsprite.tooltip.hide(0);\r\n\t\tsprite.tooltip.setBounds({ x: 0, y: 0, width: tooltipContainer.maxWidth, height: tooltipContainer.maxHeight });\r\n\r\n\t\ttooltipContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\t$type.getValue(sprite.tooltip).setBounds({ x: 0, y: 0, width: tooltipContainer.maxWidth, height: tooltipContainer.maxHeight });\r\n\t\t}, undefined, false)\r\n\r\n\t\t//@todo: maybe we don't need to create one by default but only on request?\r\n\r\n\t\tlet preloader = new Preloader();\r\n\t\tpreloader.events.on(\"inited\", () => {\r\n\t\t\tpreloader.__disabled = true;\r\n\t\t}, undefined, false);\r\n\t\tcontainer.preloader = preloader;\r\n\r\n\t\t//if (!options.commercialLicense) {\r\n\t\tif (sprite instanceof Container && !sprite.hasLicense()) {\r\n\t\t\tlet logo = tooltipContainer.createChild(AmChartsLogo);\r\n\t\t\ttooltipContainer.events.on(\"maxsizechanged\", (ev) => {\r\n\t\t\t\tif ((tooltipContainer.maxWidth <= 100) || (tooltipContainer.maxHeight <= 50)) {\r\n\t\t\t\t\tlogo.hide();\r\n\t\t\t\t}\r\n\t\t\t\telse if (logo.isHidden || logo.isHiding) {\r\n\t\t\t\t\tlogo.show();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tsprite.logo = logo;\r\n\t\t\tlogo.align = \"left\";\r\n\t\t\tlogo.valign = \"bottom\";\r\n\t\t}\r\n\r\n\t\t$utils.used(sprite.numberFormatter); // need to create one.\r\n\r\n\t\t// Set this as an autonomouse instance\r\n\t\t// Controls like Preloader, Export will use this.\r\n\t\tcontainer.isStandaloneInstance = true;\r\n\r\n\t\tif (options.onlyShowOnViewport) {\r\n\t\t\tif (!$dom.isElementInViewport(htmlContainer, options.viewportTarget)) {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t\tsprite.tooltipContainer.__disabled = true;\r\n\r\n\t\t\t\tlet disposers = [\r\n\t\t\t\t\t$dom.addEventListener(window, \"DOMContentLoaded\", function() { viewPortHandler(sprite); }),\r\n\t\t\t\t\t$dom.addEventListener(window, \"load\", function() { viewPortHandler(sprite); }),\r\n\t\t\t\t\t$dom.addEventListener(window, \"resize\", function() { viewPortHandler(sprite); }),\r\n\t\t\t\t\t$dom.addEventListener(window, \"scroll\", function() { viewPortHandler(sprite); })\r\n\t\t\t\t];\r\n\r\n\t\t\t\tif (options.viewportTarget) {\r\n\t\t\t\t\tconst targets = $type.isArray(options.viewportTarget) ? options.viewportTarget : options.viewportTarget ? [options.viewportTarget] : [];\r\n\t\t\t\t\tfor (let i = 0; i < targets.length; i++) {\r\n\t\t\t\t\t\tconst target = targets[i];\r\n\t\t\t\t\t\tdisposers.push($dom.addEventListener(target, \"resize\", function() { viewPortHandler(sprite); }));\r\n\t\t\t\t\t\tdisposers.push($dom.addEventListener(target, \"scroll\", function() { viewPortHandler(sprite); }));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet disposer = new MultiDisposer(disposers);\r\n\r\n\t\t\t\tsprite.addDisposer(disposer);\r\n\t\t\t\tsprite.vpDisposer = disposer;\r\n\t\t\t}\r\n\t\t\telse if (options.queue) {\r\n\t\t\t\taddToQueue(sprite);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (options.queue) {\r\n\t\t\taddToQueue(sprite);\r\n\t\t}\r\n\r\n\t\treturn sprite;\r\n\t}\r\n\telse {\r\n\t\tsystem.log(\"html container not found\");\r\n\t\tthrow new Error(\"html container not found\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Disposes all of the currently active charts.\r\n */\r\nexport function disposeAllCharts(): void {\r\n\twhile (registry.baseSprites.length !== 0) {\r\n\t\tregistry.baseSprites.pop().dispose();\r\n\t}\r\n}\r\n\r\nexport function addToQueue(sprite: Sprite) {\r\n\tif (registry.queue.indexOf(sprite) == -1) {\r\n\t\tsprite.__disabled = true;\r\n\t\tsprite.tooltipContainer.__disabled = true;\r\n\t\tsprite.events.disableType(\"appeared\");\r\n\r\n\t\tif (registry.queue.length == 0) {\r\n\t\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\t\tqueueHandler(sprite);\r\n\t\t\t})\r\n\t\t\tsystem.requestFrame();\r\n\t\t}\r\n\r\n\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\tremoveFromQueue(sprite);\r\n\t\t}))\r\n\r\n\t\tregistry.queue.push(sprite);\r\n\t}\r\n}\r\n\r\nexport function removeFromQueue(sprite: Sprite) {\r\n\tlet index = registry.queue.indexOf(sprite);\r\n\tif (index >= 0) {\r\n\t\tregistry.queue.splice(registry.queue.indexOf(sprite), 1);\r\n\t\tlet nextSprite = registry.queue[index];\r\n\t\tif (nextSprite) {\r\n\t\t\tqueueHandler(nextSprite);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks whether the chart was not initialized fully due to setting\r\n * of `onlyShowOnViewport`. If it hasn't and is now in the viewport\r\n * the chart will be initialized.\r\n *\r\n * @since 4.9.12\r\n * @param  sprite  Top-level chart object\r\n */\r\nexport function viewPortHandler(sprite: Sprite) {\r\n\tif (sprite.__disabled && $dom.isElementInViewport(sprite.htmlContainer, options.viewportTarget)) {\r\n\r\n\t\tif (sprite.vpDisposer) {\r\n\t\t\tsprite.vpDisposer.dispose();\r\n\t\t}\r\n\r\n\t\taddToQueue(sprite);\r\n\t}\r\n}\r\n\r\nexport function queueHandler(sprite: Sprite) {\r\n\tif (sprite && sprite.tooltipContainer) {\r\n\t\tsprite.__disabled = false;\r\n\t\tsprite.tooltipContainer.__disabled = false;\r\n\t\tsprite.events.enableType(\"appeared\");\r\n\t\tsprite.dispatch(\"removedfromqueue\");\r\n\r\n\t\tif (sprite.showOnInit) {\r\n\t\t\tsprite.events.on(\"appeared\", () => {\r\n\t\t\t\tremoveFromQueue(sprite);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (sprite.vpDisposer) {\r\n\t\t\tsprite.vpDisposer.dispose();\r\n\t\t}\r\n\t\tif (sprite instanceof Container) {\r\n\t\t\tsprite.invalidateLabels();\r\n\t\t}\r\n\r\n\t\tif (sprite.tooltipContainer) {\r\n\t\t\tsprite.tooltipContainer.invalidateLayout();\r\n\t\t}\r\n\t\tif (sprite instanceof Component) {\r\n\t\t\tsprite.invalidateData();\r\n\t\t\tsprite.reinit();\r\n\r\n\t\t\tsprite.events.once(\"datavalidated\", () => {\r\n\t\t\t\tif (sprite.showOnInit) {\r\n\t\t\t\t\tsprite.appear();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tremoveFromQueue(sprite);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsprite.reinit();\r\n\t\t\tsprite.events.once(\"inited\", () => {\r\n\t\t\t\tremoveFromQueue(sprite);\r\n\t\t\t})\r\n\t\t\tif (sprite.showOnInit) {\r\n\t\t\t\tsprite.appear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * A shortcut to creating a chart instance.\r\n *\r\n * The first argument is either a reference to or an id of a DOM element to be\r\n * used as a container for the chart.\r\n *\r\n * The second argument is the type reference of the chart type. (for plain\r\n * JavaScript users this can also be a string indicating chart type)\r\n *\r\n * ```TypeScript\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n * ```\r\n * ```JavaScript\r\n * // Can pass in chart type reference like this:\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // ... or chart class type as a string:\r\n * var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @param htmlElement  Reference or id of the target container element\r\n * @param classType    Class type of the target chart type\r\n * @return Chart instance\r\n */\r\nexport function create<T extends Sprite>(htmlElement: $type.Optional<HTMLElement | string>, classType: { new(): T; }): T {\r\n\r\n\t// This is a nasty hack for the benefit of vanilla JS users, who do not\r\n\t// enjoy benefits of type-check anyway.\r\n\t// We're allowing passing in a name of the class rather than type reference\r\n\t// itself.\r\n\tlet classError: $type.Optional<Error>;\r\n\tif ($type.isString(classType)) {\r\n\t\tif ($type.hasValue(registry.registeredClasses[classType])) {\r\n\t\t\tclassType = registry.registeredClasses[classType];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tclassType = registry.registeredClasses[\"Container\"];\r\n\t\t\tclassError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Create the chart\r\n\tlet chart = createChild(htmlElement, classType);\r\n\r\n\t// Error?\r\n\tif (classError) {\r\n\t\tchart.raiseCriticalError(classError);\r\n\t}\r\n\r\n\treturn chart;\r\n\r\n}\r\n\r\n/**\r\n * A shortcut to creating a chart from a config object.\r\n *\r\n * Example:\r\n *\r\n * ```TypeScript\r\n * let chart am4core.createFromConfig({ ... }, \"chartdiv\", am4charts.XYChart );\r\n * ```\r\n * ```JavaScript\r\n * var chart am4core.createFromConfig({ ... }, \"chartdiv\", \"XYChart\" );\r\n * ```\r\n *\r\n * If `chartType` parameter is not supplied it must be set in a config object,\r\n * via reference to chart type, e.g.:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": am4charts.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": am4charts.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * Or via string: (if you are using JavaScript)\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * A `container` can either be a reference to an HTML container to put chart\r\n * in, or it's unique id.\r\n *\r\n * If `container` is not specified, it must be included in the config object:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @param config       Config object in property/value pairs\r\n * @param htmlElement  Container reference or ID\r\n * @param objectType   Chart type\r\n * @return A newly created chart instance\r\n * @todo Throw exception if type is not correct\r\n */\r\nexport function createFromConfig(config: { [index: string]: any }, htmlElement?: string | HTMLElement, classType?: { new(): Sprite; } | string): Sprite {\r\n\r\n\t// Extract chart type from config if necessary\r\n\tif (!$type.hasValue(classType)) {\r\n\t\tclassType = config.type;\r\n\t\tdelete config.type;\r\n\t}\r\n\r\n\t// Extract element from config if necessary\r\n\tif (!$type.hasValue(htmlElement)) {\r\n\t\thtmlElement = config.container;\r\n\t\tdelete config.container;\r\n\t}\r\n\r\n\t// Check if we need to extract actual type reference\r\n\tlet finalType;\r\n\tlet classError: $type.Optional<Error>;\r\n\tif ($type.isString(classType) && $type.hasValue(registry.registeredClasses[classType])) {\r\n\t\tfinalType = registry.registeredClasses[classType];\r\n\t}\r\n\telse if (typeof classType !== \"function\") {\r\n\t\tfinalType = Container;\r\n\t\tclassError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n\t}\r\n\telse {\r\n\t\tfinalType = classType;\r\n\t}\r\n\r\n\t// Create the chart\r\n\tlet chart = createChild(htmlElement, finalType);\r\n\r\n\t// Set config\r\n\tif (classError) {\r\n\t\tchart.raiseCriticalError(classError);\r\n\t}\r\n\telse {\r\n\t\tchart.config = config;\r\n\t}\r\n\r\n\treturn chart;\r\n\r\n}\r\n\r\n/**\r\n * Useful in creating real queues form mult-chart creation.\r\n *\r\n * Accepts a reference to a function which crates and returns actual chart\r\n * object.\r\n *\r\n * It returns a `Promise` which you can use to catch chart instance once it's\r\n * created.\r\n *\r\n * ```TypeScript\r\n * am4core.createDeferred(function(div) {\r\n *   // Create first chart\r\n *   let chart = am4core.create(div, am4charts.XYChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv1\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n *\r\n * am4core.createDeferred(function(div) {\r\n *   // Create second chart\r\n *   let chart = am4core.create(div, am4charts.PieChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv2\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * am4core.createDeferred(function(div) {\r\n *   // Create first chart\r\n *   var chart = am4core.create(div, am4charts.XYChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv1\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n *\r\n * am4core.createDeferred(function(div) {\r\n *   // Create second chart\r\n *   var chart = am4core.create(div, am4charts.PieChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv2\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Deferred_daisy_chained_instantiation} for more information\r\n * @since 4.10.0\r\n * @param  callback  Callback function that creates chart\r\n * @param  scope     Scope to call callback in\r\n * @param  ...rest   Parameters to pass into callback\r\n * @return           Promise with chart instance\r\n */\r\nexport function createDeferred(callback: (...args: Array<any>) => Sprite, scope?: any, ...rest: Array<any>): Promise<Sprite> {\r\n\treturn new Promise<Sprite>((resolve, reject) => {\r\n\t\tregistry.deferred.push({\r\n\t\t\tscope: scope,\r\n\t\t\tcallback: callback,\r\n\t\t\targs: rest,\r\n\t\t\tresolve: resolve\r\n\t\t});\r\n\t\tif (registry.deferred.length == 1) {\r\n\t\t\tprocessNextDeferred();\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction processNextDeferred(): void {\r\n\tlet next = registry.deferred[0];\r\n\tif (next) {\r\n\t\tlet sprite = next.callback.call(next.scope, ...next.args);\r\n\t\tsprite.events.on(\"ready\", () => {\r\n\t\t\tnext.resolve(sprite);\r\n\t\t\tregistry.deferred.shift();\r\n\t\t\tif (options.deferredDelay) {\r\n\t\t\t\tsetTimeout(processNextDeferred, options.deferredDelay);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tprocessNextDeferred();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Applies a theme to System, and subsequently all chart instances created\r\n * from that point forward.\r\n *\r\n * amCharts supports multiple themes. Calling `useTheme` multiple times will\r\n * make the System apply multiple themes, rather than overwrite previously\r\n * set one.\r\n *\r\n * This enables combining features from multiple themes on the same chart.\r\n * E.g.:\r\n *\r\n * ```TypeScript\r\n * am4core.useTheme(am4themes.material);\r\n * am4core.useTheme(am4themes.animated);\r\n * ```\r\n * ```JavaScript\r\n * am4core.useTheme(am4themes.material);\r\n * am4core.useTheme(am4themes.animated);\r\n * ```\r\n *\r\n * The above will apply both the Material color and animation options to all\r\n * charts created.\r\n *\r\n * @param value  A reference to a theme\r\n */\r\nexport function useTheme(value: ITheme): void {\r\n\tif (registry.themes.indexOf(value) === -1) {\r\n\t\tregistry.themes.push(value);\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes a theme from \"active themes\" list, so it won't get applied to any\r\n * charts created subsequently.\r\n *\r\n * @param value  A reference to a theme\r\n */\r\nexport function unuseTheme(value: ITheme): void {\r\n\t$array.remove(registry.themes, value);\r\n}\r\n\r\n/**\r\n * Removes all \"active\" themes. Any charts created subsequently will not have\r\n * any theme applied to them.\r\n */\r\nexport function unuseAllThemes(): void {\r\n\tregistry.themes = [];\r\n}\r\n\r\n/**\r\n * Adds a license, e.g.:\r\n *\r\n * ```TypeScript\r\n * am4core.addLicense(\"xxxxxxxx\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.addLicense(\"xxxxxxxx\");\r\n * ```\r\n *\r\n * Multiple licenses can be added to cover for multiple products.\r\n *\r\n * @since 4.5.16\r\n * @param  license  License key\r\n */\r\nexport function addLicense(license: string): void {\r\n\toptions.licenses.push(license);\r\n}\r\n"],
  "mappings": "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",
  "names": ["Image", "Polyarc", "Morpher", "percent", "Polygon", "Preloader", "CloseButton", "SwitchButton", "Slider", "PlayButton", "RadialGradientModifier", "LinePattern", "CirclePattern", "RectPattern", "ColorizeFilter", "color", "BlurFilter", "FocusFilter", "PatternSet", "Plugin", "AmChartsLogo"]
}
