{
  "version": 3,
  "sources": ["../../src/.internal/charts/percent/PercentDefaultTheme.ts", "../../src/.internal/charts/percent/PercentChart.ts", "../../src/.internal/charts/percent/PercentSeries.ts", "../../src/.internal/charts/pie/PieChart.ts", "../../src/.internal/charts/pie/PieSeries.ts", "../../src/.internal/charts/funnel/FunnelSlice.ts", "../../src/.internal/charts/funnel/FunnelSeries.ts", "../../src/.internal/charts/funnel/PyramidSeries.ts", "../../src/.internal/charts/funnel/PictorialStackedSeries.ts", "../../src/.internal/charts/funnel/SlicedChart.ts"],
  "sourcesContent": ["import { Theme } from \"../../core/Theme\";\r\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\r\nimport { ColorSet } from \"../../core/util/ColorSet\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class PercentDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/percent\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PercentSeries\").setAll({\r\n\t\t\tlegendLabelText: \"{category}\",\r\n\t\t\tlegendValueText: \"{valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcolors: ColorSet.new(this._root, {}),\r\n\t\t\twidth: p100,\r\n\t\t\theight: p100\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/pie\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PieChart\").setAll({\r\n\t\t\tradius: percent(80),\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t})\r\n\r\n\t\tr(\"PieSeries\").setAll({\r\n\t\t\talignLabels: true,\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t});\r\n\r\n\t\tr(\"PieSeries\").states.create(\"hidden\", { endAngle: -90, opacity: 0 });\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).setAll({\r\n\t\t\tposition: \"absolute\",\r\n\t\t\tisMeasured: false,\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\ttoggleKey: \"active\",\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tstrokeWidth: 1,\r\n\t\t\tstrokeOpacity: 1,\r\n\t\t\trole: \"figure\",\r\n\t\t\tlineJoin:\"round\"\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"active\", { shiftRadius: 20, scale: 1 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hoverActive\", { scale: 1.04 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hover\", { scale: 1.04 });\r\n\r\n\t\tr(\"RadialLabel\", [\"pie\"]).setAll({\r\n\t\t\ttextType: \"aligned\",\r\n\t\t\tradius: 10,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tpaddingTop: 5,\r\n\t\t\tpaddingBottom: 5,\r\n\t\t\tpopulateText: true\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pie\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/funnel\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"SlicedChart\").setAll({\r\n\t\t\tpaddingLeft: 10,\r\n\t\t\tpaddingRight: 10,\r\n\t\t\tpaddingTop: 10,\r\n\t\t\tpaddingBottom: 10\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Funnel\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"FunnelSeries\").setAll({\r\n\t\t\tstartLocation: 0,\r\n\t\t\tendLocation: 1,\r\n\t\t\torientation: \"vertical\",\r\n\t\t\talignLabels: true,\r\n\t\t\tsequencedInterpolation: true\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0,\r\n\t\t\t//tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").states.create(\"hover\", { expandDistance: 0.15 })\r\n\r\n\t\tr(\"Label\", [\"funnel\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"funnel\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\t// Class: Label\r\n\t\tr(\"Label\", [\"funnel\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"funnel\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\tstrokeOpacity: 0,\r\n\t\t\texpandDistance: -0.1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 10,\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 10\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pyramid\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"PyramidSeries\").setAll({\r\n\t\t\tvalueIs: \"area\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).states.create(\"hover\", { expandDistance: 0.15 });\r\n\r\n\t\tr(\"Label\", [\"pyramid\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pyramid\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pictorial\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\t// Class: FunnelSlice\r\n\t\tr(\"FunnelSlice\", [\"pictorial\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pictorial\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\twidth: 0,\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pictorial\"]).setAll({\r\n\t\t\tlocation: 0.5\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"pictorial\", \"background\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 0.2\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t}\r\n}\r\n", "import type { PercentSeries } from \"./PercentSeries\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings } from \"../../core/render/SerialChart\";\nimport { PercentDefaultTheme } from \"./PercentDefaultTheme\";\n\nexport interface IPercentChartSettings extends ISerialChartSettings {\n}\n\nexport interface IPercentChartPrivate extends ISerialChartPrivate {\n}\n\n/**\n * Base class for [[PieChart]].\n *\n * Also used for percent-based series, like [[FunnelSeries]], [[PyramidSeries]], etc.\n *\n * @important\n */\nexport abstract class PercentChart extends SerialChart {\n\tpublic static className: string = \"PercentChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([PercentChart.className]);\n\n\tdeclare public _settings: IPercentChartSettings;\n\tdeclare public _privateSettings: IPercentChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(PercentDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\t\tthis.seriesContainer.children.push(this.bulletsContainer);\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tsuper._processSeries(series);\n\t\tthis.seriesContainer.children.moveValue(this.bulletsContainer, this.seriesContainer.children.length - 1);\t\n\t}\t\n}\n", "import type { DataItem } from \"../../core/render/Component\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { Label } from \"../../core/render/Label\";\nimport type { Tick } from \"../../core/render/Tick\";\nimport type { ListTemplate } from \"../../core/util/List\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\nimport type { ILegendDataItem } from \"../../core/render/Legend\";\nimport type { Color } from \"../../core/util/Color\";\nimport type { PercentChart } from \"./PercentChart\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate } from \"../../core/render/Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { visualSettings } from \"../../core/render/Graphics\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPercentSeriesDataItem extends ISeriesDataItem {\n\n\t/**\n\t * Percent of the series value total.\n\t */\n\tvaluePercentTotal: number;\n\n\t/**\n\t * Category.\n\t */\n\tcategory: string;\n\n\t/**\n\t * Slice visual element.\n\t */\n\tslice: Graphics;\n\n\t/**\n\t * Slice label.\n\t */\n\tlabel: Label;\n\n\t/**\n\t * Slice tick.\n\t */\n\ttick: Tick;\n\n\t/**\n\t * A related legend data item.\n\t */\n\tlegendDataItem: DataItem<ILegendDataItem>;\n\n\t/**\n\t * Fill color used for the slice and related elements, e.g. legend marker.\n\t */\n\tfill: Color;\n\n}\n\n//type IPercentSeriesDataItemSettings = { [K in keyof IPercentSeriesDataItem]?: string; };\n\nexport interface IPercentSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for slices.\n\t */\n\tcolors?: ColorSet;\n\n\t/**\n\t * A field in data that holds category names.\n\t */\n\tcategoryField?: string;\n\n\t/**\n\t * Should slice labels be aligned in columns/rows?\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * A field that holds color for slice fill.\n\t */\n\tfillField?: string;\n\n}\n\nexport interface IPercentSeriesPrivate extends ISeriesPrivate {\n\n\t/**\n\t * Calculate average value in series.\n\t */\n\tvalueAverage?: number;\n\n\t/**\n\t * Count of items in series.\n\t */\n\tvalueCount?: number;\n\n\t/**\n\t * Sum of values in series.\n\t */\n\tvalueSum?: number;\n\n\t/**\n\t * Sum of all absolute values in series.\n\t */\n\tvalueAbsoluteSum?: number;\n\n\t/**\n\t * Lowest value in series.\n\t */\n\tvalueLow?: number;\n\n\t/**\n\t * Highest value in series.\n\t */\n\tvalueHigh?: number;\n\n}\n\n/**\n * A base class for any percent chart series.\n */\nexport abstract class PercentSeries extends Series {\n\tpublic static className: string = \"PercentSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([PercentSeries.className]);\n\n\tdeclare public _settings: IPercentSeriesSettings;\n\tdeclare public _privateSettings: IPercentSeriesPrivate;\n\tdeclare public _dataItemSettings: IPercentSeriesDataItem;\n\n\tdeclare public _sliceType: Graphics;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tpublic readonly slicesContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly labelsContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly ticksContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\n\tprotected _lLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _rLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _hLabels: Array<{ label: Label, y: number }> = [];\n\n\t/**\n\t * A [[ListTemplate]] of all slices in series.\n\t *\n\t * `slices.template` can also be used to configure slices.\n\t */\n\tpublic readonly slices: ListTemplate<this[\"_sliceType\"]> = this._makeSlices();\n\n\tprotected abstract _makeSlices(): ListTemplate<this[\"_sliceType\"]>;\n\n\tpublic abstract chart: PercentChart | undefined;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst slice = this.slicesContainer.children.push(this.slices.make());\n\n\t\tslice.on(\"fill\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice.on(\"stroke\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice._setDataItem(dataItem);\n\t\tdataItem.set(\"slice\", slice);\n\t\tthis.slices.push(slice);\n\n\t\treturn slice;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice labels in series.\n\t *\n\t * `labels.template` can also be used to configure slice labels.\n\t */\n\tpublic readonly labels: ListTemplate<this[\"_labelType\"]> = this._makeLabels();\n\n\tprotected abstract _makeLabels(): ListTemplate<this[\"_labelType\"]>;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_labelType\"] {\n\t\tconst label = this.labelsContainer.children.push(this.labels.make());\n\t\tlabel._setDataItem(dataItem);\n\t\tdataItem.set(\"label\", label);\n\t\tthis.labels.push(label);\n\t\treturn label;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice ticks in series.\n\t *\n\t * `ticks.template` can also be used to configure slice ticks.\n\t */\n\tpublic readonly ticks: ListTemplate<this[\"_tickType\"]> = this._makeTicks();\n\n\tprotected abstract _makeTicks(): ListTemplate<this[\"_tickType\"]>;\n\n\n\tprotected _shouldMakeBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tif (dataItem.get(\"value\") != null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeTick(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_tickType\"] {\n\t\tconst tick = this.ticksContainer.children.push(this.ticks.make());\n\t\ttick._setDataItem(dataItem);\n\t\tdataItem.set(\"tick\", tick);\n\t\tthis.ticks.push(tick);\n\t\treturn tick;\n\t}\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"category\", \"fill\");\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _onDataClear() {\n\t\tconst colors = this.get(\"colors\");\n\t\tif (colors) {\n\t\t\tcolors.reset();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis._lLabels = [];\n\t\tthis._rLabels = [];\n\t\tthis._hLabels = [];\n\n\t\tif (this._valuesDirty) {\n\t\t\tlet sum = 0;\n\t\t\tlet absSum = 0;\n\t\t\tlet valueHigh = 0;\n\t\t\tlet valueLow = Infinity;\n\t\t\tlet count = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet valueWorking = dataItem.get(\"valueWorking\", 0);\n\t\t\t\tsum += valueWorking;\n\t\t\t\tabsSum += Math.abs(valueWorking);\n\t\t\t});\n\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet value = dataItem.get(\"valueWorking\", 0);\n\n\t\t\t\tif (value > valueHigh) {\n\t\t\t\t\tvalueHigh = value;\n\t\t\t\t}\n\n\t\t\t\tif (value < valueLow) {\n\t\t\t\t\tvalueLow = value;\n\t\t\t\t}\n\n\t\t\t\tcount++;\n\n\t\t\t\tlet percentTotal = value / absSum;\n\n\t\t\t\tif (absSum == 0) {\n\t\t\t\t\tpercentTotal = 0;\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"valuePercentTotal\", percentTotal * 100);\n\t\t\t});\n\n\t\t\tthis.setPrivateRaw(\"valueLow\", valueLow);\n\t\t\tthis.setPrivateRaw(\"valueHigh\", valueHigh);\n\t\t\tthis.setPrivateRaw(\"valueSum\", sum);\n\t\t\tthis.setPrivateRaw(\"valueAverage\", sum / count);\n\t\t\tthis.setPrivateRaw(\"valueAbsoluteSum\", absSum);\n\t\t}\n\t}\n\n\t/**\n\t * Shows hidden series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async show(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.show(duration))\n\n\t\tpromises.push(this._sequencedShowHide(true, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hide whole series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async hide(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.hide(duration))\n\n\t\tpromises.push(this._sequencedShowHide(false, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\t\tif (this._valuesDirty) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tdataItem.get(\"label\").text.markDirtyText();\n\t\t\t});\n\t\t}\n\n\t\tif (this.isDirty(\"legendLabelText\") || this.isDirty(\"legendValueText\")) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\t\t\t});\n\t\t}\n\n\t\tthis._arrange();\n\t}\n\n\tprotected _arrange() {\n\t\tthis._arrangeDown(this._lLabels);\n\t\tthis._arrangeUp(this._lLabels);\n\n\t\tthis._arrangeDown(this._rLabels);\n\t\tthis._arrangeUp(this._rLabels);\n\n\t\tthis._arrangeLeft(this._hLabels);\n\t\tthis._arrangeRight(this._hLabels);\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t}\n\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\t\tthis._arrange();\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tif (dataItem.get(\"fill\") == null) {\n\t\t\tlet colors = this.get(\"colors\");\n\t\t\tif (colors) {\n\t\t\t\tdataItem.setRaw(\"fill\", colors.next());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", 0);\n\t\t}\n\n\t\tconst easing = this.get(\"stateAnimationEasing\");\n\n\t\tlet value = dataItem.get(\"value\");\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: value, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.show(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.show(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tpromises.push(slice.show(duration));\n\t\t}\n\n\t\tif(slice.get(\"active\")){\n\t\t\tslice.states.applyAnimate(\"active\");\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst hiddenState = this.states.create(\"hidden\", {})\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tconst easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: 0, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.hide(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.hide(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tslice.hideTooltip();\n\n\t\tif (slice) {\n\t\t\tpromises.push(slice.hide(duration));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tthis.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tlet tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tthis.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tlet slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tthis.slices.removeValue(slice);\n\t\t\tslice.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic hoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice && !slice.isHidden()) {\n\t\t\tslice.hover();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers un-hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic unhoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tslice.unhover();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif(dataItem){\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst legendDataItem = dataItem.get(\"legendDataItem\");\n\t\t\t\tif (legendDataItem) {\n\t\t\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\t\t\t\t\t$array.each(visualSettings, (setting: any) => {\n\t\t\t\t\t\tif (slice.get(setting) != null) {\n\t\t\t\t\t\t\tmarkerRectangle.set(setting, slice.get(setting));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _arrangeDown(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = this._getNextDown();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelTop = bounds.top;\n\t\t\t\tif (l.y + labelTop < next) {\n\t\t\t\t\tl.y = next - labelTop;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\n\t\t\t\tnext = l.y + bounds.bottom;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getNextUp() {\n\t\treturn this.labelsContainer.maxHeight();\n\t}\n\n\tprotected _getNextDown() {\n\t\treturn 0;\n\t}\n\n\tprotected _arrangeUp(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this._getNextUp();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelBottom = bounds.bottom;\n\t\t\t\tif (l.y + labelBottom > next) {\n\t\t\t\t\tl.y = next - labelBottom;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\t\t\t\tnext = l.y + bounds.top;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeRight(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = 0;\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelLeft = bounds.left;\n\t\t\t\tif (l.y + labelLeft < next) {\n\t\t\t\t\tl.y = next - labelLeft;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\n\t\t\t\tnext = l.y + bounds.right;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeLeft(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this.labelsContainer.maxWidth();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelRight = bounds.right;\n\t\t\t\tif (l.y + labelRight > next) {\n\t\t\t\t\tl.y = next - labelRight;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\t\t\t\tnext = l.y + bounds.left;\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirty();\n\t}\n\n\tprotected _updateTick(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.series.removeValue(this);\n\t\t}\n\t}\n\n\n}\n", "import type { PieSeries } from \"./PieSeries\";\n\nimport { Percent } from \"../../core/util/Percent\";\nimport { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport { p50 } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IPieChartSettings extends IPercentChartSettings {\n\n\t/**\n\t * Outer radius of the pie chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the pie chart. Setting to any non-zero value will result\n\t * in a donut chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * A start angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * An end angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieChartPrivate extends IPercentChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Creates a pie chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieChart extends PercentChart {\n\n\tpublic static className: string = \"PieChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([PieChart.className]);\n\n\tdeclare public _settings: IPieChartSettings;\n\tdeclare public _privateSettings: IPieChartPrivate;\n\tdeclare public _seriesType: PieSeries;\n\n\tpublic _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.seriesContainer.setAll({ x: p50, y: p50 });\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst chartContainer = this.chartContainer;\n\t\tconst w = chartContainer.innerWidth();\n\t\tconst h = chartContainer.innerHeight();\n\n\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\n\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\tconst wr = w / (bounds.right - bounds.left);\n\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\tif (innerRadius instanceof Percent) {\n\t\t\tlet value = innerRadius.value;\n\t\t\tlet mr = Math.min(wr, hr);\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t}\n\n\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\tconst prevRadius = this._maxRadius;\n\t\tthis._maxRadius = Math.min(wr, hr);\n\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tthis.seriesContainer.setAll({\n\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t})\n\n\t\tif (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"startAngle\");\n\t\t\t})\n\t\t}\n\n\t\tif(this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")){\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"innerRadius\");\n\t\t\t})\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Returns outer radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return outer radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic radius(series?: PieSeries): number {\n\n\t\tlet radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesRadius = series.get(\"radius\");\n\t\t\tif (seriesRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * (index + 1);\n\t\t\t}\n\t\t}\n\t\treturn radius;\n\t}\n\n\t/**\n\t * Returns inner radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return inner radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic innerRadius(series?: PieSeries): number {\n\t\tconst radius = this.radius();\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesInnerRadius = series.get(\"innerRadius\");\n\t\t\tif (seriesInnerRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * index;\n\t\t\t}\n\t\t}\n\t\treturn innerRadius;\n\t}\n}\n", "import type { DataItem } from \"../../core/render/Component\";\nimport type { PieChart } from \"./PieChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { p100, Percent } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IPieSeriesDataItem extends IPercentSeriesDataItem {\n\tslice: Slice;\n\tlabel: RadialLabel;\n}\n\nexport interface IPieSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t */\n\tradius?: Percent | number;\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t */\n\tinnerRadius?: Percent | number;\n\n\t/**\n\t * Start angle of the series in degrees.\n\t *\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * End angle of the series in degrees.\n\t *\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieSeriesPrivate extends IPercentSeriesPrivate {\n\n\t/**\n\t * Actual radius of the series in pixels.\n\t */\n\tradius?: number;\n\n}\n\n/**\n * Creates a series for a [[PieChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieSeries extends PercentSeries {\n\n\tdeclare public chart: PieChart | undefined;\n\n\tpublic static className: string = \"PieSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([PieSeries.className]);\n\n\tdeclare public _settings: IPieSeriesSettings;\n\tdeclare public _privateSettings: IPieSeriesPrivate;\n\tdeclare public _dataItemSettings: IPieSeriesDataItem;\n\n\tdeclare public _sliceType: Slice;\n\tdeclare public _labelType: RadialLabel;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Slice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.slices.template]),\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => RadialLabel._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.labels.template]),\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.ticks.template]),\n\t\t);\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice.on(\"scale\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.on(\"shiftRadius\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\t}\n\n\tprotected _getNextUp() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart._maxRadius;\n\t\t}\n\t\treturn this.labelsContainer.maxHeight() / 2;\n\t}\n\n\tprotected _getNextDown() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn -chart._maxRadius;\n\t\t}\n\t\treturn -this.labelsContainer.maxHeight() / 2;\n\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\n\t\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\t\tlet labelsTemplate = this.labels.template;\n\n\t\t\t\tif (this.get(\"alignLabels\")) {\n\t\t\t\t\tlabelsTemplate.set(\"textType\", \"aligned\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet textType = labelsTemplate.get(\"textType\");\n\t\t\t\t\tif (textType == null || textType == \"aligned\") {\n\t\t\t\t\t\tlabelsTemplate.set(\"textType\", \"adjusted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (this._valuesDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || this.isDirty(\"alignLabels\")) {\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t\tconst startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\t\tconst endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\t\t\t\tconst arc = endAngle - startAngle;\n\t\t\t\tlet currentAngle = startAngle;\n\n\t\t\t\tconst radius = chart.radius(this);\n\t\t\t\tthis.setPrivateRaw(\"radius\", radius);\n\t\t\t\tlet innerRadius = chart.innerRadius(this) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\t\tif (innerRadius < 0) {\n\t\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t\t}\n\n\t\t\t\t//if (radius > 0) {\n\t\t\t\t$array.each(this._dataItems, (dataItem) => {\n\n\t\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\t\tlet currentArc = arc * dataItem.get(\"valuePercentTotal\") / 100;\n\t\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\t\tif (slice) {\n\t\t\t\t\t\tslice.set(\"radius\", radius);\n\t\t\t\t\t\tslice.set(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tslice.set(\"startAngle\", currentAngle);\n\n\t\t\t\t\t\tslice.set(\"arc\", currentArc);\n\n\t\t\t\t\t\tconst color = dataItem.get(\"fill\");\n\t\t\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet middleAngle = $math.normalizeAngle(currentAngle + currentArc / 2);\n\n\t\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\t\t\t\tlabel.setPrivate(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tlabel.set(\"labelAngle\", middleAngle);\n\n\t\t\t\t\t\tif (label.get(\"textType\") == \"aligned\") {\n\t\t\t\t\t\t\tlet labelRadius = radius + label.get(\"radius\", 0);\n\t\t\t\t\t\t\tlet y = radius * $math.sin(middleAngle);\n\n\t\t\t\t\t\t\tif (middleAngle > 90 && middleAngle <= 270) {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._lLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius *= -1;\n\t\t\t\t\t\t\t\tlabelRadius -= this.labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", p100);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._rLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius += this.labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", 0);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel.set(\"x\", labelRadius);\n\t\t\t\t\t\t\tlabel.set(\"y\", radius * $math.sin(middleAngle));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurrentAngle += currentArc;\n\t\t\t\t\tthis._updateTick(dataItem);\n\t\t\t\t})\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst location = tick.get(\"location\", 1);\n\t\tif (tick && label && slice) {\n\t\t\tconst radius = (slice.get(\"shiftRadius\", 0) + slice.get(\"radius\", 0)) * slice.get(\"scale\", 1) * location;\n\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\tconst cos = $math.cos(labelAngle);\n\t\t\tconst sin = $math.sin(labelAngle);\n\n\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\n\t\t\tx = label.x();\n\t\t\ty = label.y();\n\t\t\tlet points:Array<IPoint> = [];\n\n\t\t\tif(x != 0 && y != 0){\n\t\t\t\tif (label.get(\"textType\") == \"circular\") {\n\t\t\t\t\tconst labelRadius = label.radius() - label.get(\"paddingBottom\", 0);\n\t\t\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\t\t\tx = labelRadius * $math.cos(labelAngle);\n\t\t\t\t\ty = labelRadius * $math.sin(labelAngle);\n\t\t\t\t}\n\n\t\t\t\tlet dx = -pr;\n\t\t\t\tif (label.getPrivate(\"left\")) {\n\t\t\t\t\tdx = pl;\n\t\t\t\t}\n\t\t\t\tpoints = [{ x: slice.x() + radius * cos, y: slice.y() + radius * sin }, { x: x + dx, y: y }, { x: x, y: y }];\t\t\t\t\n\t\t\t}\n\n\t\t\ttick.set(\"points\", points);\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst innerRadius = slice.get(\"innerRadius\", 0);\n\t\t\t\tconst radius = slice.get(\"radius\", 0);\n\t\t\t\tconst startAngle = slice.get(\"startAngle\", 0);\n\t\t\t\tconst arc = slice.get(\"arc\", 0);\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tconst angle = startAngle + arc * locationX;\n\t\t\t\tconst r = innerRadius + (radius - innerRadius) * locationY;\n\n\t\t\t\tsprite.setAll({ x: $math.cos(angle) * r, y: $math.sin(angle) * r });\n\t\t\t}\n\t\t}\n\t}\n}\n", "import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nexport interface IFunnelSliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Top width in pixels.\n\t */\n\ttopWidth?: number;\n\n\t/**\n\t * Bottom width in pixels.\n\t */\n\tbottomWidth?: number;\n\n\t/**\n\t * Orientation.\n\t */\n\torientation?: \"vertical\" | \"horizontal\";\n\n\t/**\n\t * A distance in pixels the slice should \"puff up\".\n\t *\n\t * Any non-zero value will make sides of the slide curved.\n\t */\n\texpandDistance?: number;\n\n}\n\nexport interface IFunnelSlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice for [[FunnelSeries]].\n */\nexport class FunnelSlice extends Graphics {\n\tdeclare public _settings: IFunnelSliceSettings;\n\tdeclare public _privateSettings: IFunnelSlicePrivate;\n\n\tpublic static className: string = \"FunnelSlice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([FunnelSlice.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\tprotected _tlx: number = 0;\n\tprotected _tly: number = 0;\n\n\tprotected _trx: number = 0;\n\tprotected _try: number = 0;\n\n\tprotected _blx: number = 0;\n\tprotected _bly: number = 0;\n\n\tprotected _brx: number = 0;\n\tprotected _bry: number = 0;\n\n\tprotected _cprx: number = 0;\n\tprotected _cplx: number = 0;\n\tprotected _cpry: number = 0;\n\tprotected _cply: number = 0;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(this._tlx, this._tly);\n\t\t\tdisplay.lineTo(this._trx, this._try);\n\t\t\tdisplay.quadraticCurveTo(this._cprx, this._cpry, this._brx, this._bry);\n\t\t\tdisplay.lineTo(this._blx, this._bly);\n\t\t\tdisplay.quadraticCurveTo(this._cplx, this._cply, this._tlx, this._tly);\n\t\t})\n\t}\n\n\tpublic getPoint(locationX: number, locationY: number): IPoint {\n\t\tlet w = this.width();\n\t\tlet h = this.height();\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", 0);\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationY;\n\t\t\tlet mrx = trx + (brx - trx) * locationY;\n\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: h * locationY };\n\t\t}\n\t\telse {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationX;\n\t\t\tlet mrx = trx + (brx - trx) * locationX;\n\n\t\t\treturn { x: w * locationX, y: mlx + (mrx - mlx) * locationY};\n\t\t}\n\n\t}\n\n\tpublic _changed() {\n\n\t\tif (this.isDirty(\"topWidth\") || this.isDirty(\"bottomWidth\") || this.isDirty(\"expandDistance\") || this.isDirty(\"orientation\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n\t\t\tconst w = this.width();\n\t\t\tconst h = this.height();\n\t\t\tconst tw = this.get(\"topWidth\", 0);\n\t\t\tconst bw = this.get(\"bottomWidth\", 0);\n\t\t\tthis._clear = true;\n\n\t\t\tlet ed = this.get(\"expandDistance\", 0);\n\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\tthis._tlx = -tw / 2;\n\t\t\t\tthis._tly = 0;\n\n\t\t\t\tthis._trx = tw / 2;\n\t\t\t\tthis._try = 0;\n\n\t\t\t\tthis._brx = bw / 2;\n\t\t\t\tthis._bry = h;\n\n\t\t\t\tthis._blx = -bw / 2;\n\t\t\t\tthis._bly = h;\n\n\t\t\t\tthis._cprx = this._trx + (this._brx - this._trx) / 2 + ed * h,\n\t\t\t\tthis._cpry = this._try + 0.5 * h;\n\n\t\t\t\tthis._cplx = this._tlx + (this._blx - this._tlx) / 2 - ed * h;\n\t\t\t\tthis._cply = this._tly + 0.5 * h;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._tly = -tw / 2;\n\t\t\t\tthis._tlx = 0;\n\n\t\t\t\tthis._try = tw / 2;\n\t\t\t\tthis._trx = 0;\n\n\t\t\t\tthis._bry = bw / 2;\n\t\t\t\tthis._brx = w;\n\n\t\t\t\tthis._bly = -bw / 2;\n\t\t\t\tthis._blx = w;\n\n\t\t\t\tthis._cpry = this._try + (this._bry - this._try) / 2 + ed * w,\n\t\t\t\tthis._cprx = this._trx + 0.5 * w;\n\n\t\t\t\tthis._cply = this._tly + (this._bly - this._tly) / 2 - ed * w;\n\t\t\t\tthis._cplx = this._tlx + 0.5 * w;\n\t\t\t}\n\t\t}\n\t\tsuper._changed();\n\t}\n}\n", "import type { DataItem } from \"../../core/render/Component\";\nimport type { SlicedChart } from \"./SlicedChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { FunnelSlice } from \"./FunnelSlice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { Label } from \"../../core/render/Label\";\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IFunnelSeriesDataItem extends IPercentSeriesDataItem {\n\n\t/**\n\t * A related slice element.\n\t */\n\tslice: FunnelSlice;\n\n\t/**\n\t * A related slice link element\n\t */\n\tlink: FunnelSlice;\n\n\t/**\n\t * Data item's index.\n\t */\n\tindex: number;\n\n}\n\nexport interface IFunnelSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Width of the bottom edge of the slice relative to the top edge of the next\n\t * slice.\n\t *\n\t * `1` - means the full width of the slice, resulting in a rectangle.\n\t * `0` - means using width of the next slice, resulting in a trapezoid.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_bottom_width} for more info\n\t * @default 1\n\t */\n\tbottomRatio?: number;\n\n\t/**\n\t * Orientation of the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/#Series_orientation} for more info\n\t * @default \"vertical\"\n\t */\n\torientation: \"horizontal\" | \"vertical\";\n\n\t/**\n\t * If set to `true`, series will not create slices for data items with zero\n\t * value.\n\t */\n\tignoreZeroValues?: boolean;\n\n\t/**\n\t * Should labels be aligned into columns/rows?\n\t *\n\t * @default false\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tstartLocation?: number;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tendLocation?: number;\n\n}\n\nexport interface IFunnelSeriesPrivate extends IPercentSeriesPrivate {\n}\n\n/**\n * Creates a funnel series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/} for more info\n * @important\n */\nexport class FunnelSeries extends PercentSeries {\n\n\t/**\n\t * A chart series is attached to.\n\t */\n\tdeclare public chart: SlicedChart | undefined;\n\n\tprotected _tag = \"funnel\";\n\n\tdeclare public _sliceType: FunnelSlice;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [this._tag, \"series\", \"slice\", this.get(\"orientation\")])\n\t\t\t}, [this.slices.template])\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Label._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [this._tag, \"series\", \"label\", this.get(\"orientation\")])\n\t\t\t}, [this.labels.template])\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [this._tag, \"series\", \"tick\", this.get(\"orientation\")])\n\t\t\t}, [this.ticks.template])\n\t\t);\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice links in series.\n\t *\n\t * `links.template` can also be used to configure slice links.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_links} for more info\n\t */\n\tpublic readonly links: ListTemplate<this[\"_sliceType\"]> = this._makeLinks();\n\n\tprotected _makeLinks(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.links.template.get(\"themeTags\", []), [this._tag, \"series\", \"link\", this.get(\"orientation\")])\n\t\t\t}, [this.links.template]),\n\t\t);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLink(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst link = this.slicesContainer.children.push(this.links.make());\n\t\tlink._setDataItem(dataItem);\n\t\tdataItem.set(\"link\", link);\n\t\tthis.links.push(link);\n\t\treturn link;\n\t}\n\n\tpublic static className: string = \"FunnelSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([FunnelSeries.className]);\n\n\tdeclare public _settings: IFunnelSeriesSettings;\n\tdeclare public _privateSettings: IFunnelSeriesPrivate;\n\tdeclare public _dataItemSettings: IFunnelSeriesDataItem;\n\n\tprotected _total: number = 0;\n\tprotected _count: number = 0;\n\tprotected _nextCoord: number = 0;\n\n\tprotected _opposite: boolean = false;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tconst slicesContainer = this.slicesContainer;\n\t\tslicesContainer.setAll({ isMeasured: true, position: \"relative\", width: percent(100), height: percent(100) });\n\t\tslicesContainer.onPrivate(\"width\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tslicesContainer.onPrivate(\"height\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t}\n\t\telse {\n\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice._setDataItem(dataItem);\n\n\t\tdataItem.set(\"slice\", slice);\n\n\t\tthis.makeLink(dataItem);\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.on(\"x\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tlabel.on(\"y\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\n\t\tslice.events.on(\"boundschanged\", () => {\n\t\t\tconst dataItem = slice.dataItem;\n\t\t\tif (dataItem) {\n\t\t\t\tthis._updateTick(dataItem as any);\n\t\t\t}\n\t\t})\n\t}\n\n\n\tpublic _updateChildren() {\n\t\tthis._opposite = false;\n\t\tif (this.children.indexOf(this.labelsContainer) == 0) {\n\t\t\tthis._opposite = true;\n\t\t}\n\n\t\tlet total = 0;\n\t\tlet count = 0;\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tconst value = dataItem.get(\"value\");\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tcount++;\n\t\t\t\tif (value > 0) {\n\t\t\t\t\ttotal += Math.abs(dataItem.get(\"valueWorking\", value) / value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.get(\"ignoreZeroValues\", false)) {\n\t\t\t\t\t\tcount--;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (dataItem.isHidden()) {\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttotal += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis._total = 1 / count * total;\n\t\tthis._count = count;\n\n\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\tthis._fixLayout();\n\t\t}\n\n\t\tif (this._total > 0 && (this._valuesDirty || this._sizeDirty)) {\n\n\t\t\tconst slicesContainer = this.slicesContainer;\n\n\t\t\tlet h: number;\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\th = slicesContainer.innerHeight();\n\t\t\t}\n\t\t\telse {\n\t\t\t\th = slicesContainer.innerWidth();\n\t\t\t}\n\n\t\t\tthis._nextCoord = this.get(\"startLocation\", 0) * h;\n\n\t\t\tthis.markDirtyBounds();\n\n\t\t\tlet i = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\tdataItem.set(\"index\", i);\n\t\t\t\ti++;\n\n\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tconst link = dataItem.get(\"link\");\n\t\t\t\tconst color = dataItem.get(\"fill\");\n\n\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\tlink._setDefault(\"fill\", color);\n\t\t\t\tlink._setDefault(\"stroke\", color);\n\n\t\t\t\tconst value = dataItem.get(\"value\");\n\t\t\t\tif ($type.isNumber(value)) {\n\t\t\t\t\tif (value == 0 && this.get(\"ignoreZeroValues\")) {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", false);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", false);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", true);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", true);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", true);\n\n\t\t\t\t\t\tthis.decorateSlice(dataItem);\n\n\t\t\t\t\t\tif (this.isLast(dataItem)) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!dataItem.isHidden()) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tsuper._updateChildren();\n\t}\n\n\tprotected _fixLayout() {\n\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst labelsContainer = this.labelsContainer;\n\t\tconst labelsTemplate = this.labels.template;\n\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tlabelsContainer.set(\"position\", \"relative\");\n\t\t\tlabelsContainer.setAll({ isMeasured: true });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: p100, x: p100 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: 0, x: 0 });\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlabelsContainer.setAll({ isMeasured: false, position: \"absolute\" });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tlabelsContainer.setAll({ x: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, x: 0 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlabelsContainer.setAll({ y: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, y: 0 });\n\t\t\t}\n\t\t}\n\t\tthis.markDirtySize();\n\t}\n\n\tprotected getNextValue(dataItem: DataItem<this[\"_dataItemSettings\"]>): number {\n\t\tlet index = dataItem.get(\"index\");\n\t\tlet nextValue = dataItem.get(\"valueWorking\", 0);\n\t\tif (index < this.dataItems.length - 1) {\n\t\t\tlet nextItem = this.dataItems[index + 1];\n\t\t\tnextValue = nextItem.get(\"valueWorking\", 0);\n\n\t\t\tif (nextItem.isHidden() || (nextItem.get(\"value\") == 0 && this.get(\"ignoreZeroValues\"))) {\n\t\t\t\treturn this.getNextValue(nextItem);\n\t\t\t}\n\t\t}\n\t\treturn nextValue;\n\t}\n\n\tprotected isLast(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tlet index = dataItem.get(\"index\");\n\t\tif (index == this.dataItems.length - 1) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tfor (let i = index + 1; i < this.dataItems.length; i++) {\n\t\t\t\tif (!this.dataItems[i].isHidden()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tlet maxWidth = slicesContainer.innerWidth();\n\t\tlet maxHeight = slicesContainer.innerHeight();\n\n\t\tlet maxSize = maxWidth;\n\t\tif (orientation == \"horizontal\") {\n\t\t\tmaxSize = maxHeight;\n\t\t}\n\n\t\tconst nextValue = this.getNextValue(dataItem);\n\t\tconst value = dataItem.get(\"value\", 0);\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", value));\n\t\tconst bottomRatio = this.get(\"bottomRatio\", 0);\n\t\tconst valueHigh = this.getPrivate(\"valueHigh\", 0);\n\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tif (this._nextCoord == Infinity) {\n\t\t\tthis._nextCoord = 0;\n\t\t}\n\n\t\tlet topWidth = workingValue / valueHigh * maxSize;\n\t\tlet bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / valueHigh * maxSize;\n\n\t\tslice.setAll({ topWidth, bottomWidth, orientation });\n\t\tlink.setAll({ topWidth: bottomWidth, bottomWidth: (workingValue - (workingValue - nextValue)) / valueHigh * maxSize, orientation });\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tif (orientation == \"vertical\") {\n\n\t\t\tlet linkHeight = link.height() * d;\n\n\t\t\tmaxHeight = maxHeight * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"y\", this._nextCoord);\n\n\t\t\tlet height = Math.min(100000, Math.max(0, maxHeight / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ height, x: maxWidth / 2 });\n\t\t\tlet labelY = this._nextCoord + height / 2;\n\t\t\tlabel.set(\"y\", labelY);\n\n\t\t\tthis._nextCoord += height + linkHeight;\n\t\t\tlink.setAll({ y: this._nextCoord - linkHeight, x: maxWidth / 2 });\n\t\t}\n\t\telse {\n\t\t\tlet linkHeight = link.width() * d;\n\n\t\t\tmaxWidth = maxWidth * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"x\", this._nextCoord);\n\n\t\t\tlet width = Math.min(100000, Math.max(0, maxWidth / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ width, y: maxHeight / 2 });\n\t\t\tconst labelX = this._nextCoord + width / 2;\n\t\t\tlabel.set(\"x\", labelX);\n\n\t\t\tthis._nextCoord += width + linkHeight;\n\t\t\tlink.setAll({ x: this._nextCoord - linkHeight, y: maxHeight / 2 });\n\t\t}\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").hide(duration);\n\t\treturn super.hideDataItem(dataItem, duration)\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").show(duration);\n\t\treturn super.showDataItem(dataItem, duration)\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\tconst label = dataItem.get(\"label\");\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (tick && slice && label) {\n\n\t\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\t\tconst slicesContainer = this.slicesContainer;\n\t\t\t\tlet tickLocation = tick.get(\"location\", 0.5);\n\n\t\t\t\tconst lcw = labelsContainer.width();\n\t\t\t\tconst lch = labelsContainer.height();\n\n\t\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\tconst pt = labelsContainer.get(\"paddingTop\", 0);\n\t\t\t\tconst pb = labelsContainer.get(\"paddingBottom\", 0);\n\n\t\t\t\tlet p0 = { x: 0, y: 0 };\n\t\t\t\tlet p1 = { x: 0, y: 0 };\n\t\t\t\tlet p2 = { x: 0, y: 0 };\n\n\t\t\t\tif (this._opposite) {\n\t\t\t\t\ttickLocation = 1 - tickLocation;\n\t\t\t\t}\n\n\t\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\t\tp0 = slice.getPoint(tickLocation, 0.5);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.x = lcw;\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = lcw - pl;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.x = slicesContainer.x() + slicesContainer.width();\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = p1.x + lcw - label.width() - pr;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tp0 = slice.getPoint(0.5, tickLocation);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.y = lch;\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = lch - pt;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.y = slicesContainer.y() + slicesContainer.height();\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = p1.y + lch - label.height() - pb;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttick.set(\"points\", [p0, p1, p2]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet link = dataItem.get(\"link\");\n\t\tif (link) {\n\t\t\tthis.links.removeValue(link);\n\t\t\tlink.dispose();\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst width = slice.width();\n\t\t\t\tconst height = slice.height();\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tlet dx = 0;\n\t\t\t\tlet dy = 0;\n\t\t\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\t\t\tdy = height / 2\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdx = width / 2\n\t\t\t\t}\n\n\t\t\t\tsprite.setAll({ x: slice.x() + width * locationX - dx, y: slice.y() - dy + height * locationY });\n\t\t\t}\n\t\t}\n\t}\n}\n", "import type { DataItem } from \"../../core/render/Component\";\nimport { FunnelSeries, IFunnelSeriesSettings, IFunnelSeriesDataItem, IFunnelSeriesPrivate } from \"./FunnelSeries\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPyramidSeriesDataItem extends IFunnelSeriesDataItem {\n\n}\n\nexport interface IPyramidSeriesSettings extends IFunnelSeriesSettings {\n\n\t/**\n\t * The width of the tip of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\ttopWidth?: number | Percent;\n\n\t/**\n\t * The width of the base of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\tbottomWidth?: number | Percent;\n\n\t/**\n\t * Determines calculation mechanism for the slice area based on value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Slice_size} for more info\n\t * @default \"area\"\n\t */\n\tvalueIs?: \"area\" | \"height\";\n\n}\n\nexport interface IPyramidSeriesPrivate extends IFunnelSeriesPrivate {\n}\n\n/**\n * Creates a pyramid series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/} for more info\n * @important\n */\nexport class PyramidSeries extends FunnelSeries {\n\tprotected _tag = \"pyramid\";\n\n\tpublic static className: string = \"PyramidSeries\";\n\tpublic static classNames: Array<string> = FunnelSeries.classNames.concat([PyramidSeries.className]);\n\n\tdeclare public _settings: IPyramidSeriesSettings;\n\tdeclare public _privateSettings: IPyramidSeriesPrivate;\n\tdeclare public _dataItemSettings: IPyramidSeriesDataItem;\n\n\tprotected _nextSize: number | undefined;\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis._nextSize = undefined;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\t\tconst valueIs = this.get(\"valueIs\", \"area\");\n\n\t\tconst sum = this.getPrivate(\"valueAbsoluteSum\", 0);\n\n\t\tif (sum == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", p100);\n\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", 0));\n\t\tconst value = dataItem.get(\"value\", 0);\n\n\t\tlet sliceHeight: number;\n\t\tlet sliceBottomWidth: number;\n\n\t\tlet pyramidHeight = slicesContainer.innerHeight();\n\t\tlet pyramidWidth = slicesContainer.innerWidth();\n\t\tlet linkWidth = link.width();\n\t\tlet linkHeight = link.height();\n\n\t\tif (orientation == \"horizontal\") {\n\t\t\t[pyramidWidth, pyramidHeight] = [pyramidHeight, pyramidWidth];\n\t\t\t[linkWidth, linkHeight] = [linkHeight, linkWidth];\n\t\t}\n\n\t\tconst center = pyramidWidth / 2;\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tlinkHeight *= d;\n\n\t\tpyramidHeight = pyramidHeight * (endLocation - startLocation) - linkHeight * (this._count * this._total - 1);\n\n\t\tlet topWidth = $utils.relativeToValue(tw, pyramidWidth);\n\n\t\tif (!$type.isNumber(this._nextSize)) {\n\t\t\tthis._nextSize = topWidth;\n\t\t}\n\n\t\tlet bottomWidth = $utils.relativeToValue(bw, pyramidWidth);\n\t\tlet sliceTopWidth = this._nextSize;\n\n\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n\t\tlet c = Math.tan(Math.PI / 2 - angle);\n\t\tif (c == 0) {\n\t\t\tc = 0.00000001;\n\t\t}\n\n\t\tif (valueIs == \"area\") {\n\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n\t\t\tlet square = totalSquare * workingValue / sum;\n\n\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n\n\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n\n\t\t\tif (sliceHeight > 0) {\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsliceBottomWidth = sliceTopWidth;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\n\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\n\t\t}\n\n\t\tlet labelCoord = this._nextCoord + sliceHeight / 2;\n\t\tlet sliceX = center;\n\t\tlet sliceY = this._nextCoord;\n\n\t\tlet linkX = center;\n\t\tlet linkY = sliceY + sliceHeight;\n\n\t\tif (orientation == \"vertical\") {\n\t\t\tlabel.set(\"y\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._rLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\tslice.set(\"height\", sliceHeight);\n\t\t}\n\t\telse {\n\t\t\tlabel.set(\"x\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._hLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\t[sliceX, sliceY] = [sliceY, sliceX];\n\t\t\t[linkX, linkY] = [linkY, linkX];\n\n\t\t\tslice.set(\"width\", sliceHeight);\n\t\t}\n\n\t\tslice.setAll({ orientation, bottomWidth: sliceBottomWidth, topWidth: sliceTopWidth, x: sliceX, y: sliceY });\n\t\tlink.setAll({ orientation, x: linkX, y: linkY, topWidth: sliceBottomWidth, bottomWidth: sliceBottomWidth });\n\n\t\tthis._nextSize = sliceBottomWidth;\n\t\tthis._nextCoord += sliceHeight + linkHeight;\n\t}\n}\n", "import { PyramidSeries, IPyramidSeriesSettings, IPyramidSeriesDataItem, IPyramidSeriesPrivate } from \"./PyramidSeries\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { p100, p50 } from \"../../core/util/Percent\"\n\n\nexport interface IPictorialStackedSeriesDataItem extends IPyramidSeriesDataItem {\n\n}\n\nexport interface IPictorialStackedSeriesSettings extends IPyramidSeriesSettings {\n\n\t/**\n\t * An SVG path that will define the shape of the pictorial series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/#Shape_of_the_series} for more info\n\t */\n\tsvgPath?: string;\n\n}\n\nexport interface IPictorialStackedSeriesPrivate extends IPyramidSeriesPrivate {\n}\n\n/**\n * Creates a pictorial series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/} for more info\n * @important\n */\nexport class PictorialStackedSeries extends PyramidSeries {\n\tprotected _tag = \"pictorial\";\n\n\tpublic static className: string = \"PictorialStackedSeries\";\n\tpublic static classNames: Array<string> = PyramidSeries.classNames.concat([PictorialStackedSeries.className]);\n\n\tdeclare public _settings: IPictorialStackedSeriesSettings;\n\tdeclare public _privateSettings: IPictorialStackedSeriesPrivate;\n\tdeclare public _dataItemSettings: IPictorialStackedSeriesDataItem;\n\n\t/**\n\t * A [[Graphics]] element to used as a mask (shape) for the series.\n\t *\n\t * This element is read-only. To modify the mask/shape, use the `svgPath` setting.\n\t */\n\tpublic readonly seriesMask: Graphics = Graphics.new(this._root, { position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 });\n\n\tpublic readonly seriesGraphics: Graphics = this.slicesContainer.children.push(Graphics.new(this._root, { themeTags: [\"pictorial\", \"background\"], position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 }));\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"topWidth\", p100);\n\t\tthis.set(\"bottomWidth\", p100);\n\t\tthis.set(\"valueIs\", \"height\");\n\t\tthis.slicesContainer.set(\"mask\", this.seriesMask);\n\t}\n\n\tprotected _updateScale() {\n\t\tlet slicesContainer = this.slicesContainer;\n\n\t\tlet w = slicesContainer.innerWidth();\n\t\tlet h = slicesContainer.innerHeight();\n\n\t\tlet seriesMask = this.seriesMask;\n\t\tlet seriesGraphics = this.seriesGraphics;\n\t\tlet scale = seriesMask.get(\"scale\", 1);\n\n\t\tconst bounds = seriesMask.localBounds();\n\n\t\tlet mw = bounds.right - bounds.left;\n\t\tlet mh = bounds.bottom - bounds.top;\n\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\tscale = w / mw;\n\t\t}\n\t\telse {\n\t\t\tscale = h / mh;\n\t\t}\n\t\tif (scale != Infinity && scale != NaN) {\n\t\t\tseriesMask.set(\"scale\", scale);\n\t\t\tseriesMask.set(\"x\", w / 2);\n\t\t\tseriesMask.set(\"y\", h / 2);\n\n\t\t\tseriesGraphics.set(\"scale\", scale);\n\t\t\tseriesGraphics.set(\"x\", w / 2);\n\t\t\tseriesGraphics.set(\"y\", h / 2);\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tif (this.isDirty(\"svgPath\")) {\n\t\t\tconst svgPath = this.get(\"svgPath\");\n\t\t\tthis.seriesMask.set(\"svgPath\", svgPath);\n\t\t\tthis.seriesGraphics.set(\"svgPath\", svgPath);\n\t\t}\n\n\t\tthis._updateScale();\n\t}\n\n}\n", "import { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport type { PercentSeries } from \"../percent/PercentSeries\";\n\n\nexport interface ISlicedChartSettings extends IPercentChartSettings {\n}\n\nexport interface ISlicedChartPrivate extends IPercentChartPrivate {\n}\n\n/**\n * Creates a sliced chart for use with [[FunnelSeries]], [[PyramidSeries]], or [[PictorialStackedSeries]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class SlicedChart extends PercentChart {\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.seriesContainer.setAll({ isMeasured:true, layout: this._root.horizontalLayout });\n\t}\n\n\tpublic static className: string = \"SlicedChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([SlicedChart.className]);\n\n\tdeclare public _settings: ISlicedChartSettings;\n\tdeclare public _privateSettings: ISlicedChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n}\n"],
  "mappings": "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",
  "names": ["cos", "sin", "labelAngle", "dataItem"]
}
