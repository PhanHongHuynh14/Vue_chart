{
  "version": 3,
  "sources": ["../../src/.internal/core/elements/Grip.ts", "../../src/.internal/charts/Chart.ts", "../../src/.internal/charts/elements/Bullet.ts", "../../src/.internal/charts/Legend.ts", "../../src/.internal/charts/series/Series.ts", "../../src/.internal/charts/types/SerialChart.ts", "../../src/.internal/charts/axes/AxisBreak.ts", "../../src/.internal/charts/axes/Axis.ts", "../../src/.internal/charts/axes/AxisLine.ts", "../../src/.internal/charts/axes/AxisFill.ts", "../../src/.internal/charts/axes/Grid.ts", "../../src/.internal/charts/axes/AxisLabel.ts", "../../src/.internal/charts/elements/Tick.ts", "../../src/.internal/charts/axes/AxisTick.ts", "../../src/.internal/charts/axes/AxisRenderer.ts", "../../src/.internal/charts/axes/AxisBullet.ts", "../../src/.internal/charts/axes/AxisRendererY.ts", "../../src/.internal/charts/axes/ValueAxisBreak.ts", "../../src/.internal/charts/axes/ValueAxis.ts", "../../src/.internal/charts/axes/DateAxisBreak.ts", "../../src/.internal/charts/axes/DateAxis.ts", "../../src/.internal/charts/axes/AxisRendererX.ts", "../../src/.internal/charts/axes/CategoryAxisBreak.ts", "../../src/.internal/charts/axes/CategoryAxis.ts", "../../src/.internal/charts/series/XYSeries.ts", "../../src/.internal/charts/elements/XYChartScrollbar.ts", "../../src/.internal/charts/types/XYChart.ts", "../../src/.internal/charts/series/LineSeriesSegment.ts", "../../src/.internal/charts/axes/DurationAxis.ts", "../../src/.internal/charts/series/LineSeries.ts", "../../src/.internal/charts/series/RadarSeries.ts", "../../src/.internal/charts/axes/AxisFillCircular.ts", "../../src/.internal/charts/axes/GridCircular.ts", "../../src/.internal/charts/axes/AxisLabelCircular.ts", "../../src/.internal/charts/axes/AxisRendererCircular.ts", "../../src/.internal/charts/axes/AxisRendererRadial.ts", "../../src/.internal/charts/types/RadarChart.ts", "../../src/.internal/charts/elements/ClockHand.ts", "../../src/.internal/charts/types/GaugeChart.ts", "../../src/.internal/charts/series/PercentSeries.ts", "../../src/.internal/charts/types/PercentChart.ts", "../../src/.internal/charts/elements/PieTick.ts", "../../src/.internal/charts/series/PieSeries.ts", "../../src/.internal/charts/types/PieChart.ts", "../../src/.internal/charts/series/PieSeries3D.ts", "../../src/.internal/charts/types/PieChart3D.ts", "../../src/.internal/charts/types/SlicedChart.ts", "../../src/.internal/charts/elements/FlowDiagramNode.ts", "../../src/.internal/charts/elements/FlowDiagramLink.ts", "../../src/.internal/charts/types/FlowDiagram.ts", "../../src/.internal/charts/elements/LabelBullet.ts", "../../src/.internal/charts/elements/SankeyNode.ts", "../../src/.internal/charts/elements/SankeyLink.ts", "../../src/.internal/charts/types/SankeyDiagram.ts", "../../src/.internal/charts/elements/ChordNode.ts", "../../src/.internal/core/elements/QuadraticCurve.ts", "../../src/.internal/charts/elements/ChordLink.ts", "../../src/.internal/charts/types/ChordDiagram.ts", "../../src/.internal/charts/elements/Column.ts", "../../src/.internal/charts/series/ColumnSeries.ts", "../../src/.internal/charts/series/TreeMapSeries.ts", "../../src/.internal/charts/types/TreeMap.ts", "../../src/.internal/charts/axes/AxisRendererX3D.ts", "../../src/.internal/charts/axes/AxisRendererY3D.ts", "../../src/.internal/charts/elements/Column3D.ts", "../../src/.internal/charts/series/ColumnSeries3D.ts", "../../src/.internal/charts/types/XYChart3D.ts", "../../src/.internal/charts/elements/HeatLegend.ts", "../../src/.internal/charts/elements/Candlestick.ts", "../../src/.internal/charts/series/CandlestickSeries.ts", "../../src/.internal/charts/elements/OHLC.ts", "../../src/.internal/charts/series/OHLCSeries.ts", "../../src/.internal/charts/series/StepLineSeriesSegment.ts", "../../src/.internal/charts/series/StepLineSeries.ts", "../../src/.internal/charts/elements/RadarColumn.ts", "../../src/.internal/charts/series/RadarColumnSeries.ts", "../../src/.internal/charts/elements/FunnelSlice.ts", "../../src/.internal/charts/elements/FunnelTick.ts", "../../src/.internal/charts/series/FunnelSeries.ts", "../../src/.internal/charts/series/PyramidSeries.ts", "../../src/.internal/charts/series/PictorialStackedSeries.ts", "../../src/.internal/charts/elements/ConeColumn.ts", "../../src/.internal/charts/series/ConeSeries.ts", "../../src/.internal/charts/elements/CurvedColumn.ts", "../../src/.internal/charts/series/CurvedColumnSeries.ts", "../../src/.internal/charts/elements/CircleBullet.ts", "../../src/.internal/charts/elements/ErrorBullet.ts", "../../src/.internal/charts/elements/NavigationBar.ts", "../../src/.internal/charts/cursors/Cursor.ts", "../../src/.internal/charts/cursors/XYCursor.ts", "../../src/.internal/charts/cursors/RadarCursor.ts"],
  "sourcesContent": ["/**\r\n * Grip module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Align } from \"../defs/Align\";\r\nimport { VerticalAlign } from \"../defs/VerticalAlign\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../Registry\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport { percent } from \"../utils/Percent\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Grip]].\r\n */\r\nexport interface IGripProperties extends IButtonProperties {\r\n\tposition: Align | VerticalAlign;\r\n\tautoHideDelay: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Grip]] for [[Grip]].\r\n */\r\nexport interface IGripEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Grip]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGripAdapters extends IButtonAdapters, IGripProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a grip element that can be used for scrolling or other things.\r\n *\r\n * @see {@link IGripEvents} for a list of available events\r\n * @see {@link IGripAdapters} for a list of available Adapters\r\n * @since 4.4.0\r\n */\r\nexport class Grip extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGripProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGripAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGripEvents;\r\n\r\n\t\t/**\r\n\t * Disposer for grip autohide timeout.\r\n\t */\r\n\tprotected _autoHideTimeout: Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Grip\";\r\n\r\n\t\tconst cs = new InterfaceColorSet();\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"absolute\";\r\n\r\n\r\n\t\tthis.padding(10, 10, 10, 10);\r\n\t\tthis.margin(3, 3, 3, 3);\r\n\t\tthis.background.fillOpacity = 0.3;\r\n\t\tthis.background.cornerRadius(10, 10, 10, 10);\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\r\n\t\tlet path = $path.moveTo({ x: -6, y: 0 });\r\n\t\tpath += $path.lineTo({ x: 6, y: 0 });\r\n\t\tpath += $path.moveTo({ x: -8, y: -6 });\r\n\t\tpath += $path.lineTo({ x: 0, y: -12 });\r\n\t\tpath += $path.lineTo({ x: 8, y: -6 });\r\n\t\tpath += $path.moveTo({ x: -8, y: 6 });\r\n\t\tpath += $path.lineTo({ x: 0, y: 12 });\r\n\t\tpath += $path.lineTo({ x: 8, y: 6 });\r\n\t\ticon.path = path;\r\n\t\ticon.strokeWidth = 2;\r\n\t\ticon.fillOpacity = 0;\r\n\r\n\t\ticon.pixelPerfect = true;\r\n\t\ticon.padding(0, 4, 0, 4);\r\n\t\ticon.stroke = cs.getFor(\"text\");\r\n\t\ticon.strokeOpacity = 0.7;\r\n\t\ticon.align = \"center\";\r\n\t\ticon.valign = \"middle\";\r\n\t\tthis.icon = icon;\r\n\r\n\t\tthis.label.dispose();\r\n\t\tthis.label = undefined;\r\n\r\n\t\t// Set default position\r\n\t\tthis.position = \"right\";\r\n\r\n\t\t// Set up autohide\r\n\t\tthis.autoHideDelay = 3000;\r\n\t\tthis.events.on(\"shown\", (ev) => {\r\n\t\t\tif (this._autoHideTimeout) {\r\n\t\t\t\tthis._autoHideTimeout.dispose();\r\n\t\t\t}\r\n\t\t\tif (this.autoHideDelay) {\r\n\t\t\t\tthis._autoHideTimeout = this.setTimeout(() => {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t}, this.autoHideDelay);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.events.on(\"down\", (ev) => {\r\n\t\t\tif (this._autoHideTimeout) {\r\n\t\t\t\tthis._autoHideTimeout.dispose();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.events.on(\"out\", (ev) => {\r\n\t\t\tif (this.autoHideDelay) {\r\n\t\t\t\tthis._autoHideTimeout = this.setTimeout(() => {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t}, this.autoHideDelay);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets position of the grip.\r\n\t *\r\n\t * Available options: \"left\", \"right\" (default), \"top\", \"bottom\".\r\n\t *\r\n\t * @param  value  Position\r\n\t */\r\n\tpublic set position(value: Align | VerticalAlign) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tswitch(value) {\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tthis.align = \"left\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 0;\r\n\t\t\t\t\tthis.width = undefined;\r\n\t\t\t\t\tthis.height = percent(30);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tthis.align = \"right\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 0;\r\n\t\t\t\t\tthis.width = undefined;\r\n\t\t\t\t\tthis.height = percent(30);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"top\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"top\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"bottom\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"bottom\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position\r\n\t */\r\n\tpublic get position(): Align | VerticalAlign {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of milliseconds to show grip until it is hidden automatically.\r\n\t *\r\n\t * @default 3000\r\n\t * @param  value  Delay\r\n\t */\r\n\tpublic set autoHideDelay(value: number) {\r\n\t\tthis.setPropertyValue(\"autoHideDelay\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Delay\r\n\t */\r\n\tpublic get autoHideDelay(): number {\r\n\t\treturn this.getPropertyValue(\"autoHideDelay\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grip\"] = Grip;\r\n", "/**\r\n * [[Chart]] class provides base functionality for all chart types to inherit.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"../core/Registry\";\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentEvents, IComponentAdapters } from \"../core/Component\";\r\nimport { MutableValueDisposer, Disposer } from \"../core/utils/Disposer\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../core/utils/List\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Grip } from \"../core/elements/Grip\";\r\nimport { Legend } from \"../charts/Legend\";\r\nimport { DataItem } from \"../core/DataItem\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport * as $iter from \"../core/utils/Iterator\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Chart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChartDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Chart]].\r\n */\r\nexport interface IChartDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Chart]].\r\n */\r\nexport interface IChartProperties extends IComponentProperties { }\r\n\r\n/**\r\n * Defines events for [[Chart]].\r\n */\r\nexport interface IChartEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Chart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChartAdapters extends IComponentAdapters, IChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Charts.\r\n *\r\n * @see {@link IChartEvents} for a list of available Events\r\n * @see {@link IChartAdapters} for a list of available Adapters\r\n */\r\nexport class Chart extends Component {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChartEvents;\r\n\r\n\t/**\r\n\t * A List of chart titles.\r\n\t */\r\n\tpublic titles: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Container that holds the chart itself.\r\n\t */\r\n\tpublic chartContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to a container that holds both the chart and the legend.\r\n\t */\r\n\tpublic chartAndLegendContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to chart's [[Legend]].\r\n\t * @ignore\r\n\t */\r\n\tprotected _legend = new MutableValueDisposer<Legend>();\r\n\r\n\t/**\r\n\t * Instance of the grip element.\r\n\t */\r\n\tprotected _dragGrip: $type.Optional<Grip>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Chart) {\r\n\t\t\tthrow new Error(\"'Chart' cannot be instantiated directly. Please use a specific chart type.\");\r\n\t\t}\r\n\t\tthis.className = \"Chart\";\r\n\r\n\t\t// Create a list of titles\r\n\t\tconst template = new Label();\r\n\t\tthis.titles = new ListTemplate<Label>(template);\r\n\t\tthis._disposers.push(new ListDisposer(this.titles));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\t// Chart component is also a container. it holds _chartAndLegendCont and titles\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.layout = \"vertical\";\r\n\r\n\t\t// Chart and legend\r\n\t\tlet chartAndLegendContainer: Container = this.createChild(Container);\r\n\t\tchartAndLegendContainer.shouldClone = false;\r\n\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\tchartAndLegendContainer.width = percent(100);\r\n\t\tchartAndLegendContainer.height = percent(100);\r\n\t\tthis.chartAndLegendContainer = chartAndLegendContainer;\r\n\r\n\t\t// Chart container holds all the elements of a chart, extept titles and legend\r\n\t\tlet chartContainer = chartAndLegendContainer.createChild(Container);\r\n\t\tchartContainer.shouldClone = false;\r\n\t\tchartContainer.width = percent(100);\r\n\t\tchartContainer.height = percent(100);\r\n\t\tthis.chartContainer = chartContainer;\r\n\r\n\t\tthis.showOnInit = true;\r\n\r\n\t\tthis._disposers.push(this._legend);\r\n\r\n\t\t// Add title list events to apply certain formatting options and to make\r\n\t\t// the chart reference them as accessible screen reader labels\r\n\t\tthis.titles.events.on(\"inserted\", (label) => {\r\n\t\t\tthis.processTitle(label);\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this, false);\r\n\t\tthis.titles.events.on(\"removed\", (label) => {\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this, false);\r\n\r\n\t\t// Accessibility\r\n\t\t// It seems we can't set focusable on the whole chart because it seems to\r\n\t\t// mess up the whole focus event system - getting a focus on an inside\r\n\t\t// object also trigger focus on parent\r\n\t\t//this.focusable = true;\r\n\t\tthis.role = \"region\";\r\n\r\n\t\tthis.defaultState.transitionDuration = 1;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates drawing of the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tthis.fixLayout();\r\n\t\tsuper.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates legend's hierarchy based on the position.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet chartAndLegendContainer = this.chartAndLegendContainer;\r\n\t\t\tlet chartContainer = this.chartContainer;\r\n\t\t\tchartContainer.x = undefined;\r\n\t\t\tchartContainer.y = undefined;\r\n\t\t\tif (legend.position != \"absolute\") {\r\n\t\t\t\tlegend.x = undefined;\r\n\t\t\t\tlegend.y = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (legend.position) {\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"absolute\":\r\n\t\t\t\t\tlegend.isMeasured = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\r\n\t\t// Nothing here. This method is provided only as a \"placeholder\" for\r\n\t\t// extending classes to override\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new title to the chart when it is inserted into chart's titles\r\n\t * list.\r\n\t * @param event  An event object which is triggered when inserting into titles list\r\n\t * @return Label object\r\n\t */\r\n\tprotected processTitle(event: IListEvents<Label>[\"inserted\"]): Label {\r\n\t\tlet title: Label = event.newValue;\r\n\t\ttitle.parent = this;\r\n\t\ttitle.toBack();\r\n\t\ttitle.shouldClone = false;\r\n\t\ttitle.align = \"center\";\r\n\r\n\t\t// Need to explicitly apply the `id` attribute so it can be referenced by\r\n\t\t// `aria-labelledby`\r\n\t\ttitle.uidAttr();\r\n\t\treturn title;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if chart has any title elements. If it does, we will use them in an\r\n\t * `aria-labelledby` attribute so that screen readers can use them to properly\r\n\t * describe the chart when it is focused or hovered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateReaderTitleReferences(): void {\r\n\t\tif (this.titles.length) {\r\n\t\t\tlet titleIds: Array<string> = [];\r\n\t\t\t$iter.each(this.titles.iterator(), (title) => {\r\n\t\t\t\ttitleIds.push(title.uid);\r\n\t\t\t});\r\n\t\t\tthis.setSVGAttribute({ \"aria-labelledby\": titleIds.join(\" \") });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-labelledby\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Holds the instance of chart's [[Leged]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for more information about legends\r\n\t * @param Legend\r\n\t */\r\n\tpublic set legend(legend: Legend) {\r\n\t\tthis.setLegend(legend);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend\r\n\t */\r\n\tpublic get legend(): Legend {\r\n\t\treturn this._legend.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tif (this._legend.get() !== legend) {\r\n\t\t\tif (legend) {\r\n\t\t\t\t// Set legend options\r\n\t\t\t\tlegend.parent = this.chartAndLegendContainer;\r\n\r\n\t\t\t\tthis._legend.set(legend, legend.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"position\") {\r\n\t\t\t\t\t\tthis.fixLayout();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false));\r\n\r\n\t\t\t\tlegend.addDisposer(new Disposer(() => {\r\n\t\t\t\t\tthis.legend = undefined;\r\n\t\t\t\t}))\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._legend.reset();\r\n\t\t\t}\r\n\r\n\t\t\tthis.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\t// otherwise there might be some errors when disposing chart which was just inited\r\n\t\tif (this.legend) {\r\n\t\t\tthis.legend.dispose();\r\n\t\t}\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up legend\r\n\t\t\tif ($type.hasValue(config.legend) && !$type.hasValue(config.legend.type)) {\r\n\t\t\t\tconfig.legend.type = \"Legend\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.titles.copyFrom(source.titles);\r\n\t\tthis.chartContainer.copyFrom(source.chartContainer);\r\n\t\tif (source.legend) {\r\n\t\t\tthis.legend = source.legend.clone();\r\n\t\t\tthis.legend.removeChildren();\r\n\t\t}\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * An instance of [[Grip]] which serves as a grip point which appears on\r\n\t * touch and allows scrolling whole page even if chart is occupying the\r\n\t * whole of the screen and would otherwise prevent scrolling.\r\n\t *\r\n\t * @since 4.4.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/touch/} For more information.\r\n\t * @param  value  Grip\r\n\t */\r\n\tpublic set dragGrip(value: Grip) {\r\n\t\tthis._dragGrip = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grip\r\n\t */\r\n\tpublic get dragGrip(): Grip {\r\n\t\tif (!this._dragGrip) {\r\n\t\t\tlet grip = this.tooltipContainer.createChild(Grip);\r\n\t\t\tgrip.align = \"right\";\r\n\t\t\tgrip.valign = \"middle\";\r\n\t\t\tgrip.hide(0);\r\n\r\n\t\t\tgrip.events.on(\"down\", (ev) => {\r\n\t\t\t\tif (ev.touch) {\r\n\t\t\t\t\tthis.interactionsEnabled = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tgrip.events.on(\"up\", (ev) => {\r\n\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t});\r\n\r\n\t\t\tthis.events.on(\"down\", (ev) => {\r\n\t\t\t\tif (ev.touch) {\r\n\t\t\t\t\tgrip.show();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis._dragGrip = grip;\r\n\t\t}\r\n\t\treturn this._dragGrip;\r\n\t}\r\n\r\n\tpublic set focusable(value: boolean) {\r\n\t\tthis.parent.focusable = value;\r\n\t}\r\n\r\n\tpublic get focusable(): boolean {\r\n\t\treturn this.parent.focusable;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Chart\"] = Chart;\r\n\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Reduce horizontal margins\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tif (target.pixelPaddingLeft > 10) {\r\n\t\t\t\tstate.properties.paddingLeft = 10;\r\n\t\t\t}\r\n\t\t\tif (target.pixelPaddingRight > 10) {\r\n\t\t\t\tstate.properties.paddingRight = 10;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Reduce vertical margins\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tif (target.pixelPaddingTop > 10) {\r\n\t\t\t\tstate.properties.paddingTop = 10;\r\n\t\t\t}\r\n\t\t\tif (target.pixelPaddingBottom > 10) {\r\n\t\t\t\tstate.properties.paddingBottom = 10;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove horizontal padding\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.paddingLeft = 0;\r\n\t\t\tstate.properties.paddingRight = 0;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical padding\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.paddingTop = 0;\r\n\t\t\tstate.properties.paddingBottom = 0;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n", "/**\r\n * Module that defines everything related to building bullets.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]].\r\n */\r\nexport interface IBulletProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Relative horizontal location within cell. (0-1)\r\n\t */\r\n\tlocationX?: number;\r\n\r\n\t/**\r\n\t * Relative vertical location within cell. (0-1)\r\n\t */\r\n\tlocationY?: number;\r\n\r\n\t/**\r\n\t * Specifies if bullet needs to be redrawn if the underlying data changes.\r\n\t */\r\n\tisDynamic?: boolean;\r\n\r\n\t/**\r\n\t * [string description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\txField?: string;\r\n\r\n\t/**\r\n\t * [string description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tyField?: string;\r\n\r\n\t/**\r\n\t * Defines if this bullet should be copied to legend marker\r\n\t */\r\n\tcopyToLegendMarker?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Bullet]].\r\n */\r\nexport interface IBulletEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Bullet]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IBulletAdapters extends IContainerAdapters, IBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates bullets.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Bullet extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IBulletEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Bullet\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.tooltipX = 0;\r\n\t\tthis.tooltipY = 0;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.copyToLegendMarker = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative horizontal location within cell. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tif(this.setPropertyValue(\"locationX\", value)){\r\n\t\t\tlet dataItem = this.dataItem\r\n\t\t\tif(dataItem && dataItem.component){\r\n\t\t\t\tdataItem.component.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative vertical location within cell. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tif(this.setPropertyValue(\"locationY\", value)){\r\n\t\t\tlet dataItem = this.dataItem\r\n\t\t\tif(dataItem && dataItem.component){\r\n\t\t\t\tdataItem.component.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  [description]\r\n\t */\r\n\tpublic set xField(value: string) {\r\n\t\tthis.setPropertyValue(\"xField\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this.getPropertyValue(\"xField\");\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * Description\r\n\t * @param value  [description]\r\n\t */\r\n\tpublic set yField(value: string) {\r\n\t\tthis.setPropertyValue(\"yField\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this.getPropertyValue(\"yField\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the bullet is \"dynamic\".\r\n\t *\r\n\t * In most cases the bullets remain the same, even if the underlying data\r\n\t * changes.\r\n\t *\r\n\t * However, in cases where bullet also displays a label, or its size depends\r\n\t * on data, it also needs to be redrawn when the underlying data changes.\r\n\t *\r\n\t * Only those bullets that have set `isDynamic = true` will be redrawn each\r\n\t * time data changes. Regular bullets will be reused as they are.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Redraw on data change?\r\n\t */\r\n\tpublic set isDynamic(value: boolean) {\r\n\t\tthis.setPropertyValue(\"isDynamic\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Redraw on data change?\r\n\t */\r\n\tpublic get isDynamic(): boolean {\r\n\t\treturn this.getPropertyValue(\"isDynamic\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if the bullet should be copied to legend marker\r\n\t *\r\n\t * @default false\r\n\t * @param value  Redraw on data change?\r\n\t */\r\n\tpublic set copyToLegendMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"copyToLegendMarker\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Redraw on data change?\r\n\t */\r\n\tpublic get copyToLegendMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"copyToLegendMarker\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Bullet\"] = Bullet;\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Hide bullets\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.isXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Bullet) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n", "/**\r\n * Legend-related functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../core/Component\";\r\nimport { DataItem, IDataItemEvents } from \"../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\r\nimport { RoundedRectangle } from \"../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Optional } from \"../core/utils/Type\";\r\nimport { Preloader } from \"../core/elements/Preloader\";\r\nimport { keyboard } from \"../core/utils/Keyboard\";\r\nimport { registry } from \"../core/Registry\";\r\nimport { getInteraction } from \"../core/interaction/Interaction\";\r\nimport { percent, Percent } from \"../core/utils/Percent\";\r\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\r\nimport { Color } from \"../core/utils/Color\";\r\nimport { RadialGradient } from \"../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../core/rendering/fills/Pattern\";\r\nimport * as $utils from \"../core/utils/Utils\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport * as $math from \"../core/utils/Math\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../core/Sprite\";\r\nimport { Disposer, IDisposer } from \"../core/utils/Disposer\";\r\nimport { MouseCursorStyle } from \"../core/interaction/Mouse\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\nimport { Scrollbar } from \"../core/elements/Scrollbar\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Legend]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LegendDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * A container data item's elements will be placed in.\r\n\t */\r\n\tprotected _itemContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the item label.\r\n\t */\r\n\tprotected _label: Label;\r\n\r\n\t/**\r\n\t * A [[Container]] for legend item marker.\r\n\t */\r\n\tprotected _marker: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the value label.\r\n\t */\r\n\tprotected _valueLabel: Label;\r\n\r\n\t/**\r\n\t * A data context for legend item.\r\n\t */\r\n\tpublic dataContext: any;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Legend;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic childrenCreated: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic colorOrig: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LegendDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element.\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis._label = label;\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * Main color of legend data item.\r\n\t *\r\n\t * This is set by the target element this legend item represents, like\r\n\t * a Series or a Slice.\r\n\t *\r\n\t * It can be used to derive a color in legend's sub-items, like label:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"legend\": {\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"text\": \"[{color}]{name}[/]\"\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/#Legend_labels} For more information about configuring legend labels.\r\n\t * @param value  Main color\r\n\t */\r\n\tpublic set color(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Main color\r\n\t */\r\n\tpublic get color(): $type.Optional<Color | Pattern | LinearGradient | RadialGradient> {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element for \"value label\".\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get valueLabel(): Label {\r\n\t\tif (!this._valueLabel) {\r\n\t\t\tlet valueLabel = this.component.valueLabels.create();\r\n\t\t\tthis._valueLabel = valueLabel;\r\n\r\n\t\t\tthis.addSprite(valueLabel);\r\n\t\t\tthis._disposers.push(valueLabel);\r\n\t\t\tvalueLabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.valueLabels.removeValue(valueLabel);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._valueLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to the main [[Container]] that holds legend item's elements:\r\n\t * marker and labels.\r\n\t *\r\n\t * @return Item container\r\n\t */\r\n\tpublic get itemContainer(): Container {\r\n\t\tif (!this._itemContainer) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet itemContainer = component.itemContainers.create();\r\n\t\t\titemContainer.parent = component;\r\n\r\n\t\t\tthis._itemContainer = itemContainer;\r\n\t\t\tthis.addSprite(itemContainer);\r\n\t\t\tthis._disposers.push(itemContainer);\r\n\r\n\t\t\t// Add click/tap event to toggle item\r\n\t\t\tif (itemContainer.togglable) {\r\n\t\t\t\titemContainer.events.on(\"toggled\", (ev) => {\r\n\t\t\t\t\tcomponent.toggleDataItem(<this>ev.target.dataItem);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add focus event so that we can track which object is currently in focus\r\n\t\t\t// for keyboard toggling\r\n\t\t\tif (itemContainer.focusable) {\r\n\t\t\t\titemContainer.events.on(\"hit\", (ev) => {\r\n\t\t\t\t\t// We need this here in order to reset focused item when it is clicked\r\n\t\t\t\t\t// normally so that it is not toggled by ENTER afterwards\r\n\t\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\titemContainer.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tcomponent.focusedItem = <this>ev.target.dataItem;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\titemContainer.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.itemContainers.removeValue(itemContainer);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tif (this.dataContext.uidAttr) {\r\n\t\t\t\titemContainer.readerControls = this.dataContext.uidAttr();\r\n\t\t\t\titemContainer.readerLabelledBy = this.dataContext.uidAttr();\r\n\t\t\t}\r\n\r\n\t\t\tlet sprite = <any>this.dataContext;\r\n\t\t\tif ((sprite instanceof DataItem || sprite instanceof Sprite) && !sprite.isDisposed()) {\r\n\t\t\t\tconst visibilitychanged = function(ev: AMEvent<Sprite | DataItem, ISpriteEvents & IDataItemEvents>[\"visibilitychanged\"]) {\r\n\t\t\t\t\titemContainer.readerChecked = ev.visible;\r\n\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\titemContainer.isActive = !ev.visible;\r\n\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t};\r\n\r\n\t\t\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\t\t\tif (this.component) {\r\n\t\t\t\t\t\tthis.component.dataItems.remove(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\r\n\t\t\t\tif (sprite instanceof Sprite) {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false)\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"hidden\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = false;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = true;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"shown\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = true;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = false;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._itemContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Container]] that holds legend item's marker element.\r\n\t *\r\n\t * @return Marker\r\n\t */\r\n\tpublic get marker(): Container {\r\n\t\tif (!this._marker) {\r\n\t\t\tlet marker = this.component.markers.create();\r\n\t\t\tthis._marker = marker;\r\n\t\t\tmarker.parent = this.itemContainer;\r\n\t\t\tthis.addSprite(marker);\r\n\t\t\tthis._disposers.push(marker);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.markers.removeValue(marker);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._marker;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a class that carries legend settings.\r\n *\r\n * A legend might change its settings dynamically. Legend can also be shared\r\n * by several elements, requiring different settings.\r\n *\r\n * Having legend's settings in a separate object is a good way to \"hot swap\"\r\n * a set of settings for the legend.\r\n */\r\nexport class LegendSettings {\r\n\r\n\t/**\r\n\t * [valueText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueText: string;\r\n\r\n\t/**\r\n\t * [labelText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic labelText: string;\r\n\r\n\t/**\r\n\t * A text template for the value part of the legend item.\r\n\t */\r\n\tpublic itemValueText: string;\r\n\r\n\t/**\r\n\t * A text template for the label part of the legend item.\r\n\t */\r\n\tpublic itemLabelText: string;\r\n\r\n\t/**\r\n\t * Should marker be created for each legend item.\r\n\t */\r\n\tpublic createMarker: boolean = true;\r\n}\r\n\r\n/**\r\n * Represents types available for Legend position. Not all charts will pay attention to this, like MapChart. You'll need to use legend.align and legend.valign properties to position legend on MapChart.\r\n */\r\nexport type LegendPosition = \"left\" | \"right\" | \"top\" | \"bottom\" | \"absolute\";\r\n\r\n/**\r\n * Defines data fields for [[Legend]].\r\n */\r\nexport interface ILegendDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * A field name in the data item which holds name of the legend item.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A field name in data item which holds boolean value whether item should\r\n\t * be displayed in legend or not.\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Legend]].\r\n */\r\nexport interface ILegendProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Should legend use default marker?\r\n\t *\r\n\t * If set to `false`, the legend will try to mirror the look of the actual\r\n\t * item, like series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tuseDefaultMarker?: boolean;\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * @default \"bottom\"\r\n\t */\r\n\tposition?: LegendPosition;\r\n\r\n\t/**\r\n\t * If set to `true` the Legend will display a scrollbar if its contents do\r\n\t * not fit into its `maxHeight`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.8.0\r\n\t */\r\n\tscrollable?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Legend]].\r\n */\r\nexport interface ILegendEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Legend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILegendAdapters extends IComponentAdapters, ILegendProperties { }\r\n\r\nexport interface ILegendItemEvents {\r\n\tpropertychanged: {\r\n\t\t/**\r\n\t\t * Property key.\r\n\t\t */\r\n\t\tproperty: string;\r\n\t};\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [[Legend]] class is used to create legend for the chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for Legend documentation\r\n * @see {@link ILegendEvents} for a list of available events\r\n * @see {@link ILegendAdapters} for a list of available Adapters\r\n */\r\nexport class Legend extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of the data fields.\r\n\t */\r\n\tpublic _dataFields: ILegendDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILegendEvents;\r\n\r\n\t/**\r\n\t * Defines data item type.\r\n\t */\r\n\tpublic _dataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * List of legend Item containers. Legend item containers contain marker, title label and value label.\r\n\t */\r\n\tpublic itemContainers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item labels.\r\n\t */\r\n\tpublic labels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * List of legend item markers.\r\n\t */\r\n\tpublic markers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item value labels.\r\n\t */\r\n\tpublic valueLabels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Currently focused legend item (for toggling via keyboard)\r\n\t */\r\n\tpublic focusedItem: Optional<this[\"_dataItem\"]>;\r\n\r\n\r\n\tpublic scrollbar: Scrollbar;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Legend\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", false);\r\n\t\tthis.setPropertyValue(\"scrollable\", false);\r\n\t\tthis.setPropertyValue(\"contentAlign\", \"center\");\r\n\r\n\t\t// Create a template container and list for legend items\r\n\t\tlet itemContainer: Container = new Container();\r\n\t\titemContainer.applyOnClones = true;\r\n\t\titemContainer.padding(8, 0, 8, 0);\r\n\t\titemContainer.margin(0, 10, 0, 10);\r\n\t\titemContainer.layout = \"horizontal\";\r\n\t\titemContainer.clickable = true;\r\n\t\titemContainer.focusable = true;\r\n\t\titemContainer.role = \"switch\";\r\n\t\titemContainer.togglable = true;\r\n\t\titemContainer.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\titemContainer.background.fillOpacity = 0; // creates hit area\r\n\r\n\t\t// Create container list using item template we just created\r\n\t\tthis.itemContainers = new ListTemplate<Container>(itemContainer);\r\n\t\tthis._disposers.push(new ListDisposer(this.itemContainers));\r\n\t\tthis._disposers.push(this.itemContainers.template);\r\n\r\n\t\t// Set up global keyboard events for toggling elements\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (keyboard.isKey(ev.event, \"enter\") && this.focusedItem) {\r\n\t\t\t\tconst focusedItem = this.focusedItem;\r\n\t\t\t\tconst target = focusedItem.itemContainer;\r\n\t\t\t\tif (target.togglable) {\r\n\t\t\t\t\tthis.toggleDataItem(focusedItem);\r\n\t\t\t\t}\r\n\t\t\t\telse if (target.clickable && target.events.isEnabled(\"hit\")) {\r\n\t\t\t\t\ttarget.dispatchImmediately(\"hit\", { event: ev });\r\n\r\n\t\t\t\t\t// We need this here because \"hit\" event resets `this.focusedItem`\r\n\t\t\t\t\t// And we need it here\r\n\t\t\t\t\tthis.focusedItem = focusedItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: Container = new Container();\r\n\t\tmarker.width = 23;\r\n\t\tmarker.height = 23;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.applyOnClones = true;\r\n\t\tmarker.setStateOnChildren = true;\r\n\t\tmarker.background.fillOpacity = 0;\r\n\t\tmarker.background.strokeOpacity = 0;\r\n\t\tmarker.propertyFields.fill = \"fill\";\r\n\t\tmarker.valign = \"middle\";\r\n\r\n\t\tlet disabledColor = interfaceColors.getFor(\"disabledBackground\");\r\n\r\n\t\tmarker.events.on(\"childadded\", (event) => {\r\n\t\t\tlet child = event.newValue;\r\n\t\t\tlet activeState = child.states.create(\"active\");\r\n\t\t\tactiveState.properties.stroke = disabledColor;\r\n\t\t\tactiveState.properties.fill = disabledColor;\r\n\t\t});\r\n\r\n\t\tthis.markers = new ListTemplate<Container>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\t// Create a legend background element\r\n\t\tlet rectangle: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\trectangle.width = percent(100);\r\n\t\trectangle.height = percent(100);\r\n\t\trectangle.applyOnClones = true;\r\n\t\trectangle.propertyFields.fill = \"fill\"; //othrwise old edge doesn't like as the same pattern is set both on parent and child https://codepen.io/team/amcharts/pen/72d7a98f3fb811d3118795220ff63182\r\n\t\trectangle.strokeOpacity = 0;\r\n\r\n\t\t// Create a template container and list for item labels\r\n\t\tlet label: Label = new Label();\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.margin(0, 5, 0, 5);\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.applyOnClones = true;\r\n\t\tlabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tthis.labels = new ListTemplate<Label>(label);\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\t\tlabel.interactionsEnabled = false;\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.fullWords = false;\r\n\r\n\t\t// Create a template container and list for item value labels\r\n\t\tlet valueLabel: Label = new Label();\r\n\t\tvalueLabel.margin(0, 5, 0, 0);\r\n\t\tvalueLabel.valign = \"middle\";\r\n\t\tvalueLabel.width = 50; // to avoid rearranging legend entries when value changes.\r\n\t\tvalueLabel.align = \"right\";\r\n\t\tvalueLabel.textAlign = \"end\";\r\n\t\tvalueLabel.applyOnClones = true;\r\n\t\tvalueLabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tvalueLabel.interactionsEnabled = false;\r\n\r\n\t\tthis.valueLabels = new ListTemplate<Label>(valueLabel);\r\n\t\tthis._disposers.push(new ListDisposer(this.valueLabels));\r\n\t\tthis._disposers.push(this.valueLabels.template);\r\n\r\n\t\tthis.position = \"bottom\"; // don't use setPropertyValue here!\r\n\r\n\t\t// Create a state for disabled legend items\r\n\t\titemContainer.states.create(\"active\");\r\n\t\titemContainer.setStateOnChildren = true;\r\n\r\n\t\t// Apply accessibility settings\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.events.on(\"layoutvalidated\", this.handleScrollbar, this, false);\r\n\t\tthis.events.on(\"parentset\", () => {\r\n\t\t\tconst parent = this.parent;\r\n\t\t\tif (parent) {\r\n\t\t\t\tthis._disposers.push(parent.events.on(\"maxsizechanged\", () => {\r\n\t\t\t\t\tif (this.scrollable) {\r\n\t\t\t\t\t\tthis.setTimeout(() => {\r\n\t\t\t\t\t\t\tthis.updateMasks();\r\n\t\t\t\t\t\t\tthis.handleScrollbar();\r\n\t\t\t\t\t\t\tthis._handleWheelReal(1);\r\n\t\t\t\t\t\t}, 100)\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Legend\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LegendDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected validateDataElements() {\r\n\t\tif (this.scrollbar) {\r\n\t\t\tthis.scrollbar.start = 0;\r\n\t\t\tthis.scrollbar.end = 1;\r\n\t\t}\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t * @todo Description\r\n\t * @todo Figure out how to update appearance of legend item without losing focus\r\n\t * @todo Update legend marker appearance as apperance of related series changes\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\t// Get data item (legend item's) container\r\n\t\tlet container = dataItem.itemContainer;\r\n\r\n\t\tlet marker = dataItem.marker;\r\n\r\n\t\t$utils.used(dataItem.label);\r\n\t\tlet valueLabel = dataItem.valueLabel;\r\n\r\n\t\t// Set parent and update current state\r\n\t\tcontainer.readerChecked = dataItem.dataContext.visible;\r\n\r\n\t\t// Tell series its legend data item\r\n\t\tdataItem.dataContext.legendDataItem = dataItem;\r\n\r\n\t\tlet tempMaxWidth = dataItem.label.maxWidth;\r\n\t\tif (!(dataItem.label.width instanceof Percent)) {\r\n\t\t\tdataItem.label.width = undefined;\r\n\t\t}\r\n\r\n\t\tif (tempMaxWidth > 0) {\r\n\t\t\tdataItem.label.maxWidth = tempMaxWidth;\r\n\t\t}\r\n\t\tif (valueLabel.align == \"right\") {\r\n\t\t\tvalueLabel.width = undefined;\r\n\t\t}\r\n\r\n\t\tlet legendSettings = dataItem.dataContext.legendSettings;\r\n\r\n\t\t// If we are not using default markers, create a unique legend marker based\r\n\t\t// on the data item type\r\n\t\tlet dataContext = dataItem.dataContext;\r\n\r\n\t\tif (dataContext.createLegendMarker && (!this.useDefaultMarker || !(dataContext instanceof Sprite))) {\r\n\t\t\tif (!dataItem.childrenCreated) {\r\n\t\t\t\tdataContext.createLegendMarker(marker);\r\n\t\t\t\tdataItem.childrenCreated = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.markers.template.propertyFields.fill = undefined;\r\n\t\t}\r\n\r\n\t\tif (dataContext.updateLegendValue) {\r\n\t\t\tdataContext.updateLegendValue(); // this solves issue with external legend, as legend is created after chart updates legend values\r\n\t\t}\r\n\r\n\t\tif (dataContext.component && dataContext.component.updateLegendValue) {\r\n\t\t\tdataContext.component.updateLegendValue(dataContext);\r\n\t\t}\r\n\r\n\t\tif (valueLabel.invalid) {\r\n\t\t\tvalueLabel.validate();\r\n\t\t}\r\n\r\n\t\tif (valueLabel.text == \"\" || valueLabel.text == undefined) {\r\n\t\t\tvalueLabel.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (legendSettings && (legendSettings.itemValueText != undefined || legendSettings.valueText != undefined)) {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet visible = dataItem.dataContext.visible;\r\n\r\n\t\tif (visible === undefined) {\r\n\t\t\tvisible = true;\r\n\t\t}\r\n\t\tvisible = $type.toBoolean(visible);\r\n\t\tdataItem.dataContext.visible = visible;\r\n\r\n\t\tcontainer.events.disableType(\"toggled\");\r\n\r\n\t\tcontainer.isActive = !visible;\r\n\t\tif (container.isActive) {\r\n\t\t\tcontainer.setState(\"active\", 0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcontainer.setState(\"default\", 0);\r\n\t\t}\r\n\t\tcontainer.events.enableType(\"toggled\");\r\n\t}\r\n\r\n\r\n\tpublic afterDraw() {\r\n\t\tlet maxWidth = this.getPropertyValue(\"maxWidth\");\r\n\t\tlet maxLabelWidth = 0;\r\n\t\tthis.labels.each((label) => {\r\n\t\t\tif (label.invalid) {\r\n\t\t\t\tlabel.maxWidth = undefined;\r\n\t\t\t\tlabel.validate();\r\n\t\t\t}\r\n\t\t\tif (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxLabelWidth) {\r\n\t\t\t\tmaxLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tlet maxValueLabelWidth = 0;\r\n\t\tthis.valueLabels.each((label) => {\r\n\t\t\tif (label.invalid) {\r\n\t\t\t\tlabel.validate();\r\n\t\t\t}\r\n\t\t\tif (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxValueLabelWidth) {\r\n\t\t\t\tmaxValueLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet maxMarkerWidth = 0;\r\n\t\tthis.markers.each((marker) => {\r\n\t\t\tif (marker.invalid) {\r\n\t\t\t\tmarker.validate();\r\n\t\t\t}\r\n\t\t\tif (marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight > maxMarkerWidth) {\r\n\t\t\t\tmaxMarkerWidth = marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\t\tlet itemContainer = this.itemContainers.template;\r\n\t\tlet margin = itemContainer.pixelMarginRight + itemContainer.pixelMarginLeft;\r\n\t\tlet maxAdjustedLabelWidth: number;\r\n\t\tlet trueMaxWidth = maxLabelWidth + maxValueLabelWidth + maxMarkerWidth;\r\n\t\tif (!$type.isNumber(maxWidth)) {\r\n\t\t\tmaxAdjustedLabelWidth = maxLabelWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmaxWidth = maxWidth - margin;\r\n\t\t\tif (maxWidth > trueMaxWidth) {\r\n\t\t\t\tmaxWidth = trueMaxWidth;\r\n\t\t\t}\r\n\t\t\tmaxAdjustedLabelWidth = maxWidth - maxMarkerWidth - maxValueLabelWidth;\r\n\t\t}\r\n\r\n\t\tthis.labels.each((label) => {\r\n\t\t\tif (this.valueLabels.template.align == \"right\" || label.measuredWidth > maxAdjustedLabelWidth) {\r\n\t\t\t\tif (!(label.width instanceof Percent)) {\r\n\t\t\t\t\tlabel.width = Math.min(label.maxWidth, maxAdjustedLabelWidth - label.pixelMarginLeft - label.pixelMarginRight);\r\n\t\t\t\t\tlabel.maxWidth = label.width;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (this.valueLabels.template.align == \"right\") {\r\n\t\t\tthis.valueLabels.each((valueLabel) => {\r\n\t\t\t\tvalueLabel.width = maxValueLabelWidth - valueLabel.pixelMarginRight - valueLabel.pixelMarginLeft;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tsuper.afterDraw();\r\n\t}\r\n\r\n\r\n\tprotected handleScrollbar() {\r\n\t\tlet scrollbar = this.scrollbar;\r\n\t\tif (this.scrollable && scrollbar) {\r\n\t\t\tconst measuredHeight = this.maxHeight;\r\n\t\t\tscrollbar.height = measuredHeight;\r\n\t\t\tscrollbar.x = this.measuredWidth - scrollbar.pixelWidth - scrollbar.pixelMarginLeft;\r\n\r\n\t\t\tif (this.contentHeight > measuredHeight) {\r\n\t\t\t\tscrollbar.visible = true;\r\n\t\t\t\tscrollbar.thumb.height = scrollbar.height * measuredHeight / this.contentHeight;\r\n\t\t\t\tthis.paddingRight = scrollbar.pixelWidth + scrollbar.pixelMarginLeft + scrollbar.pixelMarginRight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tscrollbar.thumb.height = scrollbar.height * measuredHeight / this.contentHeight;\r\n\t\t\t\tthis.paddingRight = scrollbar.pixelWidth + scrollbar.pixelMarginLeft + scrollbar.pixelMarginRight;\r\n\t\t\t\tscrollbar.visible = false;\r\n\t\t\t\tscrollbar.start = 0;\r\n\t\t\t\tscrollbar.end = 1;\r\n\t\t\t}\r\n\r\n\t\t\tscrollbar.handleThumbPosition();\r\n\r\n\t\t\tthis.updateMasks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * IMPORTANT: [[MapChart]] will ignore this setting, as it is using different\r\n\t * layout structure than other charts.\r\n\t *\r\n\t * To position legend in [[MapChart]] set legend's `align` (`\"left\"` or\r\n\t * `\"right\"`) and `valign` (`\"top\"` or `\"bottom\"`) properties instead.\r\n\t *\r\n\t * @default \"bottom\"\r\n\t * @param value  Position\r\n\t */\r\n\tpublic set position(value: LegendPosition) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tif (value == \"left\" || value == \"right\") {\r\n\t\t\t\tthis.margin(10, 5, 10, 10);\r\n\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\tthis.contentAlign = \"none\";\r\n\t\t\t\tthis.valueLabels.template.align = \"right\";\r\n\r\n\t\t\t\tif (!$type.isNumber(this.maxColumns)) {\r\n\t\t\t\t\tthis.maxColumns = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.width = undefined;\r\n\t\t\t\tthis.maxWidth = 220;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.maxColumns = undefined;\r\n\t\t\t\tthis.width = percent(100);\r\n\t\t\t\tthis.valueLabels.template.align = \"left\";\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position\r\n\t */\r\n\tpublic get position(): LegendPosition {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should legend try to mirror the look of the related item when building\r\n\t * the marker for legend item?\r\n\t *\r\n\t * If set to `false` it will try to make the marker look like its related\r\n\t * item.\r\n\t *\r\n\t * E.g. if an item is for a Line Series, it will display a line of the\r\n\t * same thickness, color, and will use the same bullets if series have them.\r\n\t *\r\n\t * If set to `true`, all markers will be shown as squares, regardless of te\r\n\t * series type.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use default marker?\r\n\t */\r\n\tpublic set useDefaultMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use default marker?\r\n\t */\r\n\tpublic get useDefaultMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"useDefaultMarker\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the Legend will display a scrollbar if its contents do\r\n\t * not fit into its `maxHeight`.\r\n\t *\r\n\t * Please note that `maxHeight` is automatically set for Legend when its\r\n\t * `position` is set to `\"left\"` or `\"right\"`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.8.0\r\n\t * @param  value  Legend Scrollable?\r\n\t */\r\n\tpublic set scrollable(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"scrollable\", value, true)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tlet scrollbar = this.createChild(Scrollbar);\r\n\t\t\t\tthis.scrollbar = scrollbar;\r\n\t\t\t\tscrollbar.isMeasured = false;\r\n\t\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\t\tscrollbar.endGrip.__disabled = true;\r\n\t\t\t\tscrollbar.startGrip.__disabled = true;\r\n\t\t\t\tscrollbar.visible = false;\r\n\t\t\t\tscrollbar.marginLeft = 5;\r\n\r\n\t\t\t\tthis._mouseWheelDisposer = this.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\r\n\t\t\t\tthis._disposers.push(scrollbar.events.on(\"rangechanged\", this.updateMasks, this, false));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t\tif (this.scrollbar) {\r\n\t\t\t\t\t\tthis.scrollbar.dispose();\r\n\t\t\t\t\t\tthis.scrollbar = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel scrolling of legend.\r\n\t *\r\n\t * @param  event  Event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]): void {\r\n\t\tthis._handleWheelReal(event.shift.y)\r\n\t}\r\n\r\n\tprotected _handleWheelReal(shift: number) {\r\n\t\tlet scrollbar = this.scrollbar\r\n\t\tif (scrollbar) {\r\n\t\t\tlet ds = (shift / 1000 * this.measuredHeight / this.contentHeight);\r\n\t\t\tlet delta = scrollbar.end - scrollbar.start;\r\n\t\t\tif (shift > 0) {\r\n\t\t\t\tscrollbar.start = $math.max(0, scrollbar.start - ds);\r\n\t\t\t\tscrollbar.end = scrollbar.start + delta;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tscrollbar.end = $math.min(1, scrollbar.end - ds);\r\n\t\t\t\tscrollbar.start = scrollbar.end - delta;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateMasks(): void {\r\n\t\tif (this.scrollbar) {\r\n\t\t\tthis.itemContainers.each((itemContainer) => {\r\n\t\t\t\titemContainer.dy = -this.scrollbar.thumb.pixelY * this.contentHeight / this.maxHeight;\r\n\t\t\t\titemContainer.maskRectangle = { x: 0, y: -itemContainer.dy, width: this.measuredWidth, height: this.maxHeight }\r\n\t\t\t})\r\n\t\t}\r\n\t\tthis.invalidatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend Scrollable?\r\n\t */\r\n\tpublic get scrollable(): boolean {\r\n\t\treturn this.getPropertyValue(\"scrollable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item Legend item\r\n\t * @todo Maybe do it with togglable instead\r\n\t */\r\n\tpublic toggleDataItem(item: this[\"_dataItem\"]): void {\r\n\t\tlet dataContext = item.dataContext;\r\n\r\n\t\tif (!dataContext.visible || dataContext.isHiding || (dataContext instanceof Sprite && dataContext.isHidden)) {\r\n\t\t\titem.color = item.colorOrig;\r\n\r\n\t\t\tdataContext.appeared = true;\r\n\t\t\titem.itemContainer.isActive = false;\r\n\r\n\t\t\tif (dataContext.hidden === true) {\r\n\t\t\t\tdataContext.hidden = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataContext.show) {\r\n\t\t\t\tdataContext.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"%1 shown\", this.language.locale, item.label.readerTitle));\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\titem.itemContainer.isActive = true;\r\n\t\t\tdataContext.appeared = true;\r\n\r\n\t\t\tif (dataContext.hide) {\r\n\t\t\t\tdataContext.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"%1 hidden\", this.language.locale, item.label.readerTitle));\r\n\t\t\titem.color = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Override preloader method so that legend does not accidentally show its\r\n\t * own preloader.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Always `undefined`\r\n\t */\r\n\tpublic get preloader(): Optional<Preloader> {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemPropertyChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemPropertyChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tdataItem.valueLabel.invalidate();\r\n\t\tdataItem.label.invalidate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Legend\"] = Legend;\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Move legend to below the chart if chart is narrow\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"left\" || target.position == \"right\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Move legend to the right if chart is very short\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"top\" || target.position == \"bottom\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"right\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable legend altogether on small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.isXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n", "/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { AxisDataItem } from \"../axes/Axis\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { LegendDataItem, LegendSettings } from \"../Legend\";\r\nimport { options } from \"../../core/Options\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\n\r\nexport interface IHeatRule {\r\n\ttarget: Sprite;\r\n\tproperty: string;\r\n\tmin: any;\r\n\tmax: any;\r\n\tdataField?: string;\r\n\tminValue?: number;\r\n\tmaxValue?: number;\r\n\tlogarithmic?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SeriesDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Related item's width in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemWidth: number;\r\n\r\n\t/**\r\n\t * Related item's height in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemHeight: number;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _bullets: Dictionary<string, Sprite>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Series;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t */\r\n\tpublic get bullets(): Dictionary<string, Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new Dictionary<string, Sprite>();\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._bullets));\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SeriesDataItem\";\r\n\t\t//@todo Should we make `bullets` list disposable?\r\n\t\t//this._disposers.push(new DictionaryDisposer(this.bullets));\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.bullets.clear();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * data items's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Series]].\r\n */\r\nexport interface ISeriesDataFields extends IComponentDataFields {\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be hidden.\r\n\t */\r\n\thidden?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Series]].\r\n */\r\nexport interface ISeriesProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tminBulletDistance?: number;\r\n\r\n\t/**\r\n\t * Should series be hidden in chart's legend?\r\n\t */\r\n\thiddenInLegend?: boolean;\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t */\r\n\tname?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[Series]].\r\n */\r\nexport interface ISeriesEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\textremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tdataitemchanged: {\r\n\t\tdataItem: DataItem\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Series]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISeriesAdapters extends IComponentAdapters, ISeriesProperties {\r\n\t/**\r\n\t * Applied to the name used by screen readers.\r\n\t */\r\n\titemReaderText: string\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\r\nexport class Series extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ISeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISeriesEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used for the series.\r\n\t */\r\n\tpublic _dataItem: SeriesDataItem;\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this series.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tprotected _ignoreMinMax: boolean = false;\r\n\r\n\t/**\r\n\t * Container series' elements are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic mainContainer: Container;\r\n\r\n\t/**\r\n\t * Should series' bullets?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tprotected _showBullets: boolean = true;\r\n\r\n\t/**\r\n\t * List of series' bullets.\r\n\t */\r\n\tprotected _bullets: ListTemplate<Sprite>;\r\n\r\n\t/**\r\n\t * Container bullets are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: SerialChart;\r\n\r\n\t/**\r\n\t * A container axis ranges are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rangesContainer: Container;\r\n\r\n\t/**\r\n\t * A list of axis ranges for this series.\r\n\t */\r\n\tpublic axisRanges: List<AxisDataItem>;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\t/**\r\n\t * Lowest overal values by type.\r\n\t */\r\n\tprotected _tmin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest overal values by type.\r\n\t */\r\n\tprotected _tmax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Lowest values in current selection by type.\r\n\t */\r\n\tprotected _smin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest values in current selection by type.\r\n\t */\r\n\tprotected _smax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [dataItemsByAxis description]\r\n\t *\r\n\t * Both by category and date.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataItemsByAxis = new Dictionary<string, Dictionary<string, this[\"_dataItem\"]>>();\r\n\r\n\t/**\r\n\t * Normally series items are focusable using keyboard, so that people can\r\n\t * select them with a TAB key. However, if there are a lot of data points on\r\n\t * screen it might be long and useless to tab through all o fthem.\r\n\t *\r\n\t * This is where `skipFocusThreshold` comes in. If there are more items than\r\n\t * the value set here, we will not make those focusable and rather let screen\r\n\t * reader software rely on the series summary, or authors provide alternative\r\n\t * detailed information display, such as HTML table.\r\n\t *\r\n\t * Different series might have different threshold defaults.\r\n\t */\r\n\tpublic skipFocusThreshold: number = 20;\r\n\r\n\t/**\r\n\t * Holds a default screen reader text for series data items. It will be used\r\n\t * to generate information for screen readers. If not set, the series will\r\n\t * try to deduce reader text from `tooltipText` or `tooltipHTML`. If those\r\n\t * are not set either, a default reader text will be used which is relevant\r\n\t * for each Series type.\r\n\t */\r\n\tprotected _itemReaderText: string;\r\n\r\n\r\n\t/**\r\n\t * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n\t */\r\n\tprotected _itemReaderTextChanged: boolean = false;\r\n\r\n\t/*\r\n\t\tpublic heatMapfillRule: (fill:Color, column: Sprite) => any = function(fill:Color, sprite: Sprite) {\r\n\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>sprite.dataItem;\r\n\r\n\t\t\tif (dataItem && dataItem.value) {\r\n\t\t\t\tlet series = dataItem.component;\r\n\t\t\t\tif($type.hasValue(series.minColor) &&  $type.hasValue(series.maxColor) && $type.isNumber(series.minValue) && $type.isNumber(series.maxValue)){\r\n\t\t\t\t\tlet percent = (dataItem.values.value.workingValue - series.minValue) / (series.maxValue - series.minValue);\r\n\t\t\t\t\treturn new Color($colors.interpolate(series.minColor.rgb, series.maxColor.rgb, percent));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t*/\r\n\r\n\tprotected _heatRules: List<IHeatRule>;\r\n\r\n\t/**\r\n\t * Most of the series use absolute values. However sometimes various\r\n\t * calculated percent values are need, e.g. item's percent representation\r\n\t * across all values in series, etc.\r\n\t *\r\n\t * It's a resource-intensive operation, so it is disabled by default.\r\n\t *\r\n\t * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n\t * or creating 100% stacks, this setting needs to be set to `true`.\r\n\t *\r\n\t * NOTE: `PieChart`, which relies on slice percentages, has this\r\n\t * automatically set to `true`.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic calculatePercent: boolean = false;\r\n\r\n\t/**\r\n\t * When `calculatePercent` is enabled and data item's percent value is\r\n\t * calculated, last item's real value is used instead of its working value.\r\n\t *\r\n\t * This is done for the animations when last item in series (e.g. slice in\r\n\t * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n\t * calculated percent would always be 100%).\r\n\t *\r\n\t * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n\t * hack by setting `usePercentHack` to `false`.\r\n\t *\r\n\t * @since 4.9.13\r\n\t * @default true\r\n\t */\r\n\tpublic usePercentHack: boolean = true;\r\n\r\n\t/**\r\n\t * Specifies if series should be automatically disposed when removing from\r\n\t * chart's `series` list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * When chart/series' data is processed, all kinds of derivative values are\r\n\t * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n\t * time-consuming operation, especially prominent in data-heavy charts.\r\n\t *\r\n\t * If your chart does not need those values, and you have a lot of data,\r\n\t * setting this to `true` might give a dramatic increase in initial chart\r\n\t * load speed.\r\n\t *\r\n\t * Please note, regular column and line series usage scenarios do not\r\n\t * require derivative values. Those come into play only when you do advanced\r\n\t * functionality like coloring segments of charts in different colors\r\n\t * depending on change between open and close values, have stacked series, or\r\n\t * display any of the derived values, like percent, in tooltips or bullets.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Series) {\r\n\t\t\tthrow new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\r\n\t\t}\r\n\r\n\t\tthis.className = \"Series\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"hidden\", false);\r\n\r\n\t\tthis.axisRanges = new List<AxisDataItem>();\r\n\t\tthis.axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\r\n\t\tthis.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\r\n\t\tthis.mainContainer = this.createChild(Container);\r\n\t\tthis.mainContainer.shouldClone = false;\r\n\t\tthis.mainContainer.mask = this.createChild(Sprite);\r\n\r\n\t\tthis._disposers.push(this.mainContainer);\r\n\r\n\t\t// all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\r\n\t\tlet bulletsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis._shouldBeReady.push(bulletsContainer);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.virtualParent = this;\r\n\t\tthis._disposers.push(bulletsContainer);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.tooltip = new Tooltip();\r\n\t\tthis.tooltip.virtualParent = this;\r\n\t\tthis._disposers.push(this.tooltip);\r\n\r\n\t\tthis.hiddenState.transitionEasing = $ease.cubicIn;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis._disposers.push(this.dataItem);\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply accessibility\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * We need this here so that class names can be applied to bullets container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\tsuper.applyTheme();\r\n\t\tif (options.autoSetClassName && this.bulletsContainer) {\r\n\t\t\tthis.bulletsContainer.className = this.className + \"-bullets\";\r\n\t\t\tthis.bulletsContainer.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart series is used on.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullet.\r\n\t *\r\n\t * @param bullet  Sprite\r\n\t */\r\n\tpublic positionBullet(bullet: Sprite): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates newly created bullet after it has been instert into the list.\r\n\t *\r\n\t * @param event  List event\r\n\t * @todo investigate why itemReaderText is undefined\r\n\t */\r\n\tprotected processBullet(event: IListEvents<Sprite>[\"inserted\"]) {\r\n\t\tlet bullet: Sprite = event.newValue;\r\n\t\tbullet.isTemplate = true;\r\n\t\t// Add accessibility options to bullet\r\n\t\t// If there are relatively few bullets, make them focusable\r\n\t\tthis.events.once(\"datavalidated\", (ev) => {\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tbullet.focusable = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * removes bullets\r\n\t *\r\n\t * @param event  List event\r\n\t */\r\n\tprotected removeBullet(event: IListEvents<Sprite>[\"removed\"]) {\r\n\t\tlet bullet: Sprite = event.oldValue;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet eachBullet = dataItem.bullets.getKey(bullet.uid);\r\n\t\t\tif (eachBullet) {\r\n\t\t\t\teachBullet.dispose();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.processValues(false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getFirstValue(key: string, startIndex: number): number {\r\n\t\t// find first\r\n\t\t/*\r\n\t\treturn $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tfor (let key in dataItem.values) {\r\n\t\t\t\tif ($object.hasKey(dataItem.values, key)) {\r\n\t\t\t\t\tlet value: number = dataItem.values[key].workingValue;\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t});*/\r\n\r\n\t\t//if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\r\n\t\t//startIndex++;\r\n\t\t//}\r\n\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getAbsoluteFirstValue(key: string): number {\r\n\t\tfor (let i = 0; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.values[key].value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * [rangeChangeUpdate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected rangeChangeUpdate() {\r\n\t\tsuper.rangeChangeUpdate();\r\n\t\tthis.processValues(true);\r\n\t}\r\n\r\n\t/**\r\n\t * [processValues description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t * @param dataItems [description]\r\n\t */\r\n\tprotected processValues(working: boolean) {\r\n\t\tif (!this.simplifiedProcessing) {\r\n\t\t\tlet dataItems = this.dataItems;\r\n\r\n\t\t\tlet count: { [index: string]: number } = {};\r\n\t\t\tlet sum: { [index: string]: number } = {};\r\n\t\t\tlet absoluteSum: { [index: string]: number } = {};\r\n\t\t\tlet low: { [index: string]: number } = {};\r\n\t\t\tlet high: { [index: string]: number } = {};\r\n\t\t\tlet open: { [index: string]: number } = {};\r\n\t\t\tlet close: { [index: string]: number } = {};\r\n\t\t\tlet previous: { [index: string]: number } = {};\r\n\t\t\tlet first: { [index: string]: number } = {};\r\n\t\t\tlet absoluteFirst: { [index: string]: number } = {};\r\n\r\n\t\t\t//let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\r\n\r\n\t\t\tlet startIndex: number = $math.max(0, this.startIndex);\r\n\t\t\tstartIndex = $math.min(startIndex, this.dataItems.length);\r\n\r\n\t\t\tlet endIndex: number = $math.min(this.endIndex, this.dataItems.length);\r\n\r\n\t\t\tif (!$type.isNumber(startIndex)) {\r\n\t\t\t\tstartIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\t\tendIndex = this.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t//if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\t// count values\r\n\t\t\t\t\t\tif (!$type.isNumber(count[key])) {\r\n\t\t\t\t\t\t\tcount[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcount[key]++;\r\n\r\n\t\t\t\t\t\t// sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\tsum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsum[key] += value;\r\n\r\n\t\t\t\t\t\t// absolute sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteSum[key])) {\r\n\t\t\t\t\t\t\tabsoluteSum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tabsoluteSum[key] += Math.abs(value);\r\n\r\n\t\t\t\t\t\t// open\r\n\t\t\t\t\t\tif (!$type.isNumber(open[key])) {\r\n\t\t\t\t\t\t\topen[key] = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// close\r\n\t\t\t\t\t\tclose[key] = value;\r\n\r\n\t\t\t\t\t\t// low\r\n\t\t\t\t\t\tif (!$type.isNumber(low[key])) {\r\n\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (low[key] > value) {\r\n\t\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// high\r\n\t\t\t\t\t\tif (!$type.isNumber(high[key])) {\r\n\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (high[key] < value) {\r\n\t\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(first[key])) {\r\n\t\t\t\t\t\t\tfirst[key] = this.getFirstValue(key, startIndex);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteFirst[key])) {\r\n\t\t\t\t\t\t\tabsoluteFirst[key] = this.getAbsoluteFirstValue(key);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// change\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - first[key], \"change\");\r\n\t\t\t\t\t\t// change from start percent\r\n\t\t\t\t\t\t// will fail if first value is 0\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - first[key]) / first[key] * 100, \"changePercent\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]), \"startChange\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]) / absoluteFirst[key] * 100, \"startChangePercent\");\r\n\r\n\t\t\t\t\t\t// previous change\r\n\t\t\t\t\t\tlet prevValue: number = previous[key];\r\n\t\t\t\t\t\tif (!$type.isNumber(prevValue)) {\r\n\t\t\t\t\t\t\tprevValue = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - prevValue, \"previousChange\");\r\n\t\t\t\t\t\t// previous change percent\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\r\n\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.calculatePercent) {\r\n\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\tlet ksum: number = absoluteSum[key];\r\n\r\n\t\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tif (ksum > 0) {\r\n\t\t\t\t\t\t\t\tif (this.usePercentHack) {\r\n\t\t\t\t\t\t\t\t\t// this hack is made in order to make it possible to animate single slice to 0\r\n\t\t\t\t\t\t\t\t\t// if there is only one slice left, percent value is always 100%, so it won't animate\r\n\t\t\t\t\t\t\t\t\t// so we use real value of a slice instead of current value\r\n\t\t\t\t\t\t\t\t\tif (value == ksum) {\r\n\t\t\t\t\t\t\t\t\t\tksum = dataItem.values[key].value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet percent = value / ksum * 100;\r\n\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, percent, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 0, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// calculate one before first (cant do that in cycle, as we don't know open yet\r\n\t\t\t// when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\r\n\t\t\t// so we do startIndex - 1\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet zeroItem: this[\"_dataItem\"] = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(zeroItem.values, (key) => {\r\n\t\t\t\t\tlet value = zeroItem.values[key].value;\r\n\t\t\t\t\t// change\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, value - open[key], \"change\");\r\n\t\t\t\t\t// change percent\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, (value - open[key]) / open[key] * 100, \"changePercent\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// we save various data like sum, average to dataPoint of the series\r\n\t\t\tlet dataItem: DataItem = this.dataItem;\r\n\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, absoluteSum[key], \"absoluteSum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key] / count[key], \"average\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, open[key], \"open\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, close[key], \"close\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, low[key], \"low\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, high[key], \"high\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, count[key], \"count\");\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.filters.clear();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t//axisRange.contents.disposeChildren(); // not good for columns, as they are reused\r\n\t\t\t//\t\t\taxisRange.appendChildren();\r\n\t\t\taxisRange.validate();\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t\tlet bulletsContainer = this.bulletsContainer;\r\n\t\tbulletsContainer.fill = this.fill;\r\n\t\tbulletsContainer.stroke = this.stroke;\r\n\t\tbulletsContainer.x = this.pixelX;\r\n\t\tbulletsContainer.y = this.pixelY;\r\n\r\n\t\tif (this.bulletsContainer.children.length > 0) {\r\n\t\t\tif (this._showBullets) {\r\n\r\n\t\t\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.children.each((bullet) => {\r\n\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.updateTooltipBounds();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltipBounds() {\r\n\t\tif (this.topParent) {\r\n\t\t\tlet x = 0;\r\n\t\t\tlet y = 0;\r\n\t\t\tlet w = this.topParent.maxWidth;\r\n\t\t\tlet h = this.topParent.maxHeight;\r\n\t\t\tlet rect = { x: x, y: y, width: w, height: h };\r\n\r\n\t\t\tthis.tooltip.setBounds(rect);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Sprite): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (this._showBullets) {\r\n\t\t\tif (!this.isHidden) {\r\n\t\t\t\tthis.bulletsContainer.visible = true;\r\n\t\t\t}\r\n\t\t\tthis.bullets.each((bulletTemplate) => {\r\n\t\t\t\t// always better to use the same, this helps to avoid redrawing\r\n\t\t\t\tlet bullet: Sprite = <Sprite>dataItem.bullets.getKey(bulletTemplate.uid);\r\n\r\n\t\t\t\tif (this.shouldCreateBullet(dataItem, bulletTemplate)) {\r\n\t\t\t\t\tif (!bullet) {\r\n\r\n\t\t\t\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\t\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\t\t\t\tif (disabledField && dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = false;\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = false;\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = true;\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbullet.shouldClone = false;\r\n\t\t\t\t\t\tdataItem.addSprite(bullet);\r\n\r\n\t\t\t\t\t\tif (!this.visible || this.isHiding) {\r\n\t\t\t\t\t\t\tbullet.hide(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet currentDataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\t\t\t\tif (currentDataItem != dataItem) {\r\n\t\t\t\t\t\t// set to undefined in order not to reuse\r\n\t\t\t\t\t\tif (currentDataItem) {\r\n\t\t\t\t\t\t\tcurrentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet readerText = this.itemReaderText;\r\n\r\n\t\t\t\t\t\tif (bullet instanceof Bullet) {\r\n\t\t\t\t\t\t\tif (!readerText) {\r\n\t\t\t\t\t\t\t\treaderText = (\"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\");\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (bullet.isDynamic) {\r\n\t\t\t\t\t\t\t\tdataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\t//dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\tthis.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbullet.deepInvalidate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Add accessibility to bullet\r\n\t\t\t\t\t\tif (bullet.focusable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (bullet.hoverable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbullet.parent = this.bulletsContainer;\r\n\t\t\t\t\tdataItem.bullets.setKey(bulletTemplate.uid, bullet);\r\n\r\n\t\t\t\t\t// pass max w/h so we'd know if we should show/hide somethings\r\n\t\t\t\t\tbullet.maxWidth = dataItem.itemWidth;\r\n\t\t\t\t\tbullet.maxHeight = dataItem.itemHeight;\r\n\t\t\t\t\tbullet.__disabled = false;\r\n\r\n\t\t\t\t\tthis.positionBullet(bullet);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (bullet) {\r\n\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.bulletsContainer.visible = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (!this.dataRangeInvalid) {\r\n\t\t\tthis.invalidateProcessedData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t * @param value  Exclude from calculations?\r\n\t */\r\n\tpublic set ignoreMinMax(value: boolean) {\r\n\t\tthis._ignoreMinMax = value;\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from calculations?\r\n\t */\r\n\tpublic get ignoreMinMax(): boolean {\r\n\t\treturn this._ignoreMinMax;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\r\n\t\t// A placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process axis range after it has been added to the list.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<AxisDataItem>[\"inserted\"]): void {\r\n\t\t// create container if not existing\r\n\t\tif (!this.rangesContainer) {\r\n\t\t\tthis.rangesContainer = this.createChild(Container);\r\n\t\t\tthis.rangesContainer.shouldClone = false;\r\n\t\t\tthis.rangesContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\tif (axisRange) {\r\n\t\t\taxisRange.contents.parent = this.rangesContainer;\r\n\t\t\taxisRange.isRange = true;\r\n\t\t\taxisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getAxisField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axis  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * IMPORTANT: This setting will work only when Series' base axis\r\n\t * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n\t * setting will be ignored, because it would be a huge overhead to measure\r\n\t * distance between each and every bullet.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Distance (px)\r\n\t */\r\n\tpublic set minBulletDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"minBulletDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get minBulletDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minBulletDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of bullets that will be added to each and every items in the\r\n\t * series.\r\n\t *\r\n\t * You can push any object that is a descendant of a [[Sprite]] here. All\r\n\t * items added to this list will be copied and used as a bullet on all data\r\n\t * items, including their properties, events, etc.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n\t * @return List of bullets.\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Sprite>(new Bullet());\r\n\t\t\tthis._bullets.template.virtualParent = this;\r\n\t\t\tthis._bullets.events.on(\"inserted\", this.processBullet, this, false);\r\n\t\t\tthis._bullets.events.on(\"removed\", this.removeBullet, this, false);\r\n\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Should the series be hidden in legend?\r\n\t *\r\n\t * @param value Hidden in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"hiddenInLegend\", value)) {\r\n\t\t\tif (this.chart) {\r\n\t\t\t\tthis.chart.feedLegend();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hidden in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.getPropertyValue(\"hiddenInLegend\");\r\n\t}\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value);\r\n\r\n\t\tlet legendDataItem = this.legendDataItem;\r\n\t\tif (legendDataItem) {\r\n\t\t\tlegendDataItem.component.invalidate();\r\n\t\t\tlegendDataItem.component.invalidateRawData();\r\n\t\t}\r\n\r\n\t\tthis.readerTitle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Screen reader text to be applied to each individual data item, such\r\n\t * as bullets, columns or slices.\r\n\t *\r\n\t * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n\t * `{valueY}`, etc.\r\n\t *\r\n\t * Any text formatting options, e.g. `[bold]` will be ignored.\r\n\t *\r\n\t * @param value Screen reader text template\r\n\t */\r\n\tpublic set itemReaderText(value: string) {\r\n\t\tthis._itemReaderText = value;\r\n\t\tthis._itemReaderTextChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Screen reader text template\r\n\t */\r\n\tpublic get itemReaderText(): string {\r\n\r\n\t\t// Get explicitly set reader text\r\n\t\tlet readerText = this._itemReaderText;\r\n\r\n\t\t// Not set? Let's try something else\r\n\t\tif (!readerText) {\r\n\r\n\t\t\t// Tooltip text?\r\n\t\t\tif (this.tooltipText) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipText);\r\n\t\t\t}\r\n\t\t\telse if (this.tooltipHTML) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipHTML);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn readerText;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"itemReaderText\", readerText);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if number of data items in the series are beyond non-focusable\r\n\t * count and should not be available for TAB-through.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Items focusable?\r\n\t */\r\n\tpublic itemsFocusable(): boolean {\r\n\t\treturn this.dataItems.length >= this.skipFocusThreshold ? false : true;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\t// if this series has legend item\r\n\t\tif (this.legendDataItem) {\r\n\r\n\t\t\tlet legendSettings: LegendSettings = this.legendSettings;\r\n\t\t\tlet legendDataItem = this.legendDataItem;\r\n\t\t\tlet label: Label = legendDataItem.label;\r\n\t\t\tlet valueLabel: Label = legendDataItem.valueLabel;\r\n\r\n\t\t\t// update legend\r\n\t\t\tif ((dataItem && !dataItem.isDisposed())|| notRange) {\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\t// if itemLabelText is set, means we have to reset label even if labelText is not set\r\n\t\t\t\t\tif (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.valueText || legendSettings.itemValueText != undefined) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tthis.bulletsContainer.copyFrom(source.bulletsContainer);\r\n\t\tthis.calculatePercent = source.calculatePercent;\r\n\t\tthis.usePercentHack = source.usePercentHack;\r\n\t\tthis.simplifiedProcessing = source.simplifiedProcessing;\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a modal or console message with error, and halts any further\r\n\t * processing of this element.\r\n\t *\r\n\t * @param e Error\r\n\t */\r\n\tpublic raiseCriticalError(e: Error) {\r\n\t\tif (this._chart && this._chart.modal) {\r\n\t\t\tthis._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\r\n\t\t\tthis._chart.modal.closable = false;\r\n\t\t\tif (!options.suppressErrors) {\r\n\t\t\t\tthis._chart.modal.open();\r\n\t\t\t}\r\n\t\t\tthis._chart.disabled = true;\r\n\t\t}\r\n\r\n\t\tif (options.verbose) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Applies filters to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyFilters() {\r\n\t\tsuper.applyFilters();\r\n\t\tthis.bulletsContainer.filters.clear();\r\n\r\n\t\t// copyFrom of a list copies, does not clone\r\n\t\t$iter.each(this.filters.iterator(), (filter) => {\r\n\t\t\tthis.bulletsContainer.filters.push(filter.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of heat rules to apply to series' elements based on the value\r\n\t * of the data item.\r\n\t *\r\n\t * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n\t * be applied to child objects of series, like columns, bullets, etc.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t * ```Javacript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t *```JSON\r\n\t *{\r\n\t *  // ...\r\n\t *  \"series\": [{\r\n\t *    \"type\": \"ColumnSeries\",\r\n\t *    \"heatRules\": [{\r\n\t *      \"target\": \"columns.template\",\r\n\t *      \"property\": \"fill\",\r\n\t *      \"min\": \"#F5DBCB\",\r\n\t *      \"max\": \"#ED7B84\",\r\n\t *      \"dataField\": \"valueY\"\r\n\t *    }]\r\n\t *  }]\r\n\t *}\r\n\t *```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n\t * @return  Heat rules\r\n\t */\r\n\r\n\tpublic get heatRules(): List<IHeatRule> {\r\n\t\tif (!this._heatRules) {\r\n\t\t\tthis._heatRules = new List<IHeatRule>();\r\n\t\t\tthis._heatRules.events.on(\"inserted\", (event) => {\r\n\t\t\t\tlet heatRule = event.newValue;\r\n\t\t\t\tlet target = heatRule.target;\r\n\r\n\t\t\t\tif (target) {\r\n\t\t\t\t\tlet dataField = heatRule.dataField;\r\n\r\n\t\t\t\t\tif (!$type.hasValue(dataField)) {\r\n\t\t\t\t\t\tdataField = \"value\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet seriesDataItem = this.dataItem;\r\n\t\t\t\t\tlet property = heatRule.property;\r\n\r\n\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\tif (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\tthis.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// giveup here\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.dataItems.template.events.on(\"workingvaluechanged\", (event) => {\r\n\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\tlet dataItem = event.target;\r\n\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t// givup here\r\n\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\r\n\t\t\t\t\ttarget.adapter.add(<any>property, (value, ruleTarget, property) => {\r\n\r\n\t\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\t\tlet min = heatRule.min;\r\n\t\t\t\t\t\tlet max = heatRule.max;\r\n\r\n\t\t\t\t\t\tif (ruleTarget instanceof Sprite) {\r\n\t\t\t\t\t\t\tlet anySprite = <any>ruleTarget;\r\n\t\t\t\t\t\t\tlet propertyField = anySprite.propertyFields[property];\r\n\t\t\t\t\t\t\tif (propertyField && ruleTarget.dataItem) {\r\n\t\t\t\t\t\t\t\tlet dataContext = <any>ruleTarget.dataItem.dataContext;\r\n\t\t\t\t\t\t\t\tif (dataContext && $type.hasValue(dataContext[propertyField])) {\r\n\t\t\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>ruleTarget.dataItem;\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(minValue)) {\r\n\t\t\t\t\t\t\tminValue = seriesDataItem.values[dataField].low;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\t\tmaxValue = seriesDataItem.values[dataField].high;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\tlet fieldValues = dataItem.values[dataField];\r\n\t\t\t\t\t\t\tif (fieldValues) {\r\n\t\t\t\t\t\t\t\tlet workingValue = dataItem.getActualWorkingValue(dataField);\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\r\n\r\n\t\t\t\t\t\t\t\t\tlet percent: number;\r\n\t\t\t\t\t\t\t\t\tif (heatRule.logarithmic) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tpercent = (workingValue - minValue) / (maxValue - minValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(workingValue) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = 0.5;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// fixes problems if all values are the same\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(min)) {\r\n\t\t\t\t\t\t\t\t\t\treturn min + (max - min) * percent;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (min instanceof Color) {\r\n\t\t\t\t\t\t\t\t\t\treturn new Color($colors.interpolate(min.rgb, max.rgb, percent));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this._heatRules;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tlet heatRules;\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up bullets\r\n\t\t\tif ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\r\n\t\t\t\tfor (let i = 0, len = config.bullets.length; i < len; i++) {\r\n\t\t\t\t\tlet bullets = config.bullets[i];\r\n\t\t\t\t\tif (!$type.hasValue(bullets.type)) {\r\n\t\t\t\t\t\tbullets.type = \"Bullet\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Let's take heatRules out of the config, so that we can process\r\n\t\t\t// them later, when bullets are already there\r\n\t\t\tif ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\r\n\t\t\t\theatRules = config.heatRules;\r\n\t\t\t\tdelete config.heatRules;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t\t// Process heat rules again, when all other elements are ready\r\n\t\tif (heatRules) {\r\n\t\t\tfor (let i = 0, len = heatRules.length; i < len; i++) {\r\n\t\t\t\tlet rule = heatRules[i];\r\n\r\n\t\t\t\t// Resolve target\r\n\t\t\t\tlet target: any = this;\r\n\t\t\t\tif ($type.hasValue(rule.target) && $type.isString(rule.target)) {\r\n\r\n\r\n\t\t\t\t\t// Check if we can find this element by id\r\n\t\t\t\t\tif (this.map.hasKey(rule.target)) {\r\n\t\t\t\t\t\ttarget = this.map.getKey(rule.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet parts = rule.target.split(\".\");\r\n\t\t\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\t\t\tif (target instanceof List) {\r\n\t\t\t\t\t\t\t\tlet listitem = target.getIndex($type.toNumber(parts[x]));\r\n\t\t\t\t\t\t\t\tif (!listitem) {\r\n\t\t\t\t\t\t\t\t\ttarget = (<any>target)[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = listitem;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tconst maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\r\n\t\t\t\t\t\t\t\tif (maybeIndex) {\r\n\t\t\t\t\t\t\t\t\tif (target[maybeIndex[1]] instanceof List) {\r\n\t\t\t\t\t\t\t\t\t\ttarget = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\ttarget = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = target[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trule.target = target;\r\n\r\n\t\t\t\t// Resolve colors and percents\r\n\t\t\t\tif ($type.hasValue(rule.min)) {\r\n\t\t\t\t\trule.min = this.maybeColorOrPercent(rule.min);\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.hasValue(rule.max)) {\r\n\t\t\t\t\trule.max = this.maybeColorOrPercent(rule.max);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig({\r\n\t\t\t\theatRules: heatRules\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns visibility value\r\n\t * @ignore\r\n\t */\r\n\t/*\r\n\t\tprotected getVisibility(): boolean {\r\n\t\t\tlet hidden = this.getPropertyValue(\"hidden\");\r\n\t\t\tif (hidden) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn super.getVisibility();\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"heatRules\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"heatRules\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Series\"] = Series;\r\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;\r\n", "/**\r\n * Serial chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { IListEvents, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Disposer, IDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SerialChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SerialChartDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SerialChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SerialChart]].\r\n */\r\nexport interface ISerialChartDataFields extends IChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SerialChart]]\r\n */\r\nexport interface ISerialChartProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * A set of colors to be used for chart elements, like Series, Slices, etc.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * A set of patterns to use for fills, like Series, Slices, etc.\r\n\t *\r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SerialChart]].\r\n */\r\nexport interface ISerialChartEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SerialChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISerialChartAdapters extends IChartAdapters, ISerialChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all series-based charts, like XY, Pie, etc.\r\n *\r\n * Is not useful on its own.\r\n *\r\n * @see {@link ISerialChartEvents} for a list of available Events\r\n * @see {@link ISerialChartAdapters} for a list of available Adapters\r\n */\r\nexport class SerialChart extends Chart {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ISerialChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISerialChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISerialChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISerialChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: Series;\r\n\r\n\t/**\r\n\t * Holds a list of [[Series]] displayed on the chart.\r\n\t */\r\n\tprotected _series: ListTemplate<this[\"_seriesType\"]>\r\n\r\n\t/**\r\n\t * Holds the reference to the container actual series are drawn in.\r\n\t */\r\n\tpublic readonly seriesContainer: Container;\r\n\r\n\t/**\r\n\t * Holds a reference to the container series' bullets are drawn in.\r\n\t */\r\n\tpublic readonly bulletsContainer: Container;\r\n\r\n\tprotected _exitDP: { [index: string]: IDisposer } = {};\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChart\";\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\r\n\t\tthis._usesData = false;\r\n\r\n\t\t// Create a container for series\r\n\t\tlet seriesContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tseriesContainer.shouldClone = false;\r\n\t\tseriesContainer.width = percent(100);\r\n\t\tseriesContainer.height = percent(100);\r\n\t\tseriesContainer.isMeasured = false;\r\n\t\tseriesContainer.layout = \"none\";\r\n\t\tseriesContainer.zIndex = 2;\r\n\t\tthis.seriesContainer = seriesContainer;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet bulletsContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.zIndex = 3;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this.colors) {\r\n\t\t\tthis.colors.dispose();\r\n\t\t}\r\n\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Serial chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's series.\r\n\t *\r\n\t * @return Chart's series\r\n\t */\r\n\tpublic get series(): ListTemplate<this[\"_seriesType\"]> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new ListTemplate<this[\"_seriesType\"]>(this.createSeries());\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._series, false));\r\n\t\t\tthis._disposers.push(this._series.template);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<Series>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(series);\r\n\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\tdataUser.invalidateDataItems();\r\n\t\t})\r\n\r\n\t\tif (this._exitDP[series.uid]) {\r\n\t\t\tthis._exitDP[series.uid].dispose();\r\n\t\t\tdelete this._exitDP[series.uid];\r\n\t\t}\r\n\r\n\t\tif (series.autoDispose) {\r\n\t\t\tseries.dispose();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tseries.parent = undefined;\r\n\t\t\tseries.bulletsContainer.parent = undefined;\r\n\t\t}\r\n\t\t//this.feedLegend();\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet dataItems = this.legend.dataItems;\r\n\t\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem && dataItem.dataContext == series) {\r\n\t\t\t\t\tlegend.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = legend.data.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet di = legend.data[i];\r\n\t\t\t\tif (di && di == series) {\r\n\t\t\t\t\t$array.remove(legend.data, di);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<Series>[\"inserted\"]): void {\r\n\t\tlet series: Series = event.newValue;\r\n\t\tif (series.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tseries.chart = this;\r\n\t\tseries.parent = this.seriesContainer;\r\n\r\n\t\tseries.bulletsContainer.parent = this.bulletsContainer;\r\n\r\n\t\tthis._dataUsers.moveValue(series);\r\n\t\tseries.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(series);\r\n\t\t}))\r\n\r\n\t\tthis.handleSeriesAdded2(series);\r\n\t\tthis.handleLegendSeriesAdded(series);\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series: Series) {\r\n\t\tif (!series.hiddenInLegend) {\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.addData(series);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2(series: Series) {\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\tthis._exitDP[series.uid] = registry.events.once(\"exitframe\", () => {\r\n\t\t\t\tif (!series.data || series.data.length == 0) {\r\n\t\t\t\t\tseries.data = this.data;\r\n\t\t\t\t\tif (series.showOnInit) {\r\n\t\t\t\t\t\tseries.reinit()\r\n\t\t\t\t\t\tseries.setPropertyValue(\"showOnInit\", false);\r\n\t\t\t\t\t\tseries.showOnInit = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!series.isDisposed()) {\r\n\t\t\t\t\t\tseries.events.once(\"datavalidated\", () => {\r\n\t\t\t\t\t\t\tif (series.data == this.data) {\r\n\t\t\t\t\t\t\t\t(<any>series)._data = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tthis._disposers.push(this._exitDP[series.uid]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for this chart type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new Series();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's color list.\r\n\t *\r\n\t * This list can be used by a number of serial items, like applying a new\r\n\t * color for each Series added. Or, applying a new color for each slice\r\n\t * of a Pie chart.\r\n\t *\r\n\t * Please see [[ColorSet]] for information on how you can set up to generate\r\n\t * unique colors.\r\n\t *\r\n\t * A theme you are using may override default pre-defined colors.\r\n\t *\r\n\t * @param value Color list\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color list\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[SerialChart]].\r\n\t *\r\n\t * @param source Source SerialChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.series.copyFrom(source.series);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n\t */\r\n\tpublic appear() {\r\n\t\tsuper.appear();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.showOnInit && series.inited) {\r\n\t\t\t\tseries.appear();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;\r\n", "/**\r\n * Axis break module\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { IWavedShape } from \"../../core/defs/IWavedShape\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t */\r\n\tbreakSize?: number;\r\n\r\n\t/**\r\n\t * Starting value.\r\n\t */\r\n\tstartValue?: number;\r\n\r\n\t/**\r\n\t * End value.\r\n\t */\r\n\tendValue?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines [[AxisBreak]] adapters.\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisBreakAdapters extends IContainerAdapters, IAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisBreak extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: Axis;\r\n\r\n\t/**\r\n\t * Reference to parent Axis.\r\n\t */\r\n\tprotected _axis = new MutableValueDisposer<this[\"_axisType\"]>();\r\n\r\n\t/**\r\n\t * A reference to starting line element.\r\n\t */\r\n\tprotected _startLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to ending line element.\r\n\t */\r\n\tprotected _endLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to fill shape.\r\n\t */\r\n\tprotected _fillShape: IWavedShape;\r\n\r\n\t/**\r\n\t * A list of axis data items which fall within this break.\r\n\t */\r\n\tpublic dataItems: List<AxisDataItem> = new List<AxisDataItem>();\r\n\r\n\t/**\r\n\t * Adjusted start value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedStartValue: number;\r\n\r\n\t/**\r\n\t * Adjusted end value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedEndValue: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisBreak\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.breakSize = 0.01;\r\n\t\tthis.marginLeft = -5;\r\n\t\tthis.marginRight = -5;\r\n\t\tthis.marginTop = -5;\r\n\t\tthis.marginBottom = -5;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create elements\r\n\t\t// (these won't be used actually, just for setting properties)\r\n\t\tlet fillShape = new WavedLine();\r\n\t\tfillShape.fill = interfaceColors.getFor(\"background\");\r\n\t\tfillShape.stroke = color();\r\n\t\tfillShape.fillOpacity = 0.9;\r\n\t\tfillShape.zIndex = 0;\r\n\t\tthis._fillShape = fillShape;\r\n\r\n\t\tlet startLine = new WavedLine();\r\n\t\tstartLine.fill = color();\r\n\t\tstartLine.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tstartLine.strokeOpacity = 0.3;\r\n\t\tstartLine.zIndex = 1;\r\n\t\tthis._startLine = startLine;\r\n\r\n\t\tlet endLine = new WavedLine();\r\n\t\tendLine.fill = color();\r\n\t\tendLine.stroke = color(\"#000000\");// interfaceColors.getFor(\"grid\");\r\n\t\tendLine.strokeOpacity = 0.3;\r\n\t\tendLine.zIndex = 2;\r\n\t\tthis._endLine = endLine;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the starting line of the break.\r\n\t *\r\n\t * @param sprite  Element\r\n\t */\r\n\tpublic set startLine(sprite: IWavedShape) {\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\t\tthis._startLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get startLine(): IWavedShape {\r\n\t\treturn this._startLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the end line of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set endLine(sprite: IWavedShape) {\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t\tthis._endLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get endLine(): IWavedShape {\r\n\t\treturn this._endLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for fill of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set fillShape(sprite: IWavedShape) {\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tthis._fillShape = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get fillShape(): IWavedShape {\r\n\t\treturn this._fillShape;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a break element (e.g. lines, fill) to the break, which is\r\n\t * [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite Element to add\r\n\t */\r\n\tpublic addBreakSprite(sprite: IWavedShape) {\r\n\t\tsprite.parent = this;\r\n\t\tsprite.isMeasured = false;\r\n\t\tthis._disposers.push(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis this Break is associated with.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: this[\"_axisType\"]) {\r\n\t\tif (this._axis.get() !== axis) {\r\n\t\t\tthis._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\r\n\t\t\taxis.renderer.createBreakSprites(this);\r\n\r\n\t\t\t// this can't go to copyFrom, as axis is set later\r\n\t\t\tlet breakTemplate: AxisBreak = axis.axisBreaks.template;\r\n\r\n\t\t\tthis.startLine.copyFrom(breakTemplate.startLine);\r\n\t\t\tthis.endLine.copyFrom(breakTemplate.endLine);\r\n\t\t\tthis.fillShape.copyFrom(breakTemplate.fillShape);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): this[\"_axisType\"] {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t * @param value  Relative axis break\r\n\t */\r\n\tpublic set breakSize(value: number) {\r\n\t\tif (this.setPropertyValue(\"breakSize\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative axis break\r\n\t */\r\n\tpublic get breakSize(): number {\r\n\t\treturn this.getPropertyValue(\"breakSize\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's start.\r\n\t *\r\n\t * @return Start point\r\n\t */\r\n\tpublic get startPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.startPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's end.\r\n\t *\r\n\t * @return End point\r\n\t */\r\n\tpublic get endPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.endPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break starts.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break ends.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\t\trenderer.updateBreakElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A starting value for the break.\r\n\t *\r\n\t * @param value  Starting value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Starting value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\treturn this.getPropertyValue(\"startValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * An end value for the break.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.getPropertyValue(\"endValue\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;\r\n", "/**\r\n * Base class for all Axis\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem, IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\n\r\n// Charts\r\nimport { Chart } from \"../Chart\";\r\n\r\n// Series\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\n\r\n// Elements\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Tooltip, PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { PointedRectangle } from \"../../core/elements/PointedRectangle\";\r\n\r\n// Types\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n// Utils\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Axis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class AxisDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Reference to a related [[Grid]] element.\r\n\t */\r\n\tprotected _grid: Grid;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisTick]] element.\r\n\t */\r\n\tprotected _tick: AxisTick;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisLabel]] element.\r\n\t */\r\n\tprotected _label: AxisLabel;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisFill]] element.\r\n\t */\r\n\tprotected _axisFill: AxisFill;\r\n\r\n\t/**\r\n\t * A mask for axis. We're using [[AxisFill]] since the mask, basically, has\r\n\t * the same shape and features.\r\n\t */\r\n\tprotected _mask: AxisFill;\r\n\r\n\t/**\r\n\t * Container which might be used to hold some extra items, like series\r\n\t * segments when data item is used for axis range.\r\n\t */\r\n\tprotected _contents: Container;\r\n\r\n\t/**\r\n\t * A text to be used as label for this data item.\r\n\t */\r\n\tprotected _text: string;\r\n\r\n\t/**\r\n\t * Holds a physical position of the grid line associated with this data item,\r\n\t * so that it can be used when measuring distance between points, and hiding\r\n\t * some of them so they don't overlap.\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * If the data item is within an existing [[AxisBreak]] this property will\r\n\t * hold a reference to that [[AxisBreak]].\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Axis;\r\n\r\n\t/**\r\n\t * Used to distinguish from real data points and those data items that are\r\n\t * used for ranges, like `series.axisRanges` or `axis.axisRanges`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic isRange: boolean;\r\n\r\n\t/**\r\n\t * relative position of data item on axis\r\n\t */\r\n\tpublic position: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullet: Sprite;\r\n\r\n\t/**\r\n\t * Allows hiding axis item (tick, label, grid) if it is closer to axis\r\n\t * beginning than this relative position (0-1).\r\n\t *\r\n\t * For axis labels it overrides `minLabelPosition` if set.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t * axis.dataItems.template.minPosition = 0.2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t * axis.dataItems.template.minPosition = 0.2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t *     \"dataItems\": {\r\n\t *       \"minPosition\": 0.2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * \r\n\t * @since 4.5.11\r\n\t */\r\n\tpublic minPosition?: number;\r\n\r\n\t/**\r\n\t * Allows hiding axis item (tick, label, grid) if it is closer to axis\r\n\t * end than this relative position (0-1).\r\n\t *\r\n\t * For axis labels it overrides `maxLabelPosition` if set.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Hide all ticks and labels closer than 20% to axis end.\r\n\t * axis.dataItems.template.maxPosition = 0.8;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Hide all ticks and labels closer than 20% to axis end.\r\n\t * axis.dataItems.template.maxPosition = 0.8;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     // Hide all ticks and labels closer than 20% to axis end.\r\n\t *     \"dataItems\": {\r\n\t *       \"maxPosition\": 0.8\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * \r\n\t * @since 4.5.11\r\n\t */\r\n\tpublic maxPosition?: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Actual index of the axis data item.\r\n\t * \r\n\t * @since 4.7.8\r\n\t */\r\n\tpublic itemIndex: number;\r\n\r\n\t/**\r\n\t * A [[Grid]] element associated with this data item.\r\n\t *\r\n\t * If there is no grid element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param grid  Grid element\r\n\t */\r\n\tpublic set grid(grid: Grid) {\r\n\t\tif (this._grid && this._grid != grid) {\r\n\t\t\t$array.remove(this.sprites, this._grid);\r\n\t\t\tthis._grid.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (grid) {\r\n\t\t\tif (grid.dataItem && grid.dataItem != this) {\r\n\t\t\t\t$array.remove(grid.dataItem.sprites, grid);\r\n\t\t\t\tgrid.dataItem.grid = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(grid);\r\n\t\t}\r\n\t\tthis._grid = grid;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grid element\r\n\t */\r\n\tpublic get grid(): Grid {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: Grid;\r\n\t\t\t\tlet grid: Grid;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.grid;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.grid.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = component.renderer.grid.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.grid.removeValue(grid);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.grid = grid;\r\n\t\t\t\tgrid.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(grid);\r\n\t\t\t\tgrid.axis = this.component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisTick]] element associated with this data item.\r\n\t *\r\n\t * If there is no tick element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param tick  Tick element\r\n\t */\r\n\tpublic set tick(tick: AxisTick) {\r\n\t\tif (this._tick && this._tick != tick) {\r\n\t\t\t$array.remove(this.sprites, this._tick);\r\n\t\t\tthis._tick.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (tick) {\r\n\t\t\tif (tick.dataItem && tick.dataItem != this) {\r\n\t\t\t\t$array.remove(tick.dataItem.sprites, tick);\r\n\t\t\t\ttick.dataItem.tick = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(tick);\r\n\t\t}\r\n\t\tthis._tick = tick;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): AxisTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisTick;\r\n\t\t\t\tlet tick: AxisTick;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.tick;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.ticks.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = component.renderer.ticks.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.ticks.removeValue(tick);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tick = tick;\r\n\t\t\t\ttick.axis = this.component;\r\n\t\t\t\ttick.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(tick);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisLabel]] element associated with this data item.\r\n\t *\r\n\t * If there is no label element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set label(label: AxisLabel) {\r\n\t\tif (this._label && this._label != label) {\r\n\t\t\t$array.remove(this.sprites, this._label);\r\n\t\t\tthis._label.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (label) {\r\n\t\t\tif (label.dataItem && label.dataItem != this) {\r\n\t\t\t\t$array.remove(label.dataItem.sprites, label);\r\n\t\t\t\tlabel.dataItem.label = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(label);\r\n\t\t}\r\n\t\tthis._label = label;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): AxisLabel {\r\n\t\tif (!this._label) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisLabel;\r\n\t\t\t\tlet label: AxisLabel;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.label;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.labels.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = component.renderer.labels.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.labels.removeValue(label);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposers.push(label);\r\n\t\t\t\tthis.label = label;\r\n\t\t\t\tlabel.shouldClone = false;\r\n\t\t\t\tlabel.axis = this.component;\r\n\t\t\t\tlabel.virtualParent = component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisFill]] associated element with this data item.\r\n\t *\r\n\t * If there is no fill element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set axisFill(axisFill: AxisFill) {\r\n\t\tif (this._axisFill && this._axisFill != axisFill) {\r\n\t\t\t$array.remove(this.sprites, this._axisFill);\r\n\t\t\tthis._axisFill.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.dataItem && axisFill.dataItem != this) {\r\n\t\t\t\t$array.remove(axisFill.dataItem.sprites, axisFill);\r\n\t\t\t\taxisFill.dataItem.axisFill = undefined;\r\n\t\t\t}\r\n\t\t\taxisFill.axis = this.component;\r\n\t\t\tthis.addSprite(axisFill);\r\n\t\t}\r\n\t\tthis._axisFill = axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get axisFill(): AxisFill {\r\n\t\tif (!this._axisFill) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisFill;\r\n\t\t\t\tlet axisFill: AxisFill;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.axisFill;\r\n\t\t\t\t\tif (!this.isTemplate && template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.axisFills.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = component.renderer.axisFills.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.axisFills.removeValue(axisFill);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.axisFill = axisFill;\r\n\t\t\t\taxisFill.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(axisFill);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * Text to be used as data item's label.\r\n\t *\r\n\t * @param text Text label\r\n\t */\r\n\tpublic set text(text: string) {\r\n\t\tthis._text = text;\r\n\t\tif (this._label) { // do not use getter, it will create unwanted instances!\r\n\t\t\tthis._label.text = text;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Text label\r\n\t */\r\n\tpublic get text(): string {\r\n\t\treturn this._text;\r\n\t}\r\n\r\n\t/**\r\n\t * Data item's mask.\r\n\t *\r\n\t * @return Mask\r\n\t */\r\n\tpublic get mask(): AxisFill {\r\n\t\treturn this._mask;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[Container]] to place all visual elements, related to data item\r\n\t * in.\r\n\t *\r\n\t * If there is no Container, a new one is created.\r\n\t *\r\n\t * @return Contents container\r\n\t */\r\n\tpublic get contents(): Container {\r\n\t\tif (!this._contents) {\r\n\t\t\tlet contents = new Container();\r\n\t\t\tthis.addSprite(contents);\r\n\t\t\tcontents.isMeasured = false;\r\n\t\t\tthis._contents = contents;\r\n\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\t\t\t\tlet mask: AxisFill = component.renderer.createFill(this.component);\r\n\t\t\t\tmask.disabled = false;\r\n\t\t\t\tmask.axis = component;\r\n\t\t\t\tthis.addSprite(mask);\r\n\t\t\t\tthis._mask = mask;\r\n\t\t\t\tcontents.mask = mask;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._contents;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisBreak]] this data item falls within.\r\n\t *\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic set axisBreak(axisBreak: this[\"_axisBreak\"]) {\r\n\t\tif (this._axisBreak) {\r\n\t\t\tthis._axisBreak.dataItems.removeValue(this);\r\n\t\t}\r\n\t\tif (axisBreak) {\r\n\t\t\taxisBreak.dataItems.push(this);\r\n\t\t}\r\n\t\tthis._axisBreak = axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis break\r\n\t */\r\n\tpublic get axisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn this._axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.validateDataElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Appends data item's elements to the parent [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic appendChildren() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.appendDataItem(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if data item has particular property set.\r\n\t *\r\n\t * @param prop  Property name\r\n\t * @return Property set?\r\n\t */\r\n\tprotected hasProperty(prop: string): boolean {\r\n\t\treturn prop == \"component\" ? true : super.hasProperty(prop);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[AxisDataItem]].\r\n\t *\r\n\t * @param source Source AxisDataItem\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.text = source.text;\r\n\t\tif (source.bullet) {\r\n\t\t\tthis.bullet = source.bullet.clone();\r\n\t\t}\r\n\r\n\t\tthis.minPosition = source.minPosition;\r\n\t\tthis.maxPosition = source.maxPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t\tif (this._contents) {\r\n\t\t\tthis._contents.visible = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set it to an instance of any [[Sprite]]. It will be displayed as an axis\r\n\t * bullet in the middle of the cell, or specific value.\r\n\t *\r\n\t * If you need position bullet relatively to the cell, use [[AxisBullet]]\r\n\t * instead. It has a `location` property which can be used to indicate\r\n\t * precise relative location within cell/range.\r\n\t *\r\n\t * Also, [[AxisBullet]] is a [[Container]] so you can push any other element\r\n\t * into it.\r\n\t *\r\n\t * NOTE: `location` is relative to the parent axis range's scope, i.e.\r\n\t * between its `date` and `endDate` for [[DateAxis]], or `value`/`endValue`\r\n\t * ([[ValueAxis]]), or `category`/`endCategory` ([[categoryAxis]]).\r\n\t * \r\n\t * ```TypeScript\r\n\t * let range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * \r\n\t * let flag = new am4plugins_bullets.FlagBullet();\r\n\t * flag.label.text = \"Hello\";\r\n\t *\r\n\t * range.bullet = flag;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * \r\n\t * var flag = new am4plugins_bullets.FlagBullet();\r\n\t * flag.label.text = \"Hello\";\r\n\t *\r\n\t * range.bullet = flag;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     // ...\r\n\t *     \"axisRanges\": [{\r\n\t *       \"date\": new Date(2018, 0, 5),\r\n\t *       \"bullet: {\r\n\t *         \"type\": \"FlagBullet\",\r\n\t *         \"label\": {\r\n\t *           \"text\": \"Hello\"\r\n\t *         }\r\n\t *       }\r\n\t *     }]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.5.9\r\n\t * @param  value  Bullet\r\n\t */\r\n\tpublic set bullet(value: Sprite) {\r\n\t\tif (this._bullet && this._bullet != value) {\r\n\t\t\t$array.remove(this.sprites, this._bullet);\r\n\t\t\tthis._bullet.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tthis._bullet = value;\r\n\t\tif (value) {\r\n\t\t\tthis.addSprite(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bullet\r\n\t */\r\n\tpublic get bullet(): Sprite {\r\n\t\treturn this._bullet;\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[AxisDataItem]]\r\n * Includes both the [[DataItemAdapter]] definitions and properties\r\n * @see {@link DataItemAdapter}\r\n */\r\nexport interface IAxisDataItemAdapters extends IDataItemAdapters {\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines named positions for data item's location within [[Axis]].\r\n */\r\nexport enum AxisItemLocation {\r\n\tStart = 0,\r\n\tMiddle = 0.5,\r\n\tEnd = 1\r\n}\r\n\r\n/**\r\n * Defines data fields for [[Axis]].\r\n */\r\nexport interface IAxisDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Axis]].\r\n */\r\nexport interface IAxisProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - None of the first cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the first cell is shown.\r\n\t * * 1 - Full first cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tendLocation?: number;\r\n\r\n\t/**\r\n\t * Indicates if cusor's tooltip should be shown on this Axis.\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n\t * and vice versa: when axis is zoomed out completely, zoom out button is\r\n\t * hidden.\r\n\t *\r\n\t * Setting this to `false` will disable this behavior. Zooming in our out\r\n\t * this axis will not reveal or hide zoom out button.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\ttoggleZoomOutButton?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if axis' tooltip should be hidden while axis range is animating\r\n\t * (zooming)\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @default true\r\n\t */\r\n\thideTooltipWhileZooming?: boolean;\r\n\r\n\r\n\tzoomable?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Axis]].\r\n */\r\nexport interface IAxisEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * Invoked when available axis lenght changes, e.g. after resizing the whole\r\n\t * chart.\r\n\t */\r\n\tlengthchanged: {}\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Axis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisAdapters extends IComponentAdapters, IAxisProperties {\r\n\t/**\r\n\t * Applied to the tooltip text before it is shown.\r\n\t */\r\n\tgetTooltipText: string;\r\n\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Axis elements.\r\n *\r\n * @see {@link IAxisEvents} for a list of available Events\r\n * @see {@link IAxisAdapters} for a list of available Adapters\r\n */\r\nexport class Axis<T extends AxisRenderer = AxisRenderer> extends Component {\r\n\r\n\t/**\r\n\t * Defines list of data fields.\r\n\t */\r\n\tpublic _dataFields: IAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the [[DataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A list of Axis Ranges.\r\n\t */\r\n\tprotected _axisRanges: ListTemplate<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisEvents;\r\n\r\n\t/**\r\n\t * A [[Label]] instance that is used for Axis title label.\r\n\t */\r\n\tprotected _title: Label;\r\n\r\n\t/**\r\n\t * \"X\", \"Y\", etc.\r\n\t *\r\n\t * This is needed so that Axis knows which of the values from series' data\r\n\t * items it should use.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisLetter: string;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tprotected _chart: Chart;\r\n\r\n\t/**\r\n\t * A type for renderer used for this Axis.\r\n\t */\r\n\tpublic _renderer: T;\r\n\r\n\t/**\r\n\t * Number of Grid elements on the axis.\r\n\t */\r\n\tprotected _gridCount: number = 10;\r\n\r\n\t/**\r\n\t * A list of [[XYSeries]] that are using this Axis.\r\n\t */\r\n\tprotected _series: List<XYSeries> = new List<XYSeries>();\r\n\r\n\t/**\r\n\t * Holds the length of the Axis, so that we can check if it changed after\r\n\t * other changes and we need to update layouts.\r\n\t */\r\n\tprotected _prevLength: number;\r\n\r\n\t/**\r\n\t * A list of Axis Breaks associated with this Axis.\r\n\t */\r\n\tprotected _axisBreaks: SortedListTemplate<this[\"_axisBreak\"]>;\r\n\r\n\t/**\r\n\t * A reference to the Iterator for Axis' data items.\r\n\t */\r\n\tprotected _dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A name of the data field this Axis looks for its data in, e.g. \"category\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisFieldName: string;\r\n\r\n\t// we save these values so that cursur could use them if axis line is a fill\r\n\r\n\t/**\r\n\t * [currentItemStartPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemStartPoint: IPoint;\r\n\r\n\t/**\r\n\t * [currentItemEndPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemEndPoint: IPoint;\r\n\r\n\tprotected _tooltipPosition: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic relativePositionSprite?: Sprite;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem and its index as\r\n\t * parameters.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t *\r\n\t * For example, you can set it up to highlight only weekends on a\r\n\t * [[DateAxis]].\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"], index?: number): void {\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = dataItem.index;\r\n\t\t}\r\n\t\tif (index / 2 == Math.round(index / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\tdataItem.axisFill.opacity = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.opacity = 1;\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Full length of the axis, in pixels.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisFullLength: number;\r\n\r\n\t/**\r\n\t * Ghost label is used to prevent chart shrinking/expanding when zooming or\r\n\t * when data is invalidated. You can set custom text on it so that it would\r\n\t * be bigger/smaller,\r\n\t */\r\n\tpublic ghostLabel: AxisLabel;\r\n\r\n\t/**\r\n\t * Specifies if axis should be automatically disposed when removing from\r\n\t * chart's axis list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _axisItemCount: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tif (this.constructor === Axis) {\r\n\t\t\tthrow new Error(\"'Axis' cannot be instantiated directly. Please use a specific axis type.\");\r\n\t\t}\r\n\r\n\t\tthis.hideTooltipWhileZooming = true;\r\n\t\tthis.minWidth = 0.0001;\r\n\t\tthis.minHeight = 0.0001;\r\n\t\tthis.className = \"Axis\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", true);\r\n\t\tthis.toggleZoomOutButton = true;\r\n\t\tthis.zoomable = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create title\r\n\t\tthis.title = new Label();\r\n\t\tthis.title.shouldClone = false;\r\n\t\tthis._disposers.push(this.title);\r\n\t\tthis.setPropertyValue(\"startLocation\", 0);\r\n\t\tthis.setPropertyValue(\"endLocation\", 1);\r\n\r\n\t\t// Data item iterator\r\n\t\tthis._dataItemsIterator = new $iter.ListIterator<this[\"_dataItem\"]>(this.dataItems, () => this.dataItems.create());\r\n\t\tthis._dataItemsIterator.createNewItems = true;\r\n\r\n\t\t// Create tooltip\r\n\t\tlet tooltip: Tooltip = new Tooltip();\r\n\t\tthis._disposers.push(tooltip);\r\n\t\ttooltip.label.padding(5, 10, 5, 10);\r\n\t\ttooltip.background.pointerLength = 5;\r\n\t\ttooltip.fitPointerToBounds = true;\r\n\t\ttooltip.background.filters.clear();\r\n\r\n\t\t// Set virtual parentfor the tooltip so that it can properly inheirt\r\n\t\t// formatters from the axis.\r\n\t\ttooltip.virtualParent = this;\r\n\r\n\t\t// Create background element for the tooltip\r\n\t\tlet background: PointedRectangle = <PointedRectangle>tooltip.background;\r\n\t\tbackground.cornerRadius = 0;\r\n\t\tbackground.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tbackground.stroke = background.fill;\r\n\t\tbackground.strokeWidth = 1;\r\n\t\tbackground.fillOpacity = 1;\r\n\t\ttooltip.label.fill = interfaceColors.getFor(\"alternativeText\");\r\n\r\n\t\tthis.tooltip = tooltip;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.readerHidden = true;\r\n\r\n\t\tthis.events.on(\"rangechangestarted\", () => {\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.hideTooltipWhileZooming) {\r\n\t\t\t\t\tseries.tooltip.hide();\r\n\t\t\t\t\tseries.tooltip.preventShow = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (this.hideTooltipWhileZooming) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t\tthis.tooltip.preventShow = true;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.events.on(\"rangechangeended\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.hideTooltipWhileZooming) {\r\n\t\t\t\t\tseries.tooltip.hide();\r\n\t\t\t\t\tseries.tooltip.preventShow = false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (this.hideTooltipWhileZooming) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t\tthis.tooltip.preventShow = false;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new AxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates layout.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLayout(): void {\r\n\t\tsuper.invalidateLayout();\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidateLayout();\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates series of this axis.\r\n\t */\r\n\tpublic invalidateSeries(): void {\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Override to cancel super call for data element validation.\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tthis._axisItemCount = 0;\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tthis.renderer.updateLabelElement(this.ghostLabel, this.start, this.end);\r\n\t\t\tthis.ghostLabel.validate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the number of grid items on the axis.\r\n\t */\r\n\tprotected updateGridCount() {\r\n\t\tif (this.renderer) {\r\n\t\t\tlet gridCount = this.axisLength / this.renderer.minGridDistance;\r\n\t\t\tif (gridCount != this._gridCount) {\r\n\t\t\t\tthis._gridCount = gridCount;\r\n\t\t\t\tthis.clearCache();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\r\n\t\tthis.axisFullLength = this.axisLength / (this.end - this.start);\r\n\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateGridCount();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\trenderer.updateAxisLine();\r\n\t\t\trenderer.updateTooltip();\r\n\t\t\trenderer.updateBaseGridElement();\r\n\t\t}\r\n\r\n\t\tif (this._prevLength != this.axisLength) {\r\n\t\t\tthis.dispatchImmediately(\"lengthchanged\");\r\n\t\t\tthis._prevLength = this.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a data item to the Axis.\r\n\t *\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic appendDataItem(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\r\n\t\tlet tick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\tif (tick.above) {\r\n\t\t\t\ttick.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.label) {\r\n\t\t\tdataItem.label.parent = renderer;\r\n\t\t}\r\n\r\n\t\tlet axisFill = dataItem.axisFill;\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.above) {\r\n\t\t\t\taxisFill.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\taxisFill.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\tif (grid.above) {\r\n\t\t\t\tgrid.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgrid.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\tdataItem.bullet.parent = renderer.bulletsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws Axis' related items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.validateLayout();\r\n\r\n\t\tthis.renderer.updateGridContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Redars Axis ranges.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateAxisRanges(): void {\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tthis.appendDataItem(axisRange);\r\n\t\t\tthis.validateDataElement(axisRange);\r\n\t\t\tif (axisRange.grid) {\r\n\t\t\t\taxisRange.grid.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.tick) {\r\n\t\t\t\taxisRange.tick.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.axisFill) {\r\n\t\t\t\taxisRange.axisFill.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.label) {\r\n\t\t\t\taxisRange.label.validate();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis breaks, so they are redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateBreaks(): void {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\t$iter.each(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\taxisBreak.invalidate();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Associates an Axis break with this Axis, after it is inserted into\r\n\t * `axisBreaks`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic processBreak(event: IListEvents<this[\"_axisBreak\"]>[\"inserted\"]) {\r\n\t\tlet axisBreak: this[\"_axisBreak\"] = event.newValue;\r\n\t\taxisBreak.parent = this.renderer.breakContainer;\r\n\t\taxisBreak.axis = this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a [[XYSeries]] element with this Axis.\r\n\t *\r\n\t * Returns a [[Disposer]] for all events, added to Series for watching\r\n\t * changes in Axis, and vice versa.\r\n\t * @ignore\r\n\t * @param series  Series\r\n\t * @return Event disposer\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\tthis.series.moveValue(series);\r\n\r\n\t\treturn new MultiDisposer([\r\n\t\t\tnew Disposer(() => {\r\n\t\t\t\tthis.series.removeValue(series);\r\n\t\t\t}),\r\n\r\n\t\t\tthis.events.on(\"lengthchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"lengthchanged\", series.createMask, series, false),\r\n\t\t\tthis.events.on(\"startchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"endchanged\", series.invalidate, series, false),\r\n\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\t\t\t\r\n\r\n\t\t\t// TODO should these be disposed of ?\r\n\t\t\t//series.events.on(\"datavalidated\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"visibilitychanged\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"hidden\", this.processSeriesDataItems, this)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisRenderer]] to be used to render this Axis.\r\n\t *\r\n\t * Please note that most of the settings, related to Axis' appearance are set\r\n\t * via its renderer. Not directly on the Axis.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info\r\n\t * @param renderer  Renderer\r\n\t */\r\n\tpublic set renderer(renderer: this[\"_renderer\"]) {\r\n\t\tif (renderer != this._renderer) {\r\n\t\t\tthis._renderer = renderer;\r\n\t\t\trenderer.chart = this.chart;\r\n\t\t\trenderer.axis = this;\r\n\t\t\trenderer.parent = this;\r\n\t\t\tthis.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only\r\n\t\t\tthis.initRenderer();\r\n\r\n\t\t\tthis._disposers.push(renderer.gridContainer.events.on(\"maxsizechanged\", this.invalidate, this, false));\r\n\r\n\t\t\tlet ghostLabel = this.renderer.labels.create();\r\n\t\t\tthis._disposers.push(ghostLabel);\r\n\t\t\tghostLabel.dataItem = this.dataItems.template.clone(); // just for the adapters not to fail\r\n\t\t\tghostLabel.text = \"L\";\r\n\t\t\tghostLabel.parent = this.renderer;\r\n\t\t\tghostLabel.shouldClone = false;\r\n\t\t\tghostLabel.fillOpacity = 0;\r\n\t\t\tghostLabel.opacity = 0;\r\n\t\t\tghostLabel.strokeOpacity = 0;\r\n\t\t\tghostLabel.interactionsEnabled = false;\r\n\t\t\tghostLabel.validate();\r\n\r\n\t\t\tthis.ghostLabel = ghostLabel;\r\n\r\n\t\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\t\tghostLabel.text = \"L\";\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Renderer\r\n\t */\r\n\tpublic get renderer(): this[\"_renderer\"] {\r\n\t\treturn this._renderer;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a relative position to angle. (for circular axes)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\treturn this.renderer.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\treturn this.renderer.pointToPosition(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position to coordinate.\r\n\t *\r\n\t * @since 4.7.15\r\n\t * @param position (0-1)\r\n\t * @return coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\treturn this.renderer.positionToCoordinate(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start  [description]\r\n\t * @param end    [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: any, end: any): string {\r\n\t\treturn this.renderer.getPositionRangePath(start, end);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic anyToPosition(value: any): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: any): IOrientationPoint {\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition [description]\r\n\t * @param endPosition   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tif (this.renderer) {\r\n\t\t\treturn this.renderer.getPositionRangePath(startPosition, endPosition);\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Actual axis length in pixels.\r\n\t *\r\n\t * @return Axis length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tif (this.renderer) {\r\n\t\t\treturn this.renderer.axisLength;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if axis should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"cursorTooltipEnabled\", value)) {\r\n\t\t\tif (value && this.renderer) {\r\n\t\t\t\tthis.renderer.updateTooltip();\r\n\t\t\t}\r\n\t\t\telse if (this.tooltip) {\r\n\t\t\t\tthis.tooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n\t * and vice versa: when axis is zoomed out completely, zoom out button is\r\n\t * hidden.\r\n\t *\r\n\t * Setting this to `false` will disable this behavior. Zooming in our out\r\n\t * this axis will not reveal or hide zoom out button.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.6.2\r\n\t * @param  value  Toggle zoom out button?\r\n\t */\r\n\tpublic set toggleZoomOutButton(value: boolean) {\r\n\t\tthis.setPropertyValue(\"toggleZoomOutButton\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Toggle zoom out button?\r\n\t */\r\n\tpublic get toggleZoomOutButton(): boolean {\r\n\t\treturn this.getPropertyValue(\"toggleZoomOutButton\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip(duration?: number): void {\r\n\t\tsuper.hideTooltip(duration);\r\n\t\tthis._tooltipPosition = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\r\n\t\tif (!tooltip || this.dataItems.length <= 0) {\r\n\t\t\tthis._tooltipPosition = undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!local) {\r\n\t\t\t\tposition = this.toAxisPosition(position);\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(position) || position < this.start || position > this.end) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t\tthis._tooltipPosition = undefined;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.renderer;\r\n\r\n\t\t\t//@todo: think of how to solve this better\r\n\t\t\tif (!tooltip.parent) {\r\n\t\t\t\ttooltip.parent = this.tooltipContainer;\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltipLocation = renderer.tooltipLocation;\r\n\r\n\t\t\tlet startPosition: number = this.getCellStartPosition(position);\r\n\t\t\tlet endPosition: number = this.getCellEndPosition(position);\r\n\r\n\t\t\tif (this.tooltipPosition == \"fixed\") {\r\n\t\t\t\tposition = startPosition + (endPosition - startPosition) * tooltipLocation;\r\n\t\t\t}\r\n\r\n\t\t\tposition = $math.fitToRange(position, this.start, this.end);\r\n\r\n\t\t\tif (this._tooltipPosition != position) {\r\n\t\t\t\tthis._tooltipPosition = position;\r\n\r\n\t\t\t\tlet tooltipLocation2 = renderer.tooltipLocation2;\r\n\r\n\t\t\t\tlet startPoint: IPoint = renderer.positionToPoint(startPosition, tooltipLocation2);\r\n\t\t\t\tlet endPoint: IPoint = renderer.positionToPoint(endPosition, tooltipLocation2);\r\n\r\n\t\t\t\t// save values so cursor could use them\r\n\t\t\t\tthis.currentItemStartPoint = startPoint;\r\n\t\t\t\tthis.currentItemEndPoint = endPoint;\r\n\r\n\t\t\t\tif (renderer.fullWidthTooltip) {\r\n\t\t\t\t\ttooltip.width = endPoint.x - startPoint.x;\r\n\t\t\t\t\ttooltip.height = endPoint.y - startPoint.y;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet point: IPoint = renderer.positionToPoint(position, tooltipLocation2);\r\n\t\t\t\tlet globalPoint: IPoint = $utils.spritePointToSvg(point, this.renderer.line);\r\n\t\t\t\ttooltip.text = this.getTooltipText(position);\r\n\r\n\t\t\t\tif (tooltip.text) {\r\n\t\t\t\t\ttooltip.delayedPointTo(globalPoint);\r\n\t\t\t\t\ttooltip.show();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.cursorTooltipEnabled || this.tooltip.disabled) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) to Axis position with zoom level and\r\n\t * inversed taken into account.\r\n\t *\r\n\t * @param position Global position (0-1)\r\n\t * @return Position within Axis (0-1)\r\n\t */\r\n\tpublic toAxisPosition(position: number): number {\r\n\r\n\t\tposition = this.renderer.toAxisPosition(position);\r\n\r\n\t\tif (position == undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tposition = position * (this.end - this.start);\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = this.start + position;\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts position on the axis with zoom level and\r\n\t * inversed taken into account to global position.\r\n\t *\r\n\t * @param position Axis position (0-1)\r\n\t * @return Global position (0-1)\r\n\t */\r\n\tpublic toGlobalPosition(position: number): number {\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = position - this.start;\r\n\t\t}\r\n\r\n\t\treturn position / (this.end - this.start);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to be used for cursor's Axis tooltip.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position coordinate (px)\r\n\t * @return Label text\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip's position and possibly size, and pointer (stem)\r\n\t * place.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointerOrientation  Pointer (stem) orientation\r\n\t * @param boundingRectangle   A rectangle for tooltip to fit within\r\n\t */\r\n\tpublic updateTooltip(pointerOrientation: PointerOrientation, boundingRectangle: IRectangle): void {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\t\tif (tooltip) {\r\n\t\t\ttooltip.fixDoc = false;\r\n\t\t\ttooltip.pointerOrientation = pointerOrientation;\r\n\t\t\ttooltip.setBounds($utils.spriteRectToSvg(boundingRectangle, this.renderer.line));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [roundPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position  Relative position\r\n\t * @param location  Location on axis\r\n\t * @return Rounded position\r\n\t */\r\n\tpublic roundPosition(position: number, location: AxisItemLocation, axisLocation?: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellStartPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellEndPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis ranges for this Axis.\r\n\t *\r\n\t * @return Axis ranges\r\n\t */\r\n\tpublic get axisRanges(): ListTemplate<this[\"_dataItem\"]> {\r\n\t\tif (!this._axisRanges) {\r\n\t\t\tlet dataItem: AxisDataItem = this.createDataItem();\r\n\t\t\tdataItem.isRange = true;\r\n\t\t\tdataItem.axisFill = this.renderer.axisFills.template.clone();\r\n\t\t\tdataItem.grid = this.renderer.grid.template.clone();\r\n\t\t\tdataItem.tick = this.renderer.ticks.template.clone();\r\n\t\t\tdataItem.label = this.renderer.labels.template.clone();\r\n\r\n\t\t\tdataItem.isTemplate = true;\r\n\t\t\tdataItem.component = this;\r\n\t\t\tdataItem.axisFill.disabled = false;\r\n\t\t\tdataItem.tick.disabled = false;\r\n\t\t\tdataItem.grid.disabled = false;\r\n\t\t\tdataItem.label.disabled = false;\r\n\r\n\t\t\tthis._axisRanges = new ListTemplate<this[\"_dataItem\"]>(dataItem);\r\n\t\t\tthis._axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisRanges));\r\n\t\t\tthis._disposers.push(this._axisRanges.template);\r\n\t\t}\r\n\t\treturn this._axisRanges;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an axis range after it has been added to the axis range list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<this[\"_dataItem\"]>[\"inserted\"]) {\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\taxisRange.component = this;\r\n\t\taxisRange.isRange = true;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis breaks on this Axis.\r\n\t *\r\n\t * @return Axis breaks.\r\n\t */\r\n\tpublic get axisBreaks(): SortedListTemplate<this[\"_axisBreak\"]> {\r\n\t\tif (!this._axisBreaks) {\r\n\t\t\tthis._axisBreaks = new SortedListTemplate<this[\"_axisBreak\"]>(this.createAxisBreak(), (a, b) => {\r\n\t\t\t\treturn $number.order(a.adjustedStartValue, b.adjustedStartValue);\r\n\t\t\t});\r\n\r\n\t\t\tthis._axisBreaks.events.on(\"inserted\", this.processBreak, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisBreaks));\r\n\t\t\tthis._disposers.push(this._axisBreaks.template);\r\n\t\t}\r\n\t\treturn this._axisBreaks;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new axis break.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new AxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Series currently associated with this Axis.\r\n\t *\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic postProcessSeriesDataItems(series?: XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\t/**\r\n\t * Updates Axis based on all Series that might influence it.\r\n\t *\r\n\t * Called by Series after Series data is validated.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisBySeries(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Hides unused data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hideUnusedDataItems(): void {\r\n\t\t// hide all unused\r\n\t\tlet dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]> = this._dataItemsIterator;\r\n\r\n\t\tdataItemsIterator.createNewItems = false;\r\n\r\n\t\t$iter.each(dataItemsIterator.iterator(), (dataItem) => {\r\n\t\t\tthis.validateDataElement(dataItem); // solves shrinking\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t});\r\n\r\n\t\tdataItemsIterator.clear();\r\n\t\tdataItemsIterator.createNewItems = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series' data item that corresponds to specific position on Axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series    Series\r\n\t * @param position  Position (0-1)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle that corresponds to specific position on axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       ???\r\n\t * @param location  Location\r\n\t * @param stackKey  ???\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point coordinates\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes axis breaks that fall between `min` and `max` (???)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param min  Start value\r\n\t * @param max  End value\r\n\t * @return Spread o\r\n\t */\r\n\tprotected adjustDifference(min: number, max: number): number {\r\n\t\tlet difference: number = max - min;\r\n\t\tif ($type.isNumber(difference)) {\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\t$iter.eachContinue(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t// breaks are sorted, we don't need go further anymore\r\n\t\t\t\t\t\tif (startValue > max) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (endValue >= min) {\r\n\t\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tlet intersection: IRange = $math.intersection({ start: startValue, end: endValue }, { start: min, end: max });\r\n\r\n\t\t\t\t\t\t\t\tif (intersection) {\r\n\t\t\t\t\t\t\t\t\tdifference -= (intersection.end - intersection.start) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn difference;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if specific value falls within a break.\r\n\t *\r\n\t * Returns [[AxisBreak]] the value falls into.\r\n\t *\r\n\t * @param value  Value to check\r\n\t * @return Axis break\r\n\t */\r\n\tprotected isInBreak(value: number): this[\"_axisBreak\"] {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\treturn $iter.find(this._axisBreaks.iterator(), (axisBreak) =>\r\n\t\t\t\tvalue >= axisBreak.adjustedStartValue &&\r\n\t\t\t\tvalue <= axisBreak.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixAxisBreaks description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected fixAxisBreaks(): void {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks: SortedListTemplate<this[\"_axisBreak\"]> = this._axisBreaks;\r\n\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t// first make sure that startValue is <= end value\r\n\t\t\t\t// This needs to make a copy of axisBreaks because it mutates the list while traversing\r\n\t\t\t\t// TODO very inefficient\r\n\t\t\t\t$array.each($iter.toArray(axisBreaks.iterator()), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = $math.min(axisBreak.startValue, axisBreak.endValue);\r\n\t\t\t\t\tlet endValue: number = $math.max(axisBreak.startValue, axisBreak.endValue);\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\r\n\t\t\t\t\tthis._axisBreaks.update(axisBreak);\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t\tlet firstAxisBreak: this[\"_axisBreak\"] = axisBreaks.first;\r\n\t\t\t\tlet previousEndValue: number = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);\r\n\r\n\t\t\t\t// process breaks\r\n\t\t\t\t// TODO does this need to call axisBreaks.update ?\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t// breaks can't overlap\r\n\t\t\t\t\t// if break starts before previous break ends\r\n\t\t\t\t\tif (startValue < previousEndValue) {\r\n\t\t\t\t\t\tstartValue = previousEndValue;\r\n\r\n\t\t\t\t\t\tif (endValue < previousEndValue) {\r\n\t\t\t\t\t\t\tendValue = previousEndValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * We need start/end indexes of axes to be 0 - `dataItems.length`.\r\n\t *\r\n\t * Yes, also for category axis, this helps to avoid jumping of categories\r\n\t * while scrolling and does not do a lot of extra work as we use\r\n\t * protected `_startIndex` and `_endIndex` when working with items.\r\n\t *\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * [startIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [endIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set endIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get endIndex(): number {\r\n\t\treturn this.dataItems.length;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a formatted label based on position.\r\n\t *\r\n\t * Individual axis types should override this method to generate a label\r\n\t * that is relevant to axis type.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\treturn Math.round(position * 100) + \"%x\";\r\n\t}\r\n\r\n\t/**\r\n\t * A Chart this Axis belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a data item for a Series range.\r\n\t *\r\n\t * @param series  Target Series\r\n\t * @return Range data item\r\n\t */\r\n\tpublic createSeriesRange(series: XYSeries): this[\"_dataItem\"] {\r\n\t\tlet range = this.axisRanges.create();\r\n\t\trange.component = this;\r\n\t\trange.axisFill = this.renderer.axisFills.template.clone();\r\n\t\trange.axisFill.disabled = false;\r\n\t\trange.axisFill.fillOpacity = 0;\r\n\r\n\t\trange.grid = this.renderer.grid.template.clone();\r\n\t\trange.grid.disabled = true;\r\n\r\n\t\trange.tick = this.renderer.ticks.template.clone();\r\n\t\trange.tick.disabled = true;\r\n\r\n\t\trange.label = this.renderer.labels.template.clone();\r\n\t\trange.label.disabled = true;\r\n\r\n\t\trange.addDisposer(new Disposer(() => {\r\n\t\t\tseries.axisRanges.removeValue(range);\r\n\t\t}))\r\n\r\n\t\tseries.axisRanges.push(range);\r\n\t\treturn range;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.copyFrom(source.renderer);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (source.renderer) {\r\n\t\t\t\tthis.renderer = source.renderer.clone();\r\n\t\t\t\tthis._disposers.push(this.renderer);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (source.title) {\r\n\t\t\tif (!this.title) {\r\n\t\t\t\tthis.title = source.title.clone();\r\n\t\t\t\tthis.title.parent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.title.copyFrom(source.title);\r\n\t\t\t}\r\n\t\t\tthis._disposers.push(this.title);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t */\r\n\tprotected resetIterators(): void {\r\n\t\tthis._dataItemsIterator.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\r\n\t\t\t\t\t// If `series` is set, we know it's a series range\r\n\t\t\t\t\tif ($type.hasValue(range[\"series\"])) {\r\n\t\t\t\t\t\tif ($type.isString(range[\"series\"])) {\r\n\t\t\t\t\t\t\tif (this.map.hasKey(range[\"series\"])) {\r\n\t\t\t\t\t\t\t\t//range[\"series\"] = this.map.getKey(range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i] = this.createSeriesRange(this.map.getKey(range[\"series\"]));\r\n\t\t\t\t\t\t\t\tdelete (range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i].config = range;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Ordering function used in JSON setup.\r\n\t *\r\n\t * @param a  Item A\r\n\t * @param b  Item B\r\n\t * @return Order\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// last\r\n\t\telse if (a == \"title\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"title\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t// first\r\n\t\telse if (a == \"component\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"component\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n\r\n\tprotected setDisabled(value: boolean) {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.gridContainer.disabled = value;\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Label]] element which serves as a title to the axis.\r\n\t *\r\n\t * When axis is created it aleready has an element, so you can just modify\r\n\t * it.\r\n\t *\r\n\t * Or you can replace it with your own instance of `Label`.\r\n\t * \r\n\t * @param  value  Title label\r\n\t */\r\n\tpublic set title(value: Label) {\r\n\t\tif (this._title && this._title != value) {\r\n\t\t\tthis._title.dispose();\r\n\t\t}\r\n\t\tif (value) {\r\n\t\t\tthis._title = value;\r\n\t\t\tvalue.parent = this;\r\n\t\t\tvalue.shouldClone = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Title label\r\n\t */\r\n\tpublic get title(): Label {\r\n\t\treturn this._title;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if axis' tooltip should be hidden while axis range is animating\r\n\t * (zooming)\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.16\r\n\t * @param  value  Hide tooltip while zooming?\r\n\t */\r\n\tpublic set hideTooltipWhileZooming(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideTooltipWhileZooming\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide tooltip while zooming?\r\n\t */\r\n\tpublic get hideTooltipWhileZooming(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideTooltipWhileZooming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the axis be zoomed with scrollbar/cursor?\r\n\t *\r\n\t * @default true\r\n\t * @since 4.9.28\r\n\t * @param  value  Zoomable?\r\n\t */\r\n\tpublic set zoomable(value: boolean) {\r\n\t\tthis.setPropertyValue(\"zoomable\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoomable?\r\n\t */\r\n\tpublic get zoomable(): boolean {\r\n\t\treturn this.getPropertyValue(\"zoomable\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Axis\"] = Axis;\r\nregistry.registeredClasses[\"AxisDataItem\"] = AxisDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable axis tooltips.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Axis && target.tooltip) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.cursorTooltipEnabled = false;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});", "/**\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLine]].\r\n */\r\nexport interface IAxisLineProperties extends ISpriteProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisLine]].\r\n */\r\nexport interface IAxisLineEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLineAdapters extends ISpriteAdapters, IAxisLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw Axis line.\r\n *\r\n * @see {@link IAxisLineEvents} for a list of available events\r\n * @see {@link IAxisLineAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLine extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLineEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLine\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.strokeOpacity = 0.15;\r\n\t\tthis.pixelPerfect = true;\r\n\t\tthis.fill = color();\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.interactionsEnabled = false;\r\n\r\n\t\t//this.element.moveTo({ x: 0, y: 0 });\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLine\"] = AxisLine;\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Axis, AxisItemLocation, AxisDataItem } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFill]].\r\n */\r\nexport interface IAxisFillProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Start position. (0-1)\r\n\t */\r\n\tstartPosition?: number;\r\n\r\n\t/**\r\n\t * End position. (0-1)\r\n\t */\r\n\tendPosition?: number;\r\n\r\n\t/**\r\n\t * Location within the axis.\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFill]].\r\n */\r\nexport interface IAxisFillEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFill]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillAdapters extends ISpriteAdapters, IAxisFillProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisFill extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillEvents;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * [_dataItem description]\r\n\t *\r\n\t * Not sure what this is doing here?\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper();\r\n\t\tthis.axis = axis;\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.className = \"AxisFill\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.location = 0;\r\n\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.__disabled || this.disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\r\n\t\t\tthis.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t\tif (this.isMeasured) {\r\n\t\t\t\tthis.measure();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An actual starting position of the fill.\r\n\t *\r\n\t * @param value  Starting position\r\n\t */\r\n\tpublic set startPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"startPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn this.getPropertyValue(\"startPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * An actual end position of the fill.\r\n\t *\r\n\t * @param value End position\r\n\t */\r\n\tpublic set endPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"endPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn this.getPropertyValue(\"endPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the fill. (0-1)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setPath(value: string): boolean {\r\n\t\tif (this.setPropertyValue(\"path\", value)) {\r\n\t\t\tthis.element.attr({ \"d\": value });\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;\r\n", "/**\r\n * A module defining functionality for axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteEvents, ISpriteAdapters } from \"../../core/Sprite\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Grid]].\r\n */\r\nexport interface IGridProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Location of the grid item within cell. (0-1)\r\n\t */\r\n\tlocation?: AxisItemLocation;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Grid]].\r\n */\r\nexport interface IGridEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters  for [[Grid]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridAdapters extends ISpriteAdapters, IGridProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Displays an axis grid line.\r\n *\r\n * @see {@link IGridEvents} for a list of available events\r\n * @see {@link IGridAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements\r\n * @important\r\n */\r\nexport class Grid extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridEvents;\r\n\r\n\t/**\r\n\t * An axis data item that corresponds to the this grid element.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Grid\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.location = 0.5;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\r\n\t\tthis.pixelPerfect = true;\r\n\t\tthis.strokeOpacity = 0.15;\r\n\t\tthis.fill = color(); // \"none\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to place grid line on.\r\n\t *\r\n\t * * 0 - start\r\n\t * * 0.5 - middle\r\n\t * * 1 - end\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grid\"] = Grid;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable grid on smaller charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Grid) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});", "/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Label, ILabelProperties, ILabelAdapters, ILabelEvents } from \"../../core/elements/Label\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabel]].\r\n */\r\nexport interface IAxisLabelProperties extends ILabelProperties {\r\n\r\n\t/**\r\n\t * Relative location of the label. (0-1)\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw the label on the inside of the Axis?\r\n\t */\r\n\tinside?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabel]].\r\n */\r\nexport interface IAxisLabelEvents extends ILabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabel]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelAdapters extends ILabelAdapters, IAxisLabelProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on Axis.\r\n *\r\n * @see {@link IAxisLabelEvents} for a list of available events\r\n * @see {@link IAxisLabelAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisLabel extends Label {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLabelProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLabelAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLabelEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabel\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.padding(10, 10, 10, 10);\r\n\t\tthis.location = 0.5;\r\n\t\t//this.nonScaling = true; // not good for perf\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the label. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if label should be drawn inside axis.\r\n\t *\r\n\t * @param value  Inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inside\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if label is set to be drawn inside axis.\r\n\t *\r\n\t * @return Inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean):boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif(this.axis){\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabel\"] = AxisLabel;\r\n", "/**\r\n * Tick module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Tick]].\r\n */\r\nexport interface ITickProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Length of the tick (px).\r\n\t */\r\n\tlength?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Tick]].\r\n */\r\nexport interface ITickEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Tick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITickAdapters extends ISpriteAdapters, ITickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A basic Tick class.\r\n *\r\n * A tick is a short dash, mainly connecting an object like axis or slice to\r\n * it's textual label.\r\n *\r\n * @see {@link ITickEvents} for a list of available events\r\n * @see {@link ITickAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class Tick extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITickEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Tick\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fillOpacity = 0;\r\n\t\tthis.length = 6;\r\n\t\tthis.strokeOpacity = 0.2;\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Length of the tick in pixels.\r\n\t *\r\n\t * @param value  Length (px)\r\n\t */\r\n\tpublic set length(value: number) {\r\n\t\tthis.setPropertyValue(\"length\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get length(): number {\r\n\t\tif (this.disabled) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn this.getPropertyValue(\"length\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Tick\"] = Tick;\r\n", "/**\r\n * Axis Tick module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisTick]].\r\n */\r\nexport interface IAxisTickProperties extends ITickProperties {\r\n\t/**\r\n\t * Relative location of the tick. (0-1)\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw the tick on the inside of the Axis?\r\n\t */\r\n\tinside?: boolean;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisTick]].\r\n */\r\nexport interface IAxisTickEvents extends ITickEvents {\r\n\r\n}\r\n\r\n/**\r\n * Defines adapter for [[AxisTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisTickAdapters extends ITickAdapters, IAxisTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an axis tick\r\n * @see {@link IAxisTickEvents} for a list of available events\r\n * @see {@link IAxisTickAdapters} for a list of available Adapters\r\n */\r\nexport class AxisTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisTickEvents;\r\n\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referece to Axis element this tick is placed on.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisTick\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.location = 0.5;\r\n\r\n\t\tthis.above = false;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.pixelPerfect = true;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\tthis.length = 5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the tick. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if tick should be drawn inside axis.\r\n\t *\r\n\t * @param value  Inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inside\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if label is set to be drawn inside axis.\r\n\t *\r\n\t * @return Inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\t/**\r\n\t * Normally tick goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisTick\"] = AxisTick;\r\n", "/**\r\n * Module, defining base Axis Renderer.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisLine } from \"./AxisLine\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { Chart } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t */\r\n\tminGridDistance?: number;\r\n\r\n\t/**\r\n\t * Draw axis labels inside axis.\r\n\t */\r\n\tinside?: boolean;\r\n\r\n\t/**\r\n\t * Draw axis on opposite side of the plot area?\r\n\t */\r\n\topposite?: boolean;\r\n\r\n\t/**\r\n\t * Inverse the order of the scale for the Axis.\r\n\t */\r\n\tinversed?: boolean;\r\n\r\n\t/**\r\n\t * Location of the cell start. (0-1)\r\n\t */\r\n\tcellStartLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the cell end. (0-1)\r\n\t */\r\n\tcellEndLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the axis tooltip. (0-1)\r\n\t */\r\n\ttooltipLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the tooltip relative secondary axis cell. (0-1)\r\n\t */\r\n\ttooltipLocation2?: number;\t\r\n\r\n\t/**\r\n\t * Resize axis tooltip to the full width of the cell.\r\n\t */\r\n\tfullWidthTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Labels with position less than this will be hidden.\r\n\t */\r\n\tminLabelPosition?: number;\r\n\r\n\t/**\r\n\t * Labels with position bigger than this will be hidden.\r\n\t */\r\n\tmaxLabelPosition?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererAdapters extends IContainerAdapters, IAxisRendererProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all axis renderers.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRenderer extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererEvents;\r\n\r\n\t/**\r\n\t * A related Axis.\r\n\t */\r\n\tprotected _axis: Axis;\r\n\r\n\t/**\r\n\t * A line object of the related axis.\r\n\t */\r\n\tpublic line: AxisLine;\r\n\r\n\t/**\r\n\t * Base grid element. ([[Sprite]])\r\n\t *\r\n\t * For value axes base grid is at value 0.\r\n\t *\r\n\t * For category/date axis it is added at the end of the last item/date.\r\n\t *\r\n\t */\r\n\tpublic baseGrid: Sprite;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[Grid]] elements.\r\n\t */\r\n\tpublic gridContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the axis bullets.\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[AxisBreak]] elements.\r\n\t */\r\n\tpublic breakContainer: Container;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<Chart>();\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: Grid;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFill;\r\n\r\n\t/**\r\n\t * Defines type for tick elements.\r\n\t */\r\n\tpublic _tickType: AxisTick;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabel;\r\n\r\n\t/**\r\n\t * A list of grid elements.\r\n\t */\r\n\tprotected _grid: ListTemplate<this[\"_gridType\"]>;\r\n\r\n\t/**\r\n\t * A list of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tickType\"]>;\r\n\r\n\t/**\r\n\t * A list of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_labelType\"]>;\r\n\r\n\t/**\r\n\t * A list of fill elements.\r\n\t */\r\n\tprotected _axisFills: ListTemplate<this[\"_fillType\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRenderer\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.minGridDistance = 50;\r\n\t\tthis.inside = false;\r\n\t\tthis.inversed = false;\r\n\t\tthis.tooltipLocation = 0.5;\r\n\t\tthis.fullWidthTooltip = false;\r\n\t\tthis.cellStartLocation = 0;\r\n\t\tthis.cellEndLocation = 1;\r\n\r\n\t\tthis.minLabelPosition = 0;\r\n\t\tthis.maxLabelPosition = 1;\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tlet gridContainer = this.createChild(Container);\r\n\t\tgridContainer.shouldClone = false;\r\n\t\tgridContainer.layout = \"none\";\r\n\t\t//\tgridContainer.isMeasured = false;\r\n\t\tgridContainer.virtualParent = this;\r\n\t\tgridContainer.width = percent(100);\r\n\t\tgridContainer.height = percent(100);\r\n\r\n\t\tthis.gridContainer = gridContainer;\r\n\t\t// not good without this\r\n\t\tgridContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis.invalidateAxisItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tlet breakContainer = this.createChild(Container);\r\n\t\tbreakContainer.shouldClone = false;\r\n\t\tbreakContainer.isMeasured = false;\r\n\t\tbreakContainer.layout = \"none\";\r\n\t\tbreakContainer.width = percent(100);\r\n\t\tbreakContainer.height = percent(100);\r\n\t\tthis.breakContainer = breakContainer;\r\n\r\n\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.line = this.createChild(AxisLine);\r\n\t\tthis.line.shouldClone = false;\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tlet baseGrid: Grid = this.createChild(Grid);\r\n\t\tbaseGrid.shouldClone = false;\r\n\t\tthis.baseGrid = baseGrid;\r\n\r\n\t\t// Make elements disposable\r\n\t\tlet disposers = this._disposers;\r\n\t\tdisposers.push(baseGrid);\r\n\t\tdisposers.push(this.line);\r\n\t\tdisposers.push(gridContainer);\r\n\t\tdisposers.push(breakContainer);\r\n\t\tdisposers.push(bulletsContainer);\r\n\t\tdisposers.push(this._chart);\r\n\r\n\t\tthis.ticks.template.disabled = true;\r\n\t\tthis.axisFills.template.disabled = true;\r\n\t\tthis.axisFills.template.interactionsEnabled = false;\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Axis of a renderer\r\n\t * @param axis Axis\r\n\t */\r\n\tset axis(axis: Axis) {\r\n\t\tthis.setAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Axis of a renderer\r\n\t * @return axis Axis\r\n\t */\r\n\tget axis(): Axis {\r\n\t\treturn this._axis;\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tthis._axis = axis;\r\n\t\tthis.baseGrid.parent = axis;\r\n\t\tthis.line.parent = axis;\r\n\t\tthis.gridContainer.bind(\"opacity\", axis);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tthis.events.on(\"sizechanged\", this.updateTooltip, this, false);\r\n\t\tthis.events.on(\"positionchanged\", this.updateTooltip, this, false);\r\n\t\tthis.labels.template.inside = this.inside;\r\n\t\tthis.ticks.template.inside = this.inside;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-positions an element to new coordinates.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item   A target element\r\n\t * @param point  New coordinates\r\n\t */\r\n\tpublic positionItem(item: Sprite, point: IPoint): void {\r\n\t\tif (item) {\r\n\t\t\titem.moveTo(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?:number): IPoint {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review / units)\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to a pixel coordinate.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate;\r\n\t}\r\n\r\n\tpublic updateGridContainer() {\r\n\r\n\t}\r\n\r\n\r\n\tprotected getHeight(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelHeight;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelHeight || 0;\r\n\t}\r\n\r\n\tprotected getWidth(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelWidth;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelWidth || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis data items, effectively causing them re-evaluated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic invalidateAxisItems(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fill         Fill element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateFillElement(fill: AxisFill, position: number, endPosition: number): void {\r\n\t\tfill.startPosition = position;\r\n\t\tfill.endPosition = endPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tthis.positionItem(axisBreak.startLine, axisBreak.startPoint);\r\n\t\tthis.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\r\n\t\tthis.positionItem(axisBreak.endLine, axisBreak.endPoint);\r\n\t\tthis.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t *\r\n\t * Use it to control density of the grid/labels on the axis.element.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} for more info\r\n\t * @param value  Min distance (px)\r\n\t */\r\n\tpublic set minGridDistance(value: number) {\r\n\t\tif (this.setPropertyValue(\"minGridDistance\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min distance (px)\r\n\t */\r\n\tpublic get minGridDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minGridDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles visibility of an element, based on its current position and\r\n\t * min/max position settings.\r\n\t *\r\n\t * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite       An element to toggle\r\n\t * @param position     Elements current position\r\n\t * @param minPosition  Min position setting\r\n\t * @param maxPosition  Max position setting\r\n\t */\r\n\tprotected toggleVisibility(sprite: Sprite, position: number, minPosition: number, maxPosition: number): void {\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tlet dataItem = sprite.dataItem;\r\n\t\tif(dataItem && dataItem instanceof AxisDataItem){\r\n\t\t\tif($type.isNumber(dataItem.minPosition)){\r\n\t\t\t\tminPosition = dataItem.minPosition;\r\n\t\t\t}\r\n\t\t\tif($type.isNumber(dataItem.maxPosition)){\r\n\t\t\t\tmaxPosition = dataItem.maxPosition;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet updatedStart = axis.start + (axis.end - axis.start) * (minPosition - 0.0001);\r\n\t\tlet updatedEnd = axis.start + (axis.end - axis.start) * (maxPosition + 0.0001);\r\n\r\n\t\tif (!sprite.disabled) {\r\n\t\t\tif (position < updatedStart || position > updatedEnd) {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Fill elements.\r\n\t *\r\n\t * Those are fill elements that cover the space between every second set\r\n\t * of grid lines, and can be configured to create striped charts.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable them, set\r\n\t * template to true.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"axisFills\": {\r\n\t *         \"disabled\": false\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/alternated-axis-fills/} this tutorial for more info.\r\n\t * @return Fill elements\r\n\t */\r\n\tpublic get axisFills(): ListTemplate<this[\"_fillType\"]> {\r\n\t\tif (!this._axisFills) {\r\n\t\t\tlet fill = this.createFill(this.axis);\r\n\t\t\tthis._axisFills = new ListTemplate<AxisFill>(fill);\r\n\t\t\tfill.applyOnClones = true;\r\n\t\t\tfill.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisFills));\r\n\t\t\tthis._disposers.push(this._axisFills.template);\r\n\t\t}\r\n\t\treturn this._axisFills;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFill(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Grid elements.\r\n\t *\r\n\t * @return Grid elements\r\n\t */\r\n\tpublic get grid(): ListTemplate<this[\"_gridType\"]> {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet grid = this.createGrid();\r\n\t\t\tthis._grid = new ListTemplate<Grid>(grid);\r\n\t\t\tgrid.applyOnClones = true;\r\n\t\t\tgrid.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._grid));\r\n\t\t\tthis._disposers.push(this._grid.template);\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new Grid();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Tick elements.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable ticks, you'll\r\n\t * need to set `disabled` and `strokeOpacity` properties of the tick template.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"ticks\": {\r\n\t *         \"disabled\": false,\r\n\t *         \"strokeOpacity\": 0.5\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Tick elements\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tickType\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick: AxisTick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\ttick.isMeasured = false;\r\n\t\t\ttick.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._ticks = new ListTemplate<AxisTick>(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t\tthis._disposers.push(this._ticks.template);\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new tick element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Tick element\r\n\t */\r\n\tpublic createTick(): this[\"_tickType\"] {\r\n\t\treturn new AxisTick();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Label elements.\r\n\t *\r\n\t * @return Label elements\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_labelType\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tthis._labels = new ListTemplate<AxisLabel>(label);\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tlabel.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t\tthis._disposers.push(this._labels.template);\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabel();\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis' labels and ticks should be drawn inside Plot area.\r\n\t *\r\n\t * Does not work with all renderers, like AxisRendererRadial.\r\n\t *\r\n\t * @param value  Labels inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\r\n\t\tif (this.setPropertyValue(\"inside\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.width = 0;\r\n\t\t\tthis.height = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.height = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis should be drawn on the opposite side of the plot\r\n\t * area than it would normally be drawn based on chart's settings.\r\n\t *\r\n\t * Does not work with all renderers, like [[AxisRendererRadial]] and\r\n\t * [[AxisRenderer Circular].\r\n\t *\r\n\t * @param value  Draw axis on opposite side?\r\n\t */\r\n\tpublic set opposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"opposite\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw axis on opposite side?\r\n\t */\r\n\tpublic get opposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"opposite\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if Axis tooltip should take the whole width of the axis cell.\r\n\t * (between two grid lines)\r\n\t *\r\n\t * NOTE: this setting is ignored on circular axis types.\r\n\t *\r\n\t * @param value Full width tooltip?\r\n\t */\r\n\tpublic set fullWidthTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width tooltip?\r\n\t */\r\n\tpublic get fullWidthTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthTooltip\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within secondary axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation2(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation2\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation2(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation2\");\r\n\t}\t\r\n\r\n\t/**\r\n\t * Location for the cell start.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellStartLocation` identifies where, within available space, the actual\r\n\t * cell starts.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell start (0-1)\r\n\t */\r\n\tpublic set cellStartLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellStartLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell start (0-1)\r\n\t */\r\n\tpublic get cellStartLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellStartLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location for the cell end.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellEndLocation` identifies where, within available space, the actual\r\n\t * cell ends.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell end (0-1)\r\n\t */\r\n\tpublic set cellEndLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellEndLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell end (0-1)\r\n\t */\r\n\tpublic get cellEndLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellEndLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the scale of the axis should be flipped.\r\n\t *\r\n\t * @param value Flip axis?\r\n\t */\r\n\tpublic set inversed(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inversed\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Flip axis?\r\n\t */\r\n\tpublic get inversed(): boolean {\r\n\t\treturn this.getPropertyValue(\"inversed\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the start of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.05 (5% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near start of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Min label position (0-1)\r\n\t */\r\n\tpublic set minLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"minLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min label position (0-1)\r\n\t */\r\n\tpublic get minLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"minLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the and of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.95 (95% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near end of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Max label position (0-1)\r\n\t */\r\n\tpublic set maxLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max label position (0-1)\r\n\t */\r\n\tpublic get maxLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"maxLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all settings and related items from another object of the same\r\n\t * type.\r\n\t *\r\n\t * @param source  Source object\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.grid.template.copyFrom(source.grid.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.axisFills.template.copyFrom(source.axisFills.template);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.baseGrid.copyFrom(source.baseGrid);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRenderer\"] = AxisRenderer;\r\n", "/**\r\n * Axis Bullet module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerAdapters, IContainerEvents, IContainerProperties } from \"../../core/Container\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisBullet]].\r\n */\r\nexport interface IAxisBulletProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Relative position within cell/range.\r\n\t *\r\n\t * Value range is from from `0` (beginning) to `1` (end).\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw inside plot area (`true`) or outside it (`false`).\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tinside?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisBullet]].\r\n */\r\nexport interface IAxisBulletEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapter for [[AxisBullet]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisBulletAdapters extends IContainerAdapters, IAxisBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a positioned bullet (element) on an Axis.\r\n *\r\n * ```TypeScript\r\n * let range = dateAxis.axisRanges.create();\r\n * range.date = new Date(2018, 0, 5);\r\n * \r\n * let flag = new am4plugins_bullets.FlagBullet();\r\n * flag.label.text = \"Hello\";\r\n *\r\n * range.bullet = flag;\r\n * ```\r\n * ```JavaScript\r\n * var range = dateAxis.axisRanges.create();\r\n * range.date = new Date(2018, 0, 5);\r\n * \r\n * var flag = new am4plugins_bullets.FlagBullet();\r\n * flag.label.text = \"Hello\";\r\n *\r\n * range.bullet = flag;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"xAxes\": [{\r\n *     \"type\": \"DateAxis\",\r\n *     // ...\r\n *     \"axisRanges\": [{\r\n *       \"date\": new Date(2018, 0, 5),\r\n *       \"bullet: {\r\n *         \"type\": \"FlagBullet\",\r\n *         \"label\": {\r\n *           \"text\": \"Hello\"\r\n *         }\r\n *       }\r\n *     }]\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.5.9\r\n * @see {@link IAxisBulletEvents} for a list of available events\r\n * @see {@link IAxisBulletAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisBullet extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisBulletEvents;\r\n\r\n\t/**\r\n\t * Data item.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisBullet\";\r\n\r\n\t\tthis.location = 0.5;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position within cell/range.\r\n\t *\r\n\t * Value range is from from `0` (beginning) to `1` (end).\r\n\t *\r\n\t * NOTE: `location` is relative to the parent axis range's scope, i.e.\r\n\t * between its `date` and `endDate` for [[DateAxis]], or `value`/`endValue`\r\n\t * ([[ValueAxis]]), or `category`/`endCategory` ([[categoryAxis]]).\r\n\t * \r\n\t * ```TypeScript\r\n\t * let range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * range.endDate = new Date(2018, 0, 6);\r\n\t * \r\n\t * let bullet = new am4charts.AxisBullet();\r\n\t * bullet.location = 1;\r\n\t * \r\n\t * let flag = bullet.createChild(am4plugins_bullets.FlagBullet);\r\n\t * flag.label.text = \"Hello\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * range.endDate = new Date(2018, 0, 6);\r\n\t * \r\n\t * var bullet = new am4charts.AxisBullet();\r\n\t * bullet.location = 1;\r\n\t * \r\n\t * var flag = bullet.createChild(am4plugins_bullets.FlagBullet);\r\n\t * flag.label.text = \"Hello\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     // ...\r\n\t *     \"axisRanges\": [{\r\n\t *       \"date\": new Date(2018, 0, 5),\r\n\t *       \"endDate\": new Date(2018, 0, 6),\r\n\t *       \"bullet: {\r\n\t *         \"type\": \"AxisBullet\",\r\n\t *         \"location\": 1,\r\n\t *         \"children\": [{\r\n\t *           \"type\": \"FlagBullet\",\r\n\t *           \"label\": {\r\n\t *             \"text\": \"Hello\"\r\n\t *           }\r\n\t *         }]\r\n\t *       }\r\n\t *     }]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0.5\r\n\t * @param  value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBullet\"] = AxisBullet;", "/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { HorizontalCenter } from \"../../core/defs/HorizontalCenter\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererYAdapters extends IAxisRendererAdapters, IAxisRendererYProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererYProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererYAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererYEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY\";\r\n\t\tthis.minGridDistance = 40;\r\n\t\tthis.opposite = false;\r\n\t\tthis.height = percent(100);\r\n\t\tthis.labels.template.verticalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"horizontal\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.y = axis.pixelY;\r\n\t\t\tgridContainer.height = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet inversedPosition = 1 - value;\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet y = axis.pixelY;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\ty = $utils.spritePointToSprite({ x: 0, y: this.pixelY }, this.parent, relativePositionSprite).y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tlet relativeY = y / relativePositionSprite.innerHeight;\r\n\t\t\t\tlet relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\r\n\r\n\t\t\t\treturn 1 - (inversedPosition - relativeY) / relativeHeight;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.valign = \"middle\";\r\n\r\n\t\t\tif (!(axis.height instanceof Percent)) {\r\n\t\t\t\taxis.height = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\ttitle.rotation = 90;\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.rotation = -90;\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 2000;\r\n\t\t\tlet bbx: number = 0;\r\n\t\t\tlet bby: number = 0;\r\n\t\t\tlet bbw: number = bigNum;\r\n\t\t\tlet bbh: number = this.axisLength;\r\n\r\n\t\t\t// right\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// left\r\n\t\t\telse {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(\"horizontal\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom) || 0;\r\n\t}\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: 0, y: this.positionToCoordinate(position) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.y, point.x);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = (1 - axis.start) - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + (1 - axis.end);\r\n\t\t}\r\n\t\treturn $math.round(position, 5);\r\n\t}\t\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet y1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet y2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet h: number = Math.abs(y2 - y1);\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet y: number = Math.min(y1, y2);\r\n\t\tlet x: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.getWidth(), y: 0 });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\ttry {\r\n\t\t\t$utils.used(this.axis.title.measuredWidth);\r\n\t\t} catch {\r\n\t\t\t// void\r\n\t\t}\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tif (!this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength, y: 0 });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.axisLength });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet h: number = this.axisLength;\r\n\t\tlet y: number = axis.basePoint.y;\r\n\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tif (y < - 0.2 || y > h + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).x;\r\n\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet horizontalCenter: HorizontalCenter;\r\n\t\tlet deltaX = 0;\r\n\t\tlet maxWidth = this.gridContainer.maxWidth;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\tif (label.align == \"left\") {\r\n\t\t\t\t\tdeltaX = -maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = -maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = 0 + deltaX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\tif (label.align == \"right\") {\r\n\t\t\t\t\tdeltaX = maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = this.measuredWidth + deltaX;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.horizontalCenter = horizontalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet x1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet x2: number = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\r\n\r\n\t\tstartPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\r\n\t\tendPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet w = Math.abs(x2 - x1);\r\n\r\n\t\tstartLine.x = x1;\r\n\t\tstartLine.height = 0;\r\n\t\tstartLine.width = w;\r\n\r\n\t\tendLine.x = x1;\r\n\t\tendLine.height = 0;\r\n\t\tendLine.width = w;\r\n\r\n\t\tfillShape.width = w;\r\n\t\tfillShape.height = Math.abs(endPoint.y - startPoint.y);\r\n\t\tfillShape.x = x1;\r\n\t\tfillShape.y = endPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(true, false, true, false);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (!axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});", "/**\r\n * A module which defines functionality related to Value Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { ValueAxis } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ValueAxisBreak]].\r\n */\r\nexport interface IValueAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Value break starts on.\r\n\t */\r\n\tstartValue?: number;\r\n\r\n\t/**\r\n\t * Value break ends on.\r\n\t */\r\n\tendValue?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxisBreak]].\r\n */\r\nexport interface IValueAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ValueAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisBreakAdapters extends IAxisBreakAdapters, IValueAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" on value axis.\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * when comparing columns with relatively similar values, it would make sense\r\n * to cut out their mid section, so that their tip differences are more\r\n * prominent.\r\n *\r\n * @see {@link IValueAxisBreakEvents} for a list of available events\r\n * @see {@link IValueAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IValueAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IValueAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IValueAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: ValueAxis;\r\n\r\n\t/**\r\n\t * [adjustedStep description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedStep: number;\r\n\r\n\t/**\r\n\t * [adjustedMin description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedMin: number;\r\n\r\n\t/**\r\n\t * [adjustedMax description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedMax: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.valueToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.valueToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxisBreak\"] = ValueAxisBreak;\r\n", "/**\r\n * Value Axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { IDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ValueAxisDataItem extends AxisDataItem {\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ValueAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.endValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A data point's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values[\"value\"].value;\r\n\t}\r\n\r\n\t/**\r\n\t * Data point's numeric end value.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tthis.setValue(\"endValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.values[\"endValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n */\r\nexport interface IMinMaxStep {\r\n\tmin: number;\r\n\tmax: number;\r\n\tstep: number;\r\n}\r\n\r\n/**\r\n * Defines data fields for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisDataFields extends IAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisProperties extends IAxisProperties {\r\n\tstrictMinMax?: boolean;\r\n\tlogarithmic?: boolean;\r\n\tmaxPrecision?: number;\r\n\tadjustLabelPrecision?: boolean;\r\n\textraTooltipPrecision?: number;\r\n\textraMin?: number;\r\n\textraMax?: number;\r\n\tkeepSelection?: boolean;\r\n\tincludeRangesInMinMax?: boolean;\r\n\tsyncWithAxis?: ValueAxis;\r\n\ttreatZeroAs?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisEvents extends IAxisEvents {\r\n\r\n\t/**\r\n\t * Invoked when selection/zoom on axis occurs and start/end coordinates\r\n\t * change.\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * Invoked when start/end coordinates of the axis change.\r\n\t */\r\n\textremeschanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[ValueAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisAdapters extends IAxisAdapters, IValueAxisProperties {\r\n\t/**\r\n\t * Applied to the base value of the axis\r\n\t */\r\n\tbaseValue: number,\r\n\r\n\t/**\r\n\t * Applied to the min value of the axis\r\n\t */\r\n\tmin: number\r\n\r\n\t/**\r\n\t * Applied to the max value of the axis\r\n\t */\r\n\tmax: number\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IValueAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IValueAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IValueAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: ValueAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: ValueAxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IValueAxisEvents;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: XYChart;\r\n\r\n\t/**\r\n\t * A list of Series that are using this Axis.\r\n\t */\r\n\tpublic series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * Minimum value for the axis scale.\r\n\t */\r\n\tprotected _min: number;\r\n\r\n\t/**\r\n\t * Maximum value for the axis scale.\r\n\t */\r\n\tprotected _max: number;\r\n\r\n\t/**\r\n\t * User-defined min value for axis.\r\n\t */\r\n\tprotected _minDefined: number;\r\n\r\n\t/**\r\n\t * User-defined max value for axis.\r\n\t */\r\n\tprotected _maxDefined: number;\r\n\r\n\t/**\r\n\t * [_minAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minAdjusted: number;\r\n\r\n\t/**\r\n\t * [_maxAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxAdjusted: number;\r\n\r\n\t/**\r\n\t * Min real value. (lowest value of all data points)\r\n\t */\r\n\tprotected _minReal: number;\r\n\r\n\t/**\r\n\t * Max real value. (highest value of all data points)\r\n\t */\r\n\tprotected _maxReal: number;\r\n\r\n\t/**\r\n\t * Min value within current zoom.\r\n\t */\r\n\tprotected _minZoomed: number;\r\n\r\n\t/**\r\n\t * Max value within current zoom.\r\n\t */\r\n\tprotected _maxZoomed: number\r\n\r\n\t/**\r\n\t * [_step description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _step: number;\r\n\r\n\t/**\r\n\t * [_stepDecimalPlaces description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _stepDecimalPlaces: number = 0;\r\n\tprotected _prevStepDecimalPlaces: number = 0;\r\n\tprotected _adjustLabelPrecision: boolean = true;\r\n\r\n\t/**\r\n\t * [_difference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _difference: number;\r\n\r\n\t/**\r\n\t * Base value for the axis.\r\n\t */\r\n\tprotected _baseValue: number = 0;\r\n\r\n\t/**\r\n\t * [_previousValue description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousValue: number;\r\n\r\n\t/**\r\n\t * [_previousPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousPoint: IPoint;\r\n\r\n\t/**\r\n\t * Adjusted start in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedStart: number = 0;\r\n\r\n\t/**\r\n\t * Adjusted end in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedEnd: number = 1;\r\n\r\n\tprotected _finalMin: number;\r\n\tprotected _finalMax: number;\r\n\r\n\tprotected _extremesChanged: boolean = false;\r\n\r\n\tprotected _deltaMinMax: number = 1;\r\n\r\n\tprotected _dsc: boolean = false;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem as parameter.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tif (!dataItem.axisFill.disabled) {\r\n\t\t\t// rounding in left to solve floating point number\r\n\t\t\tif ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\r\n\t\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * As calculating totals is expensive operation and not often needed, we\r\n\t * don't do it by default.\r\n\t *\r\n\t * In case you use `totalPercent` or `total` in your charts, this must be set\r\n\t * to `true`.\r\n\t *\r\n\t * @default false\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n\t */\r\n\tpublic calculateTotals: boolean = false;\r\n\r\n\r\n\tprotected _minMaxAnimation: Animation;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"value\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000);\r\n\t\tthis.setPropertyValue(\"extraMin\", 0);\r\n\t\tthis.setPropertyValue(\"extraMax\", 0);\r\n\t\tthis.setPropertyValue(\"strictMinMax\", false);\r\n\t\tthis.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\r\n\t\tthis.setPropertyValue(\"adjustLabelPrecision\", true);\r\n\t\tthis.setPropertyValue(\"extraTooltipPrecision\", 0);\r\n\t\tthis.keepSelection = false;\r\n\t\tthis.includeRangesInMinMax = false;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ValueAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new ValueAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tthis.clearCache();\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis._start = 0;\r\n\t\t\t\tthis._end = 1;\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._start != 0) {\r\n\t\t\t\tthis.dispatchImmediately(\"startchanged\");\r\n\t\t\t}\r\n\t\t\tif (this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"endchanged\");\r\n\r\n\t\t\t}\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._maxZoomed = this._maxDefined;\r\n\t\tthis._minZoomed = this._minDefined;\r\n\r\n\t\tthis._maxAdjusted = this._maxDefined;\r\n\t\tthis._minAdjusted = this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data items of the related Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\t\t// @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\r\n\t\tif (this.calculateTotals) {\r\n\t\t\tlet series: XYSeries = this.series.getIndex(0);\r\n\t\t\tlet startIndex: number = series.startIndex;\r\n\r\n\t\t\tif (series.dataItems.length > 0) {\r\n\r\n\t\t\t\tif (startIndex > 0) {\r\n\t\t\t\t\tstartIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tlet endIndex: number = series.endIndex;\r\n\t\t\t\tif (endIndex < series.dataItems.length) {\r\n\t\t\t\t\tendIndex++;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\tfor (let i: number = startIndex; i < endIndex; ++i) {\r\n\t\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\t\tconst total: { [index: string]: number } = {};\r\n\t\t\t\t\tconst sum: { [index: string]: number } = {};\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(total[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] = Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] += Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] = value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] += value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, total[key], \"total\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.getMinMax();\r\n\r\n\t\tif (!$type.isNumber(this._minAdjusted)) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tdataItem.value = null;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tthis.calculateZoom();\r\n\r\n\t\tthis.validateAxisElements();\r\n\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.validateBreaks();\r\n\r\n\t\tthis.hideUnusedDataItems();\r\n\r\n\t\tthis.renderer.invalidateLayout();\r\n\t\t// hide too close\r\n\t\t//this.hideTooCloseDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tif ($type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet min: number = this.positionToValue(this.start);\r\n\t\t\tlet max: number = this.positionToValue(this.end);\r\n\r\n\t\t\tlet differece: number = this.adjustDifference(min, max);\r\n\t\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\r\n\t\t\tlet stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\r\n\t\t\tthis._stepDecimalPlaces = stepDecimalPlaces;\r\n\r\n\t\t\tmin = $math.round(min, stepDecimalPlaces);\r\n\t\t\tmax = $math.round(max, stepDecimalPlaces);\r\n\r\n\t\t\tminMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\t\t\tlet step = minMaxStep.step;\r\n\r\n\t\t\tif (this.syncWithAxis) {\r\n\t\t\t\tlet calculated = this.getCache(min + \"-\" + max);\r\n\t\t\t\tif ($type.isNumber(calculated)) {\r\n\t\t\t\t\tstep = calculated;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = minMaxStep.min;\r\n\t\t\t\tmax = minMaxStep.max;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\r\n\t\t\t\tthis._dsc = false;\r\n\t\t\t\tthis._minZoomed = min;\r\n\t\t\t\tthis._maxZoomed = max;\r\n\r\n\t\t\t\tthis._step = step;\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected fixSmallStep(step: number): number {\r\n\t\tif (1 + step == 1) {\r\n\t\t\tstep *= 2;\r\n\t\t\treturn this.fixSmallStep(step);\r\n\t\t}\r\n\t\treturn step;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\t// first regular items\r\n\t\t\tlet value: number = this.minZoomed - this._step * 2;\r\n\r\n\t\t\tif (!this.logarithmic) {\r\n\t\t\t\tvalue = Math.floor(value / this._step) * this._step;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = Math.floor(this.minZoomed / this._step) * this._step;\r\n\t\t\t\t\tif (value == 0) {\r\n\t\t\t\t\t\tvalue = this.minZoomed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet maxZoomed = this._maxZoomed + this._step;\r\n\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\r\n\t\t\tif (this._step == 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._step = this.fixSmallStep(this._step);\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\tconst precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\r\n\t\t\tthis._prevStepDecimalPlaces = this._stepDecimalPlaces;\r\n\r\n\t\t\twhile (value <= maxZoomed) {\r\n\t\t\t\tlet axisBreak: ValueAxisBreak = <ValueAxisBreak>this.isInBreak(value);\r\n\r\n\t\t\t\tif (!axisBreak) {\r\n\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === value);\r\n\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tdataItem.axisBreak = undefined;\r\n\r\n\t\t\t\t\tif (dataItem.value != value || precisionChanged) {\r\n\t\t\t\t\t\tdataItem.value = value;\r\n\t\t\t\t\t\tdataItem.text = this.formatLabel(value);\r\n\r\n\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (dataItem.value >= this.min && dataItem.value <= this.max) {\r\n\t\t\t\t\t\t\tif (dataItem.label) {\r\n\t\t\t\t\t\t\t\tif ((this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\r\n\t\t\t\tlet oldValue = value;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\r\n\r\n\t\t\t\tif (stepPower < 1) {\r\n\t\t\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\t\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\r\n\t\t\t\t\tdecCount = Math.min(13, decCount);\r\n\t\t\t\t\t// round value to avoid floating point issues\r\n\t\t\t\t\tvalue = $math.round(value, decCount);\r\n\t\t\t\t\t// ceil causes problems: https://codepen.io/team/amcharts/pen/XWMjZwy?editors=1010\r\n\t\t\t\t\tif (oldValue == value) {\r\n\t\t\t\t\t\tvalue = maxZoomed;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// breaks later\r\n\t\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\t\tlet breakValue: number = axisBreak.adjustedMin;\r\n\r\n\t\t\t\t\t\t\twhile (breakValue <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\t\tif (breakValue >= axisBreak.adjustedStartValue && breakValue <= axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === breakValue);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\t\tif (dataItem.value != breakValue) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.value = breakValue;\r\n\t\t\t\t\t\t\t\t\t\tdataItem.text = this.formatLabel(breakValue);\r\n\t\t\t\t\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreakValue += axisBreak.adjustedStep;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tlet value: number = dataItem.value;\r\n\t\tlet endValue: number = dataItem.endValue;\r\n\r\n\t\tlet position: number = this.valueToPosition(value);\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet endPosition: number = position;\r\n\t\tlet fillEndPosition: number = this.valueToPosition(value + this._step);\r\n\r\n\t\tif ($type.isNumber(endValue)) {\r\n\t\t\tendPosition = this.valueToPosition(endValue);\r\n\t\t\tfillEndPosition = endPosition;\r\n\t\t}\r\n\r\n\t\t// this point is needed to calculate distance to satisfy minGridDistance\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, position, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[NumberFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\tif (this.adjustLabelPrecision && value != 0) {\r\n\t\t\treturn this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.numberFormatter.format(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\tlet baseValue: number = this.baseValue;\r\n\t\tlet position: number = this.valueToPosition(baseValue);\r\n\t\tlet basePoint: IPoint = this.renderer.positionToPoint(position);\r\n\r\n\t\treturn basePoint;\r\n\t}\r\n\r\n\t/**\r\n\t * A base value.\r\n\t *\r\n\t * This is a threshold value that will divide \"positive\" and \"negative\"\r\n\t * value ranges.\r\n\t *\r\n\t * Other scale-related functionality also depend on base value. E.g. stacks,\r\n\t * value-dependent coloring, etc.\r\n\t *\r\n\t * @param value Base value\r\n\t */\r\n\tpublic set baseValue(value: number) {\r\n\t\tthis._baseValue = value;\r\n\t\tthis.invalidateLayout();\r\n\t\tthis.invalidateSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\r\n\t\tlet baseValue = this._baseValue;\r\n\t\tif (this.logarithmic) {\r\n\t\t\tbaseValue = this.min;\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn baseValue;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"baseValue\", baseValue);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis\r\n\t *\r\n\t * An alias to `valueToPosition()`.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Position\r\n\t */\r\n\tpublic anyToPosition(value: number): number {\r\n\t\treturn this.valueToPosition(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic valueToPoint(value: number): IOrientationPoint {\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: number): IOrientationPoint {\r\n\t\treturn this.valueToPoint(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return relative position\r\n\t */\r\n\tpublic valueToPosition(value: number): number {\r\n\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t// todo: think if possible to take previous value and do not go through all previous breaks\r\n\t\t\tlet min: number = this.min;\r\n\t\t\tlet max: number = this.max;\r\n\r\n\t\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\t\t\t\tlet difference: number = this._difference;\r\n\r\n\t\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\r\n\t\t\t\t\t\t\tif (value < startValue) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: startValue, end: endValue }, { start: min, end: max })) { // todo: check this once and set some flag in axisBreak\r\n\t\t\t\t\t\t\t\tstartValue = Math.max(startValue, min);\r\n\t\t\t\t\t\t\t\tendValue = Math.min(endValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\t// value to the right of break end\r\n\t\t\t\t\t\t\t\tif (value > endValue) {\r\n\t\t\t\t\t\t\t\t\tmin += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value to the left of break start\r\n\t\t\t\t\t\t\t\telse if (value < startValue) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvalue = startValue + (value - startValue) * breakSize;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet position;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tposition = (value - min) / difference;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet treatZeroAs = this.treatZeroAs;\r\n\t\t\t\t\tif ($type.isNumber(treatZeroAs)) {\r\n\t\t\t\t\t\tif (value <= treatZeroAs) {\r\n\t\t\t\t\t\t\tvalue = treatZeroAs;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tposition = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//position = $math.round(position, 10);\r\n\r\n\t\t\t\treturn position;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n\t */\r\n\tpublic invalidateLabels() {\r\n\t\tsuper.invalidateLabels();\r\n\t\tif (this.dataItems) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tdataItem.value = undefined;\r\n\t\t\t})\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an relative position to a corresponding value within\r\n\t * axis' scale.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic positionToValue(position: number): number {\r\n\r\n\t\tlet min: number = this.min;\r\n\t\tlet max: number = this.max;\r\n\r\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet difference: number = max - min; //no need to adjust!\r\n\r\n\t\t\tlet value: number = null;\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// in case we have some axis breaks\r\n\t\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\t\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\t\t\t\tlet breakStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet breakEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\r\n\r\n\t\t\t\t\t\t\tif (breakStartValue > max) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {\r\n\r\n\t\t\t\t\t\t\t\tbreakStartValue = $math.max(breakStartValue, min);\r\n\t\t\t\t\t\t\t\tbreakEndValue = $math.min(breakEndValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tdifference -= (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\r\n\t\t\t\t\t\t\t\t// position to the right of break end\r\n\t\t\t\t\t\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\t\t\t\t\t\tmin += (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// position to the left of break start\r\n\t\t\t\t\t\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tlet breakPosition: number = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\t\t\t\t\t\tvalue = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(value)) {\r\n\t\t\t\tif (this.logarithmic) {\r\n\t\t\t\t\tvalue = Math.pow(Math.E, (position * ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E)) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = position * difference + min;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an X coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param x  X (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic xToValue(x: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: x, y: 0 }));\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an Y coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param y  Y (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic yToValue(y: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: 0, y: y }));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\tif (this.renderer instanceof AxisRendererY) {\r\n\t\t\treturn 1 - this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected animateMinMax(min: number, max: number): Animation {\r\n\t\treturn this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates smallest and biggest value for the axis scale.\r\n\t * @ignore\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic getMinMax() {\r\n\r\n\t\tthis.updateGridCount();\r\n\r\n\t\tlet min: number = Number.POSITIVE_INFINITY;\r\n\t\tlet max: number = Number.NEGATIVE_INFINITY;\r\n\r\n\t\t// only if min and max are not set from outside, we go through min and max influencers\r\n\t\tif (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (!series.ignoreMinMax) {\r\n\t\t\t\t\t// check min\r\n\t\t\t\t\tlet seriesMin: number = series.min(this);\r\n\t\t\t\t\tif ($type.isNumber(seriesMin) && (seriesMin < min)) {\r\n\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// check max\r\n\t\t\t\t\tlet seriesMax: number = series.max(this);\r\n\r\n\t\t\t\t\tif ($type.isNumber(seriesMax) && (seriesMax > max)) {\r\n\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.includeRangesInMinMax) {\r\n\t\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\r\n\t\t\t\t\t\tif (minValue < min || !$type.isNumber(min)) {\r\n\t\t\t\t\t\t\tmin = minValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (maxValue > max || !$type.isNumber(max)) {\r\n\t\t\t\t\t\t\tmax = maxValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.logarithmic) {\r\n\t\t\tlet treatZeroAs = this.treatZeroAs;\r\n\t\t\tif ($type.isNumber(treatZeroAs)) {\r\n\t\t\t\tif (min <= 0) {\r\n\t\t\t\t\tmin = treatZeroAs;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\tthis.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (min == 0 && max == 0) {\r\n\t\t\tmax = 0.9;\r\n\t\t\tmin = -0.9;\r\n\t\t}\r\n\r\n\t\t// if defined from outside\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._minReal = min;\r\n\t\tthis._maxReal = max;\r\n\r\n\t\tif (min == Number.POSITIVE_INFINITY) {\r\n\t\t\tmin = undefined;\r\n\t\t}\r\n\t\tif (max == Number.NEGATIVE_INFINITY) {\r\n\t\t\tmax = undefined;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(min, max); // previously it was max-min, but not worked well\r\n\r\n\r\n\t\tmin = this.fixMin(min);\r\n\t\tmax = this.fixMax(max);\r\n\r\n\t\t// this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\r\n\t\tif (max - min <= 1 / Math.pow(10, 15)) {\r\n\t\t\tif (max - min != 0) {\r\n\t\t\t\tthis._deltaMinMax = (max - min) / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// the number by which we need to raise 10 to get difference\r\n\t\t\t\tlet exponent: number = Math.log(Math.abs(max)) * Math.LOG10E;\r\n\r\n\t\t\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\t\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t\t\t// reduce this number by 10 times\r\n\t\t\t\tpower = power / 10;\r\n\r\n\t\t\t\tthis._deltaMinMax = power;\r\n\t\t\t}\r\n\t\t\tmin -= this._deltaMinMax;\r\n\t\t\tmax += this._deltaMinMax;\r\n\t\t}\r\n\r\n\t\tmin -= (max - min) * this.extraMin;\r\n\t\tmax += (max - min) * this.extraMax;\r\n\r\n\t\tlet strict = this.strictMinMax;\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tstrict = true;\r\n\t\t}\r\n\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\tdif = max - min;  //new\r\n\r\n\t\t// do it for the second time (importat!)\r\n\t\tminMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\t// return min max if strict\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\t\tmin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = this._minReal;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\t\tmax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmax = this._maxReal;\r\n\t\t\t}\r\n\r\n\t\t\tif (max - min <= 0.00000001) {\r\n\t\t\t\tmin -= this._deltaMinMax;\r\n\t\t\t\tmax += this._deltaMinMax;\r\n\t\t\t}\r\n\r\n\t\t\tmin -= (max - min) * this.extraMin;\r\n\t\t\tmax += (max - min) * this.extraMax;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tthis._step = minMaxStep.step;\r\n\r\n\t\tif (!$type.isNumber(min) && !$type.isNumber(max)) {\r\n\t\t\tthis.start = 0;\r\n\t\t\tthis.end = 1;\r\n\r\n\t\t\tthis.renderer.labels.each((label) => {\r\n\t\t\t\tlabel.dataItem.text = \"\";\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// checking isNumber is good when all series are hidden\r\n\t\tif ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet animation = this._minMaxAnimation;\r\n\r\n\t\t\tif (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tanimation = this.animateMinMax(min, max);\r\n\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.events.on(\"animationprogress\", this.validateDataItems, this);\r\n\r\n\t\t\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\t\t//this.validateDataItems();\r\n\t\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\t\tseries.validate();\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis._minMaxAnimation = animation;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\tseries.invalidate();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._minAdjusted = min;\r\n\t\t\t\t\tthis._maxAdjusted = max;\r\n\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tthis.invalidateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\r\n\t\t\t\t\tthis._saveMinMax(min, max);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._extremesChanged = false;\r\n\t\tthis._difference = this.adjustDifference(min, max);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\t// will fail if 0\r\n\t\tif (gridCount <= 1) {\r\n\t\t\tgridCount = 1;\r\n\t\t}\r\n\r\n\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\tlet initialMin: number = min;\r\n\t\tlet initialMax: number = max;\r\n\r\n\t\t// in case min and max is the same, use max\r\n\t\tif (difference === 0) {\r\n\t\t\tdifference = Math.abs(max);\r\n\t\t}\r\n\r\n\t\t// the number by which we need to raise 10 to get difference\r\n\t\tlet exponent: number = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\r\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t// reduce this number by 10 times\r\n\t\tpower = power / 10;\r\n\r\n\t\tlet extra: number = power;\r\n\t\tif (strictMode) {\r\n\t\t\textra = 0;\r\n\t\t}\r\n\r\n\t\tif (!this.logarithmic) {\r\n\r\n\t\t\t// round down min\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin = Math.floor(min / power) * power;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.ceil(max / power) * power;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.ceil(min / power) * power - extra;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.floor(max / power) * power + extra;\r\n\t\t\t}\r\n\r\n\t\t\t// don't let min go below 0 if real min is >= 0\r\n\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\tmin = 0;\r\n\t\t\t}\r\n\t\t\t// don't let max go above 0 if real max is <= 0\r\n\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\tmax = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\t//throw Error(\"Logarithmic value axis can not have values <= 0.\");\r\n\t\t\t\tmin = this.baseValue;\r\n\t\t\t}\r\n\r\n\t\t\t// @todo: think of a better way or to restrict zooming when no series are selected\r\n\t\t\tif (min == Infinity) {\r\n\t\t\t\tmin = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (max == -Infinity) {\r\n\t\t\t\tmax = 10;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tif (this._minDefined > 0) {\r\n\t\t\t\t\tmin = this._minDefined;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmin = min;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._maxDefined > 0) {\r\n\t\t\t\t\tmax = max;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\r\n\t\t\t\tmax = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\r\n\t\t\t}\r\n\t\t}\r\n\t\t// repeat diff, exponent and power again with rounded values\r\n\t\t//difference = this.adjustDifference(min, max);\r\n\t\t/*\r\n\r\n\t\t\t\tif(min > initialMin){\r\n\t\t\t\t\tmin = initialMin;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(max < initialMax){\r\n\t\t\t\t\tmax = initialMax;\r\n\t\t\t\t}\r\n\t\t*/\r\n\r\n\t\texponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\t\tpower = Math.pow(10, Math.floor(exponent));\r\n\t\tpower = power / 10;\r\n\r\n\t\t// approximate difference between two grid lines\r\n\t\tlet step = Math.ceil((difference / gridCount) / power) * power;\r\n\r\n\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\r\n\r\n\t\t// TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\r\n\t\t// the step should divide by  2, 5, and 10.\r\n\t\tlet stepDivisor: number = Math.ceil(step / stepPower); // number 0 - 10\r\n\r\n\r\n\t\tif (stepDivisor > 5) {\r\n\t\t\tstepDivisor = 10;\r\n\t\t}\r\n\t\telse if (stepDivisor <= 5 && stepDivisor > 2) {\r\n\t\t\tstepDivisor = 5;\r\n\t\t}\r\n\r\n\t\t// now get real step\r\n\t\tstep = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\r\n\r\n\t\tif (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\r\n\t\t\tstep = $math.ceil(step, this.maxPrecision);\r\n\t\t}\r\n\r\n\t\tlet decCount: number = 0;\r\n\t\t// in case numbers are smaller than 1\r\n\t\tif (stepPower < 1) {\r\n\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\tdecCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\r\n\t\t\t// round step\r\n\t\t\tstep = $math.round(step, decCount);\r\n\t\t}\r\n\t\tif (!this.logarithmic) {\r\n\t\t\t// final min and max\r\n\t\t\tlet minCount = Math.floor(min / step);\r\n\r\n\t\t\tmin = $math.round(step * minCount, decCount);\r\n\r\n\t\t\tlet maxCount: number;\r\n\r\n\t\t\tif (!strictMode) {\r\n\t\t\t\tmaxCount = Math.ceil(max / step);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxCount = Math.floor(max / step);\r\n\t\t\t}\r\n\r\n\t\t\tif (maxCount == minCount) {\r\n\t\t\t\tmaxCount++;\r\n\t\t\t}\r\n\r\n\t\t\tmax = $math.round(step * maxCount, decCount);\r\n\r\n\t\t\tif (max < initialMax) {\r\n\t\t\t\tmax = max + step;\r\n\t\t\t}\r\n\r\n\t\t\tif (min > initialMin) {\r\n\t\t\t\tmin = min - step;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * A minimum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Min value\r\n\t */\r\n\tpublic set min(value: number | undefined) {\r\n\t\tif (this._minDefined != value) {\r\n\t\t\tthis._minDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min value\r\n\t */\r\n\tpublic get min(): number | undefined {\r\n\t\tlet min = this._minAdjusted;\r\n\t\tif (!$type.isNumber(min)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\r\n\t/**\r\n\t * Min value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Min value\r\n\t */\r\n\tpublic get minDefined(): number {\r\n\t\treturn this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Max value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Man value\r\n\t */\r\n\tpublic get maxDefined(): number {\r\n\t\treturn this._maxDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting minimum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n\t * we asked to expand minimum value by 50% (0.5).\r\n\t *\r\n\t * NOTE: this setting is not compatible with `strictMinMax`.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMin(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMin\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get extraMin(): number {\r\n\t\treturn this.getPropertyValue(\"extraMin\");\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting maximum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n\t * we asked to expand maximum value by 50% (0.5).\r\n\t *\r\n\t * NOTE: this setting is not compatible with `strictMinMax`.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMax(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMax\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min multiplier\r\n\t */\r\n\tpublic get extraMax(): number {\r\n\t\treturn this.getPropertyValue(\"extraMax\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current calculated delta in values between two adjacent grid lines (step).\r\n\t *\r\n\t * This is a read-only value and cannot be used to set actual step.\r\n\t *\r\n\t * @readonly\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n\t * @return [description]\r\n\t */\r\n\tpublic get step(): number {\r\n\t\treturn this._step;\r\n\t}\r\n\r\n\t/**\r\n\t * A maximum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Max value\r\n\t */\r\n\tpublic set max(value: number | undefined) {\r\n\t\tif (this._maxDefined != value) {\r\n\t\t\tthis._maxDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max value\r\n\t */\r\n\tpublic get max(): number | undefined {\r\n\t\tlet max = this._maxAdjusted;\r\n\t\tif (!$type.isNumber(max)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\t\treturn max;\r\n\t}\r\n\r\n\t/**\r\n\t * By default the axis will adjust precision of all numbers to match number\r\n\t * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n\t *\r\n\t * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n\t * precision or number format settings are set.\r\n\t *\r\n\t * IMPORTANT: This setting will be ignored if your number format uses\r\n\t * modifiers, e.g. `\"#a\"`.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.9.14\r\n\t * @param  value  Adjust precision\r\n\t */\r\n\tpublic set adjustLabelPrecision(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Adjust precision\r\n\t */\r\n\tpublic get adjustLabelPrecision(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustLabelPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Used for the Series to register itself as the user of this Axis.\r\n\t *\r\n\t * This will also decorate both the Series and Axis with event handlers, used\r\n\t * to redraw on Axis position/zoom change.\r\n\t *\r\n\t * A disposer for those events is returned, so that they can be disposed\r\n\t * together with Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series  Series\r\n\t * @return Disposer for events\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\treturn new MultiDisposer([\r\n\t\t\tsuper.registerSeries(series),\r\n\r\n\t\t\tseries.events.on(\"extremeschanged\", this.handleExtremesChange, this, false),\r\n\t\t\tseries.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false),\r\n\t\t\tthis.events.on(\"extremeschanged\", series.invalidate, series, false)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * Perform tasks after Axis zoom.\r\n\t */\r\n\tprotected handleSelectionExtremesChange(): void {\r\n\r\n\t\tlet selectionMin: number;\r\n\t\tlet selectionMax: number;\r\n\r\n\t\tlet allHidden: boolean = true;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\r\n\r\n\t\t\t\tif (series.visible && !series.isHiding) {\r\n\t\t\t\t\tallHidden = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesSelectionMin: number = series.selectionMin(this);\r\n\t\t\t\tlet seriesSelectionMax: number = series.selectionMax(this);\r\n\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMin)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMin) || (seriesSelectionMin < selectionMin)) {\r\n\t\t\t\t\t\tselectionMin = seriesSelectionMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// check max\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMax)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMax) || (seriesSelectionMax > selectionMax)) {\r\n\t\t\t\t\t\tselectionMax = seriesSelectionMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (this.includeRangesInMinMax) {\r\n\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\t\t\t\t\tif (minValue < selectionMin) {\r\n\t\t\t\t\t\tselectionMin = minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (maxValue > selectionMax) {\r\n\t\t\t\t\t\tselectionMax = maxValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\r\n\t\t//$iter.each(this.series.iterator(), (series) => {\r\n\t\t//\tif (!series.appeared) {\r\n\t\t//\t\tallHidden = true;\r\n\t\t//\t}\r\n\t\t//})\r\n\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMin = this.min;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMin = this._minReal;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMax = this.max;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMax = this._maxReal;\r\n\t\t}\r\n\r\n\t\tif (selectionMin == selectionMax) {\r\n\r\n\t\t\tselectionMin -= this._deltaMinMax;\r\n\t\t\tselectionMax += this._deltaMinMax;\r\n\r\n\t\t\tlet minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\r\n\t\t\tselectionMin = minMaxStep2.min;\r\n\t\t\tselectionMax = minMaxStep2.max;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tselectionMin -= (selectionMax - selectionMin) * this.extraMin;\r\n\t\tselectionMax += (selectionMax - selectionMin) * this.extraMax;\r\n\r\n\t\tselectionMin = $math.fitToRange(selectionMin, this.min, this.max);\r\n\t\tselectionMax = $math.fitToRange(selectionMax, this.min, this.max);\r\n\r\n\t\t// do it for the second time !important\r\n\t\tdif = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tminMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tselectionMin = $math.max(selectionMin, this._minDefined);\r\n\t\t\tselectionMax = $math.min(selectionMax, this._maxDefined);\r\n\t\t}\r\n\t\tlet step = minMaxStep.step;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tminMaxStep = this.syncAxes(selectionMin, selectionMax, step)\r\n\t\t\tselectionMin = minMaxStep.min;\r\n\t\t\tselectionMax = minMaxStep.max;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t\tstep = minMaxStep.step;\r\n\r\n\t\t// needed because of grouping\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\r\n\t\tlet start: number = this.valueToPosition(selectionMin);\r\n\t\tlet end: number = this.valueToPosition(selectionMax);\r\n\r\n\t\t// in case all series are hidden or hiding, full zoomout\r\n\t\tif (allHidden && !this.syncWithAxis) {\r\n\t\t\tstart = 0;\r\n\t\t\tend = 1;\r\n\t\t}\r\n\r\n\t\tlet declination = 0;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tdeclination = 5;\r\n\t\t\tthis.setCache(selectionMin + \"-\" + selectionMax, step);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\r\n\t\t\t\tthis._dsc = true;\r\n\t\t\t}\r\n\t\t\tthis._step = step;\r\n\t\t\tthis._minZoomed = selectionMin;\r\n\t\t\tthis._maxZoomed = selectionMax;\r\n\t\t}\r\n\r\n\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tthis.zoom({ start: start, end: end }, false, false, declination);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether to blindly use exact `min` and `max` values set by user\r\n\t * when generating Axis scale.\r\n\t *\r\n\t * If not set, the Axis might slightly adjust those values to accomodate a\r\n\t * better looking grid.\r\n\t *\r\n\t * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n\t * will result in fixing the scale of the axis to actual lowest and highest\r\n\t * values in the series within currently selected scope.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use exact values?\r\n\t */\r\n\tpublic set strictMinMax(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"strictMinMax\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use exact values?\r\n\t */\r\n\tpublic get strictMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"strictMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this axis should use a logarithmic scale.\r\n\t *\r\n\t * Please note that logarithmic axis can **only** accommodate values bigger\r\n\t * than zero.\r\n\t *\r\n\t * Having zero or negative values will result in error and failure of the\r\n\t * whole chart.\r\n\t *\r\n\t * @param value Logarithmic scale?\r\n\t */\r\n\tpublic set logarithmic(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"logarithmic\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.invalidateDataItems();\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Logarithmic scale?\r\n\t */\r\n\tpublic get logarithmic(): boolean {\r\n\t\treturn this.getPropertyValue(\"logarithmic\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if a current selection (zoom) should be kept across data updates.\r\n\t *\r\n\t * If your axis is zoomed while chart's data is updated, the axis will try\r\n\t * to retain the same start and end values.\r\n\t *\r\n\t * You can also use this to initially pre-zoom axis:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"keepSelection\": true,\r\n\t *     \"start\": 0.5,\r\n\t *     \"end\": 0.7\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will start the chart zoomed from the middle of the actual scope\r\n\t * to 70%.\r\n\t *\r\n\t * @since 4.1.1\r\n\t * @default false\r\n\t * @param  value  Preseve zoom after data update?\r\n\t */\r\n\tpublic set keepSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"keepSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Preseve zoom after data update?\r\n\t */\r\n\tpublic get keepSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"keepSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, values of axis ranges will be included when calculating\r\n\t * range of values / scale of the [[ValueAxis]].\r\n\t *\r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Include ranges?\r\n\t */\r\n\tpublic set includeRangesInMinMax(value: boolean) {\r\n\t\tthis.setPropertyValue(\"includeRangesInMinMax\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Include ranges?\r\n\t */\r\n\tpublic get includeRangesInMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"includeRangesInMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of decimals to allow when placing grid lines and labels\r\n\t * on axis.\r\n\t *\r\n\t * Set it to `0` (zero) to force integer-only axis labels.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return max precision\r\n\t */\r\n\tpublic get maxPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"maxPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * This setting allows using bigger precision for numbers displayed in axis\r\n\t * tooltip.\r\n\t *\r\n\t * Please note that this setting indicates additional decimal places to\r\n\t * automatically-calculated axis number precision.\r\n\t *\r\n\t * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n\t * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n\t * like 0.12, 0.25, etc. (two decimal places).\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.8.3\r\n\t * @param  value  Extra decimals\r\n\t */\r\n\tpublic set extraTooltipPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Extra decimals\r\n\t */\r\n\tpublic get extraTooltipPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"extraTooltipPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tthis._extremesChanged = true;\r\n\t\tthis.getMinMax();\r\n\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tlet mw = 0;\r\n\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tif (dataItem.label && dataItem.label.pixelWidth > mw) {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  ?\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  ?\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueX\";\r\n\t\t}\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  Stack ID\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start     [description]\r\n\t * @param end       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: number, end: number, location?: number): string {\r\n\t\tlet startPosition: number = this.valueToPosition(start);\r\n\t\tlet endPosition: number = this.valueToPosition(end);\r\n\r\n\t\treturn this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\r\n\t\tlet valueStr = this.tooltip.numberFormatter.format(value);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t *\r\n\t * @param startValue      Start value\r\n\t * @param endValue        End value\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tlet start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\tlet end: number = (endValue - this.min) / (this.max - this.min);\r\n\r\n\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * A smallest value in axis scale within current zoom.\r\n\t *\r\n\t * @return Min zoom value\r\n\t */\r\n\tpublic get minZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.max(this.min, this._minZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._minZoomed\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A biggest value in axis scale within current zoom.\r\n\t * @return [description]\r\n\t */\r\n\tpublic get maxZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.min(this.max, this._maxZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._maxZoomed;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t// break difference\r\n\t\t\t\tlet axisBreakDif: number = endValue - startValue;\r\n\t\t\t\tlet axisBreakGridCount: number = Math.ceil(axisBreakDif * axisBreak.breakSize) * this._gridCount / (this.max - this.min);\r\n\r\n\t\t\t\t// calculate min, max and step for axis break\r\n\t\t\t\tlet breakMinMaxStep = this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\r\n\r\n\t\t\t\taxisBreak.adjustedStep = breakMinMaxStep.step;\r\n\t\t\t\taxisBreak.adjustedMin = breakMinMaxStep.min;\r\n\t\t\t\taxisBreak.adjustedMax = breakMinMaxStep.max;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\treturn this.numberFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific value\r\n\t *\r\n\t * @param value Value\r\n\t */\r\n\tpublic showTooltipAt(value: number) {\r\n\t\tthis.showTooltipAtPosition(this.valueToPosition(value));\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.min = source.min;\r\n\t\tthis.max = source.max;\r\n\t\tthis.calculateTotals = source.calculateTotals;\r\n\t\tthis._baseValue = source.baseValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Enables syncing of grid with another axis.\r\n\t *\r\n\t * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n\t * to maintain its scale in such way that its grid matches target axis grid.\r\n\t *\r\n\t * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n\t * own risk, as it may not work in 100% of the scenarios.\r\n\t *\r\n\t * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n\t * `sequencedInterpolation` settings.\r\n\t * \r\n\t * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n\t * you do not add a scrollbar in the same direction as synced axes. For\r\n\t * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n\t * your chart. It will create anomalies when used.\r\n\t *\r\n\t * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n\t * its `behavior` set to either `zoomY` or `zoomXY`.\r\n\t *\r\n\t * @since 4.8.1\r\n\t * @param  axis  Target axis\r\n\t */\r\n\tpublic set syncWithAxis(axis: ValueAxis) {\r\n\t\tif (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\r\n\t\t\tif (axis) {\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\r\n\t\t\t\tthis.events.on(\"maxsizechanged\", () => {\r\n\t\t\t\t\tthis.clearCache();\r\n\t\t\t\t\tthis._disposers.push(registry.events.once(\"exitframe\", () => {\r\n\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t}))\r\n\t\t\t\t}, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Target axis\r\n\t */\r\n\tpublic get syncWithAxis(): ValueAxis {\r\n\t\treturn this.getPropertyValue(\"syncWithAxis\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set, zero values will be treated as this value.\r\n\t *\r\n\t * It is useful if you need to use data with zero-values on a logarithmic\r\n\t * axis scale.\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @param  value  Zero replacement value\r\n\t */\r\n\tpublic set treatZeroAs(value: number) {\r\n\t\tthis.setPropertyValue(\"treatZeroAs\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zero replacement value\r\n\t */\r\n\tpublic get treatZeroAs(): number {\r\n\t\treturn this.getPropertyValue(\"treatZeroAs\");\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs with a target axis.\r\n\t *\r\n\t * @param  min  Min\r\n\t * @param  max  Max\r\n\t * @param  step Step\r\n\t */\r\n\tprotected syncAxes(min: number, max: number, step: number) {\r\n\t\tlet axis = this.syncWithAxis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tif (!$type.isNumber(min)) {\r\n\t\t\t\tmin = this.min;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(max)) {\r\n\t\t\t\tmax = this.max;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(step)) {\r\n\t\t\t\tstep = this._step;\r\n\t\t\t}\r\n\r\n\t\t\tlet count: number = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\r\n\t\t\tlet currentCount = Math.round((max - min) / step);\r\n\r\n\t\t\tif ($type.isNumber(count) && $type.isNumber(currentCount)) {\r\n\t\t\t\tlet synced = false;\r\n\t\t\t\tlet c = 0\r\n\t\t\t\tlet diff = (max - min) * 0.01;\r\n\t\t\t\tlet omin = min;\r\n\t\t\t\tlet omax = max;\r\n\t\t\t\tlet ostep = step;\r\n\r\n\t\t\t\twhile (synced != true) {\r\n\t\t\t\t\tsynced = this.checkSync(omin, omax, ostep, count);\r\n\t\t\t\t\tc++;\r\n\t\t\t\t\tif (c > 1000) {\r\n\t\t\t\t\t\tsynced = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!synced) {\r\n\t\t\t\t\t\t//omin = min - diff * c;\r\n\r\n\t\t\t\t\t\tif (c / 3 == Math.round(c / 3)) {\r\n\t\t\t\t\t\t\tomin = min - diff * c;\r\n\t\t\t\t\t\t\tif (min >= 0 && omin < 0) {\r\n\t\t\t\t\t\t\t\tomin = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tomax = max + diff * c;\r\n\t\t\t\t\t\t\tif (omax <= 0 && omax > 0) {\r\n\t\t\t\t\t\t\t\tomax = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\r\n\t\t\t\t\t\tomin = minMaxStep.min;\r\n\t\t\t\t\t\tomax = minMaxStep.max;\r\n\t\t\t\t\t\tostep = minMaxStep.step;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmin = omin;\r\n\t\t\t\t\t\tmax = omax;\r\n\t\t\t\t\t\tstep = ostep;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if axis needs to be resunced with some other axis.\r\n\t */\r\n\tprotected checkSync(min: number, max: number, step: number, count: number): boolean {\r\n\t\tlet currentCount = (max - min) / step;\r\n\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\tif ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.syncWithAxis)) {\r\n\t\t\t\t\tconfig.syncWithAxis = this.map.getKey(config.syncWithAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected _saveMinMax(_min: number, _max: number) {\r\n\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\r\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;\r\n", "/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n", "/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { LineSeriesDataItem } from \"../series/LineSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { DateFormatter } from \"../../core/formatters/DateFormatter\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tskipEmptyPeriods?: boolean;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\ttooltipDateFormat?: string | Intl.DateTimeFormatOptions;\r\n\r\n\t/**\r\n\t * Indicates if data should be aggregated to composide data items if there\r\n\t * are more data items in selected range than `groupCount`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.7.0\r\n\t */\r\n\tgroupData?: boolean;\r\n\r\n\t/**\r\n\t * Indicates threshold of data items in selected range at which to start\r\n\t * aggregating data items if `groupData = true`.\r\n\t * \r\n\t * @default 200\r\n\t * @since 4.7.0\r\n\t */\r\n\tgroupCount?: number;\r\n\r\n\t/**\r\n\t * Disables automatic selection of data grouping intervals and always uses\r\n\t * `groupInterval` if set. Works only if `groupData = true`.\r\n\t * \r\n\t * @since 4.9.24\r\n\t */\r\n\tgroupInterval?: ITimeInterval;\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data by applying specific offset\r\n\t * in minutes.\r\n\t *\r\n\t * IMPORTANT: do not set `timezoneOffset` on both `DateAxis` and `dateFormatter`. It\r\n\t * will skew your results by applying offset twice.\r\n\t *\r\n\t * @since 4.8.5\r\n\t */\r\n\ttimezoneOffset?: number;\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data to specific named timezone,\r\n\t * e.g. `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`, etc.\r\n\t *\r\n\t * IMPORTANT: do not set `timezone` on both `DateAxis` and `dateFormatter`. It\r\n\t * will skew your results by applying timezone twice.\r\n\t * \r\n\t * @since 4.10.1\r\n\t */\r\n\ttimezone?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents {\r\n\t/**\r\n\t * Invoked when data grouping is on and grouping period is changed. You can find our the period via dateAxis.currentDataSetId property.\r\n\t */\r\n\tgroupperiodchanged: IDateAxisEvents;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/} got `DateAxis` documention\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\tprotected _gapBreaks: boolean = false;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * If data aggregation is enabled by setting Axis' `groupData = true`, the\r\n\t * chart will try to aggregate data items into grouped data items.\r\n\t *\r\n\t * If there are more data items in selected period than `groupCount`, it will\r\n\t * group data items into bigger period.\r\n\t *\r\n\t * For example seconds might be grouped into 10-second aggregate data items.\r\n\t *\r\n\t * This setting indicates what group intervals can the chart group to.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { timeUnit: \"millisecond\", count: 1},\r\n\t *   { timeUnit: \"millisecond\", count: 10 },\r\n\t *   { timeUnit: \"millisecond\", count: 100 },\r\n\t *   { timeUnit: \"second\", count: 1 },\r\n\t *   { timeUnit: \"second\", count: 10 },\r\n\t *   { timeUnit: \"minute\", count: 1 },\r\n\t *   { timeUnit: \"minute\", count: 10 },\r\n\t *   { timeUnit: \"hour\", count: 1 },\r\n\t *   { timeUnit: \"day\", count: 1 },\r\n\t *   { timeUnit: \"week\", count: 1 },\r\n\t *   { timeUnit: \"month\", count: 1 },\r\n\t *   { timeUnit: \"year\", count: 1 }\r\n\t * ]\r\n\t * ```\r\n\t * `groupData = true` does not work in combination with `skipEmptyPeriods = true`.\r\n\t * \r\n\t * @since 4.7.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t */\r\n\tpublic groupIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the appropriate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions> = new Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions> = new Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * This is base interval of the main data set.\r\n\t */\r\n\tprotected _mainBaseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * This is base interval of the currently selected data set.\r\n\t */\r\n\tprotected _groupInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t */\r\n\tprotected _prevSeriesTime: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _firstWeekDay: number = 1;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _df: DateFormatter;\r\n\r\n\t/**\r\n\t * A collection of start timestamps to use as axis' min timestamp for\r\n\t * particular data item item periods.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @readonly\r\n\t */\r\n\tpublic groupMin: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A collection of start timestamps to use as axis' max timestamp for\r\n\t * particular data item item periods.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @readonly\r\n\t */\r\n\tpublic groupMax: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * Date of the last shown axis tooltip.\r\n\t *\r\n\t * @since 4.9.7\r\n\t * @readonly\r\n\t */\r\n\tpublic tooltipDate: Date;\r\n\r\n\r\n\tprotected _intervalMax: { [index: string]: number } = {};\r\n\tprotected _intervalMin: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\t\tthis.snapTooltip = true;\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.setPropertyValue(\"groupData\", false);\r\n\t\tthis.groupCount = 200;\r\n\r\n\t\tthis.events.on(\"parentset\", this.getDFFormatter, this, false);\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\tthis.groupIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet baseDuration = this.baseDuration;\r\n\t\tlet periodCount: number = (this.max - this.min) / baseDuration;\r\n\r\n\t\tthis._firstWeekDay = this.getFirstWeekDay();\r\n\t\tthis.getDFFormatter();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tlet mainBaseDuration = $time.getDuration(this.mainBaseInterval.timeUnit, this.mainBaseInterval.count)\r\n\r\n\t\tthis.maxZoomFactor = Math.max(1, (this.max - this.min) / mainBaseDuration);\r\n\r\n\t\tthis._deltaMinMax = this.baseDuration / 2;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getIntervalMax(interval: ITimeInterval): number {\r\n\t\treturn this._intervalMax[interval.timeUnit + interval.count];\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getIntervalMin(interval: ITimeInterval): number {\r\n\t\treturn this._intervalMin[interval.timeUnit + interval.count];\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet difference = this.adjustDifference(this._minZoomed, this._maxZoomed);\r\n\t\tlet dataSetChanged = false;\r\n\r\n\t\t// if data has to be grouped, choose interval and set dataset\r\n\t\tif (this.groupData && $type.hasValue(difference)) {\r\n\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\r\n\t\t\tconst min = this.getIntervalMin(mainBaseInterval);\r\n\t\t\tconst max = this.getIntervalMax(mainBaseInterval);\r\n\r\n\t\t\tlet selectionMin = min + (max - min) * this.start;\r\n\t\t\tlet selectionMax = min + (max - min) * this.end;\r\n\t\t\tlet diff = this.adjustDifference(selectionMin, selectionMax);\r\n\r\n\t\t\tlet modifiedDifference = diff + (this.startLocation + (1 - this.endLocation)) * this.baseDuration;\r\n\r\n\t\t\tlet groupInterval: ITimeInterval;\r\n\t\t\tif (this.groupInterval) {\r\n\t\t\t\tgroupInterval = { ...this.groupInterval }\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgroupInterval = this.chooseInterval(0, modifiedDifference, this.groupCount, this.groupIntervals);\r\n\r\n\t\t\t\tif ($time.getDuration(groupInterval.timeUnit, groupInterval.count) < $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count)) {\r\n\t\t\t\t\tgroupInterval = { ...mainBaseInterval };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._groupInterval = groupInterval;\r\n\t\t\tlet newId = groupInterval.timeUnit + groupInterval.count;\r\n\t\t\tif (this._currentDataSetId != newId) {\r\n\t\t\t\tthis._currentDataSetId = newId;\r\n\t\t\t\tthis.dispatch(\"groupperiodchanged\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tif (series.setDataSet(this._currentDataSetId)) {\r\n\t\t\t\t\t\tdataSetChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, difference, this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tthis._gridDate = $time.round(\r\n\t\t\tnew Date(this.minZoomed - $time.getDuration(gridInterval.timeUnit, gridInterval.count)),\r\n\t\t\tgridInterval.timeUnit,\r\n\t\t\tgridInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tnew Date(this.min),\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\tlet minZoomed = $time.round(\r\n\t\t\t\t\tnew Date(this._minZoomed + this.baseDuration * 0.05),\r\n\t\t\t\t\tthis.baseInterval.timeUnit, this.baseInterval.count,\r\n\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\tundefined,\r\n\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t).getTime();\r\n\t\t\t\tlet minZoomedStr = minZoomed.toString();\r\n\t\t\t\tlet startDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(minZoomedStr + series.currentDataSetId);\r\n\r\n\t\t\t\tlet startIndex: number = 0;\r\n\t\t\t\tif (this.start != 0) {\r\n\t\t\t\t\tif (startDataItem) {\r\n\t\t\t\t\t\tstartDataItem = this.findFirst(startDataItem, minZoomed, field);\r\n\t\t\t\t\t\tstartIndex = startDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstartIndex = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet baseInterval = this.baseInterval;\r\n\t\t\t\tlet maxZoomed = $time.add(\r\n\t\t\t\t\t$time.round(\r\n\t\t\t\t\t\tnew Date(this._maxZoomed),\r\n\t\t\t\t\t\tbaseInterval.timeUnit,\r\n\t\t\t\t\t\tbaseInterval.count,\r\n\t\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t),\r\n\t\t\t\t\tbaseInterval.timeUnit,\r\n\t\t\t\t\tbaseInterval.count,\r\n\t\t\t\t\tthis._df.utc\r\n\t\t\t\t).getTime();\r\n\r\n\t\t\t\tlet maxZoomedStr = maxZoomed.toString();\r\n\t\t\t\tlet endDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(maxZoomedStr + series.currentDataSetId);\r\n\t\t\t\tlet endIndex: number = series.dataItems.length;\r\n\t\t\t\tif (this.end != 1) {\r\n\t\t\t\t\tif (endDataItem) {\r\n\t\t\t\t\t\tendIndex = endDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmaxZoomed -= 1;\r\n\t\t\t\t\t\tendIndex = series.dataItems.findClosestIndex(maxZoomed, (x) => <number>x[field], \"right\");\r\n\t\t\t\t\t\t// not good - if end is in the gap, indexes go like 5,4,3,4,2,1\r\n\t\t\t\t\t\t//if (endIndex < series.dataItems.length) {\r\n\t\t\t\t\t\tendIndex++;\r\n\t\t\t\t\t\t//}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.max(this) < minZoomed) {\r\n\t\t\t\t\tseries.startIndex = series.dataItems.length;\r\n\t\t\t\t\tseries.endIndex = series.dataItems.length;\r\n\t\t\t\t\tseries.outOfRange = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.min(this) > maxZoomed) {\r\n\t\t\t\t\tseries.startIndex = 0;\r\n\t\t\t\t\tseries.endIndex = 0;\r\n\t\t\t\t\tseries.outOfRange = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.outOfRange = false;\r\n\t\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//\tconsole.log(series.name, startIndex, endIndex);\r\n\r\n\t\t\t\tif (!dataSetChanged && series.dataRangeInvalid) {\r\n\t\t\t\t\tseries.validateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprotected findFirst(dataItem: XYSeriesDataItem, time: number, key: string): XYSeriesDataItem {\r\n\t\tlet index = dataItem.index;\r\n\r\n\t\tif (index > 0) {\r\n\t\t\tlet series = dataItem.component;\r\n\t\t\tlet previousDataItem = series.dataItems.getIndex(index - 1);\r\n\r\n\t\t\tlet previousDate = (<any>previousDataItem)[key];\r\n\r\n\t\t\tif (!previousDate || previousDate.getTime() < time) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.findFirst(previousDataItem, time, key);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference(): number {\r\n\t\tlet minDifference = Number.MAX_VALUE;\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (minDifference > this._minDifference[series.uid]) {\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n\t\t\tminDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(series?: XYSeries): void {\r\n\t\tthis._firstWeekDay = this.getFirstWeekDay();\r\n\t\tif (series) {\r\n\t\t\tthis.seriesGroupUpdate(series);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tthis.seriesGroupUpdate(series);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\tprotected seriesGroupUpdate(series: XYSeries) {\r\n\t\tif (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.mainBaseInterval)) {\r\n\r\n\t\t\tseries._baseInterval[this.uid] = this.mainBaseInterval;\r\n\r\n\t\t\tseries.mainDataSet.each((dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tif (this.groupData) {\r\n\t\t\t\tthis.groupSeriesData(series);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates series group data.\r\n\t * \r\n\t * @param  series  Series\r\n\t * @ignore\r\n\t */\r\n\tpublic groupSeriesData(series: XYSeries): void {\r\n\t\tif (series.baseAxis == this && series.dataItems.length > 0 && !series.dataGrouped) {\r\n\r\n\t\t\tseries.bulletsContainer.removeChildren();\r\n\r\n\t\t\t// make array of intervals which will be used;\r\n\t\t\tlet intervals: ITimeInterval[] = [];\r\n\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\t\t\tlet mainIntervalDuration = $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count);\r\n\r\n\t\t\tthis.groupIntervals.each((interval) => {\r\n\t\t\t\tlet intervalDuration = $time.getDuration(interval.timeUnit, interval.count);\r\n\t\t\t\tif ((intervalDuration > mainIntervalDuration && intervalDuration < (this.max - this.min)) || this.groupInterval) {\r\n\t\t\t\t\tintervals.push(interval);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (series._dataSets) {\r\n\t\t\t\tseries._dataSets.each((key, dataItems) => {\r\n\t\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.dispose();\r\n\t\t\t\t\t})\r\n\t\t\t\t\tdataItems.clear();\r\n\t\t\t\t})\r\n\t\t\t\tseries._dataSets.clear();\r\n\t\t\t}\r\n\r\n\t\t\tseries.dataGrouped = true;\r\n\r\n\t\t\t$array.each(intervals, (interval) => {\r\n\r\n\t\t\t\t//let mainBaseInterval = this._mainBaseInterval;\r\n\t\t\t\tlet key = \"date\" + this.axisLetter;\r\n\r\n\t\t\t\t// create data set\r\n\t\t\t\tlet dataSetId = interval.timeUnit + interval.count;\r\n\t\t\t\t// todo: check where this clone goes\r\n\t\t\t\tlet dataSet = new OrderedListTemplate(series.mainDataSet.template.clone());\r\n\r\n\t\t\t\tseries.dataSets.setKey(dataSetId, dataSet);\r\n\r\n\t\t\t\tlet dataItems = series.mainDataSet;\r\n\t\t\t\tlet previousTime: number = Number.NEGATIVE_INFINITY;\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\tlet newDataItem: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet dataFields: string[] = [];\r\n\r\n\t\t\t\t$object.each(series.dataFields, (dfkey, df) => {\r\n\t\t\t\t\tlet dfk = <string>dfkey;\r\n\t\t\t\t\tif (dfk != key && dfk.indexOf(\"Show\") == -1) {\r\n\t\t\t\t\t\tdataFields.push(dfk);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tlet roundedDate: Date;\r\n\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\tlet date = dataItem.getDate(key);\r\n\t\t\t\t\tif (date) {\r\n\t\t\t\t\t\tlet time = date.getTime();\r\n\t\t\t\t\t\troundedDate = $time.round(\r\n\t\t\t\t\t\t\tnew Date(time),\r\n\t\t\t\t\t\t\tinterval.timeUnit,\r\n\t\t\t\t\t\t\tinterval.count,\r\n\t\t\t\t\t\t\tthis._df.firstDayOfWeek,\r\n\t\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tlet currentTime = roundedDate.getTime();\r\n\t\t\t\t\t\t// changed period\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (previousTime < currentTime) {\r\n\r\n\t\t\t\t\t\t\tif (newDataItem && series._adapterO) {\r\n\t\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t\tnewDataItem.values[vkey].value = series._adapterO.apply(\"groupDataItem\", {\r\n\t\t\t\t\t\t\t\t\t\tdataItem: newDataItem,\r\n\t\t\t\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\t\t\t\tvalue: newDataItem.values[vkey].value\r\n\t\t\t\t\t\t\t\t\t}).value;\r\n\r\n\t\t\t\t\t\t\t\t\tnewDataItem.values[vkey].workingValue = newDataItem.values[vkey].value\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tnewDataItem = dataSet.create();\r\n\r\n\t\t\t\t\t\t\tnewDataItem.dataContext = {};\r\n\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"dateX\", series.dataItems.template.locations.dateX, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"openDateX\", series.dataItems.template.locations.openDateX, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"dateY\", series.dataItems.template.locations.dateY, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"openDateY\", series.dataItems.template.locations.openDateY, 0);\r\n\r\n\t\t\t\t\t\t\tnewDataItem.component = series;\r\n\t\t\t\t\t\t\t// other Dates?\r\n\t\t\t\t\t\t\tnewDataItem.setDate(key, roundedDate);\r\n\t\t\t\t\t\t\tnewDataItem._index = i;\r\n\t\t\t\t\t\t\ti++;\r\n\r\n\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t//let groupFieldName = vkey + \"Group\";\r\n\t\t\t\t\t\t\t\tlet dvalues = dataItem.values[vkey];\r\n\t\t\t\t\t\t\t\tif (dvalues) {\r\n\t\t\t\t\t\t\t\t\tlet value = dvalues.value;\r\n\r\n\t\t\t\t\t\t\t\t\tif (series._adapterO) {\r\n\t\t\t\t\t\t\t\t\t\tvalue = series._adapterO.apply(\"groupValue\", {\r\n\t\t\t\t\t\t\t\t\t\t\tdataItem: dataItem,\r\n\t\t\t\t\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t\t\t\t\t\t}).value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tlet values = newDataItem.values[vkey];\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tvalues.value = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.workingValue = value;\r\n\r\n\t\t\t\t\t\t\t\t\t\tvalues.open = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.close = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.low = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.high = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.sum = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.average = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.count = 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tvalues.count = 0;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\tthis.postProcessSeriesDataItem(newDataItem, interval);\r\n\r\n\t\t\t\t\t\t\t$object.each(series.propertyFields, (key, fieldValue) => {\r\n\t\t\t\t\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\t\t\t\t\tlet value: any = (<any>dataItem.properties)[key];\r\n\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\t\t\t\t\tnewDataItem.hasProperties = true;\r\n\t\t\t\t\t\t\t\t\tnewDataItem.setProperty(f, value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tnewDataItem.groupDataItems = [dataItem];\r\n\t\t\t\t\t\t\tpreviousTime = currentTime;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (newDataItem) {\r\n\t\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t\tlet groupFieldName = (<any>series.groupFields)[vkey];\r\n\t\t\t\t\t\t\t\t\tlet dvalues = dataItem.values[vkey];\r\n\t\t\t\t\t\t\t\t\tif (dvalues) {\r\n\t\t\t\t\t\t\t\t\t\tlet value = dvalues.value;\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (series._adapterO) {\r\n\t\t\t\t\t\t\t\t\t\t\tvalue = series._adapterO.apply(\"groupValue\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\tdataItem: dataItem,\r\n\t\t\t\t\t\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t\t\t\t\t\t\t}).value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet values = newDataItem.values[vkey];\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(values.open)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.open = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.close = value;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (values.low > value || !$type.isNumber(values.low)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.low = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif (values.high < value || !$type.isNumber(values.high)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.high = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(values.sum)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.sum += value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.sum = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.count++;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.average = values.sum / values.count;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(values[groupFieldName])) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.value = values[groupFieldName];\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.workingValue = values.value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(dataItem.properties, newDataItem.properties);\r\n\r\n\t\t\t\t\t\t\t\t$object.each(series.propertyFields, (key, fieldValue) => {\r\n\t\t\t\t\t\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\t\t\t\t\t\tlet value: any = (<any>dataItem.properties)[key];\r\n\t\t\t\t\t\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\t\t\t\t\t\tnewDataItem.hasProperties = true;\r\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setProperty(f, value);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tnewDataItem.groupDataItems.push(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (newDataItem) {\r\n\t\t\t\t\t\t$utils.copyProperties(dataItem.dataContext, newDataItem.dataContext);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (newDataItem && series._adapterO) {\r\n\r\n\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\tnewDataItem.values[vkey].value = series._adapterO.apply(\"groupDataItem\", {\r\n\t\t\t\t\t\t\tdataItem: newDataItem,\r\n\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\tvalue: newDataItem.values[vkey].value\r\n\t\t\t\t\t\t}).value;\r\n\r\n\t\t\t\t\t\tnewDataItem.values[vkey].workingValue = newDataItem.values[vkey].value;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.calculateZoom();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getDFFormatter() {\r\n\t\tthis._df = this.dateFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem, interval?: ITimeInterval): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet intervalID = \"\";\r\n\t\tif (interval) {\r\n\t\t\tintervalID = interval.timeUnit + interval.count;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinterval = this.mainBaseInterval;\r\n\t\t}\r\n\r\n\t\tlet series: XYSeries = dataItem.component;\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet time = date.getTime();\r\n\r\n\t\t\tlet startDate: Date = $time.round(\r\n\t\t\t\tnew Date(time),\r\n\t\t\t\tinterval.timeUnit,\r\n\t\t\t\tinterval.count,\r\n\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\tthis._df.utc,\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\tthis._df.timezone\r\n\t\t\t);\r\n\t\t\tlet startTime = startDate.getTime();\r\n\t\t\tlet endDate: Date = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startTime, \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\t\t\tdataItemsByAxis.setKey(startTime + intervalID, dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\tthis._axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\t\t\t}\r\n\r\n\t\t\tlet date: Date = $time.round(\r\n\t\t\t\tnew Date(this.min),\r\n\t\t\t\ttimeUnit,\r\n\t\t\t\tcount,\r\n\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\tthis._df.utc,\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\tthis._df.timezone\r\n\t\t\t);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr + series.currentDataSetId);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t\tthis._gapBreaks = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\tif (axisBreaks) {\r\n\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t// process breaks\r\n\t\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\t\t\tlet gridDate = $time.round(\r\n\t\t\t\t\t\tnew Date(axisBreak.adjustedStartValue),\r\n\t\t\t\t\t\taxisBreak.gridInterval.timeUnit,\r\n\t\t\t\t\t\taxisBreak.gridInterval.count,\r\n\t\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this._df.utc);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getFirstWeekDay(): number {\r\n\t\tif (this._df) {\r\n\t\t\treturn this._df.firstDayOfWeek;\r\n\t\t}\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param date           [description]\r\n\t * @param intervalCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(\r\n\t\t\tdate,\r\n\t\t\ttimeUnit,\r\n\t\t\t1,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount, this._df.utc).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak && axisBreak.endDate) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(\r\n\t\t\t\tnewDate,\r\n\t\t\t\ttimeUnit,\r\n\t\t\t\trealIntervalCount,\r\n\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\tthis._df.utc,\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\tthis._df.timezone\r\n\t\t\t);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount, this._df.utc);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axisBreak  [description]\r\n\t * @param timeUnit   [description]\r\n\t * @param count      [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(\r\n\t\t\tdate,\r\n\t\t\ttimeUnit,\r\n\t\t\tcount,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate($time.copy(prevGridDate), intervalCount);\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this._df.utc);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this._df.utc)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this._df.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\t$iter.each(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count, this._df.utc).getTime();\r\n\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this._df.utc);\r\n\r\n\t\t\t\t\t\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this._df.utc)) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tlet text: string = this._df.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\t\t\tlet fillEndPosition = endPosition;\r\n\r\n\t\t\tif (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.bullet) {\r\n\t\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param min  Min timestamp\r\n\t * @param max  Max timestamp\r\n\t * @return Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet interval = this.baseInterval;\r\n\r\n\t\tlet startTime = $time.round(\r\n\t\t\tnew Date(value),\r\n\t\t\tinterval.timeUnit,\r\n\t\t\tinterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet interval = this.baseInterval;\r\n\r\n\t\tlet startTime = $time.round(\r\n\t\t\tnew Date(value),\r\n\t\t\tinterval.timeUnit,\r\n\t\t\tinterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param index      [description]\r\n\t * @param duration   [description]\r\n\t * @param gridCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number, intervals?: List<ITimeInterval>): ITimeInterval {\r\n\t\tif (!intervals) {\r\n\t\t\tintervals = this.gridIntervals;\r\n\t\t}\r\n\r\n\t\tlet gridInterval: ITimeInterval = intervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = intervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...intervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...intervals.getIndex(index - 1) };\r\n\t\t}\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...intervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < intervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount, intervals);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...intervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this._df.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param date  Date\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param date  Date or a timestamp\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param date Date\r\n\t * @return IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param key       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tlet workingValue = dataItem.values[key].workingValue;\r\n\t\tlet value = dataItem.values[key].value;\r\n\r\n\t\tlet difference = value - workingValue;\r\n\t\tstartTime -= difference;\r\n\t\tendTime -= difference;\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\r\n\t\tif ($type.isNumber(this.timezoneOffset)) {\r\n\t\t\tdate.setTime(date.getTime() + (date.getTimezoneOffset() - this.timezoneOffset) * 60000)\r\n\t\t\tdataItem.setValue(\"date\" + axisLetter, date.getTime(), 0);\r\n\t\t}\r\n\t\telse if ($type.hasValue(this.timezone)) {\r\n\t\t\tdate = $time.setTimezone(date, this.timezone);\r\n\t\t\tdataItem.setValue(\"date\" + axisLetter, date.getTime(), 0);\r\n\t\t\t(<any>dataItem)[\"date\" + axisLetter] = date;\r\n\t\t}\r\n\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime[series.uid];\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime[series.uid] = time;\r\n\r\n\t\tif (series._baseInterval[this.uid]) {\r\n\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\tif (baseInterval.timeUnit == \"month\") {\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 2) && baseInterval.count == 1) {\r\n\t\t\t\tbaseInterval.count = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 3) && baseInterval.count == 2) {\r\n\t\t\t\tbaseInterval.count = 3;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 6) && baseInterval.count == 5) {\r\n\t\t\t\tbaseInterval.count = 6;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\r\n\t\t\tbaseInterval.timeUnit = \"week\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\r\n\t\t\tbaseInterval.timeUnit = \"year\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\tthis._mainBaseInterval = baseInterval;\r\n\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * For best results, try to follow these values for `count`:\r\n\t *\r\n\t * When unit is \"month\", use 12 / count = round number\r\n\t * When unit is \"hour\", use 24 / count = round number\r\n\t * When unit is \"second\" and \"minute\", use 60 / count = round number\r\n\t *\r\n\t * @param timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tif (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n\t\t\tthis._baseInterval = timeInterval;\r\n\t\t\tthis._mainBaseInterval = timeInterval;\r\n\t\t\tif (!$type.isNumber(timeInterval.count)) {\r\n\t\t\t\ttimeInterval.count = 1;\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._groupInterval) {\r\n\t\t\treturn this._groupInterval;\r\n\t\t}\r\n\t\telse if (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates granularity of the data of source (unaggregated) data.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @return Granularity of the main data set\r\n\t */\r\n\tpublic get mainBaseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse if (this._mainBaseInterval) {\r\n\t\t\treturn this._mainBaseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t * * Some axis label overlapping might happen.\r\n\t * * This setting is not compatible with `groupData = true`.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._gapBreaks) {\r\n\t\t\t\tthis.axisBreaks.clear();\r\n\t\t\t\tthis._gapBreaks = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string | Intl.DateTimeFormatOptions) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string | Intl.DateTimeFormatOptions {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position\r\n\t * @return Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(\r\n\t\t\tdate,\r\n\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\tthis.baseInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tnew Date(this.min),\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tthis.tooltipDate = date;\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this._df.format(date, this.tooltipDateFormat, [\"day\", \"month\", \"week\", \"year\"].indexOf(this.baseInterval.timeUnit) == -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this._df.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn text;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", text);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position Source position\r\n\t * @param location  Location in the cell\r\n\t * @return Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation, axisLocation?: number): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(\r\n\t\t\tdate,\r\n\t\t\ttimeUnit,\r\n\t\t\tcount,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count, this._df.utc);\r\n\t\t}\r\n\r\n\t\tif (axisLocation > 0 && axisLocation < 1) {\r\n\t\t\tdate.setTime(date.getTime() + this.baseDuration * axisLocation);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\t\t\t\tif (!this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * If `findNearest` (third parameter) is set to `true`, the method will try\r\n\t * to locate nearest available data item if none is found directly under\r\n\t * `position`.\r\n\t *\r\n\t * @param series       Series\r\n\t * @param position     Position (px)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tlet value: number = this.positionToValue(position);\r\n\r\n\t\tlet location = 0.5;\r\n\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\tlocation = series.dataItems.template.locations.dateY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlocation = series.dataItems.template.locations.dateX;\r\n\t\t}\r\n\r\n\t\tlet deltaValue = value - location * this.baseDuration;\r\n\r\n\t\tlet date: Date = $time.round(\r\n\t\t\tnew Date(value),\r\n\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\tthis.baseInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\t\tlet nextDate: Date = $time.round(\r\n\t\t\tnew Date(value + this.baseDuration),\r\n\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\tthis.baseInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tif (nextDate.getTime() > date.getTime()) {\r\n\t\t\tif (Math.abs(nextDate.getTime() - deltaValue) < Math.abs(deltaValue - date.getTime())) {\r\n\t\t\t\tdate = nextDate;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\tlet dataItem = dataItemsByAxis.getKey(date.getTime() + series.currentDataSetId);\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\r\n\t\t\tlet key: \"dateX\" | \"dateY\";\r\n\r\n\t\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\t\tkey = \"dateY\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tkey = \"dateX\";\r\n\t\t\t}\r\n\r\n\t\t\tdataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), (x) => {\r\n\t\t\t\tif (x[key]) {\r\n\t\t\t\t\treturn <number>x[key].getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn -Infinity;\r\n\t\t\t\t}\r\n\t\t\t}, \"any\"));\r\n\t\t}\r\n\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\t// @todo Better format recognition\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this._df.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string | Intl.DateTimeFormatOptions {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected animateMinMax(min: number, max: number): Animation {\r\n\t\tlet animation = this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t\tanimation.events.on(\"animationprogress\", () => {\r\n\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tsuper.handleExtremesChange();\r\n\r\n\t\tif (this.groupData) {\r\n\t\t\tlet id = this.baseInterval.timeUnit + this.baseInterval.count;\r\n\t\t\tthis.groupMin[id] = this._finalMin;\r\n\t\t\tthis.groupMax[id] = this._finalMax;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param startDate       Start date\r\n\t * @param endValue        End date\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean, adjust?: boolean): void {\r\n\t\tstartDate = this._df.parse(startDate);\r\n\t\tendDate = this._df.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly, adjust);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t *\r\n\t * @param startValue      Start value\r\n\t * @param endValue        End value\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean, adjust?: boolean): void {\r\n\t\tif (!this.groupData) {\r\n\t\t\t//let start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\t\t//let end: number = (endValue - this.min) / (this.max - this.min);\r\n\r\n\t\t\tlet start = this.valueToPosition(startValue);\r\n\t\t\tlet end = this.valueToPosition(endValue);\r\n\r\n\t\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet difference = this.adjustDifference(startValue, endValue);\r\n\t\t\tlet isEnd = false;\r\n\t\t\tif (endValue == this.max) {\r\n\t\t\t\tisEnd = true;\r\n\t\t\t}\r\n\t\t\tlet isStart = false;\r\n\t\t\tif (startValue == this.min) {\r\n\t\t\t\tisStart = true;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(difference)) {\r\n\t\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\t\t\t\tlet groupInterval = this.chooseInterval(0, difference, this.groupCount, this.groupIntervals);\r\n\r\n\t\t\t\tif ((groupInterval.timeUnit == mainBaseInterval.timeUnit && groupInterval.count < mainBaseInterval.count) || $time.getDuration(groupInterval.timeUnit, 1) < $time.getDuration(mainBaseInterval.timeUnit, 1)) {\r\n\t\t\t\t\tgroupInterval = { ...mainBaseInterval };\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet id = groupInterval.timeUnit + groupInterval.count;\r\n\t\t\t\tlet min = this.groupMin[id];\r\n\t\t\t\tlet max = this.groupMax[id];\r\n\r\n\t\t\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\t\t\tmin = Number.POSITIVE_INFINITY;\r\n\t\t\t\t\tmax = Number.NEGATIVE_INFINITY;\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tlet seriesMin = series.min(this);\r\n\t\t\t\t\t\tlet seriesMax = series.max(this);\r\n\r\n\t\t\t\t\t\tif (series._dataSets) {\r\n\t\t\t\t\t\t\tlet ds = series._dataSets.getKey(groupInterval.timeUnit + groupInterval.count);\r\n\r\n\t\t\t\t\t\t\tif (ds) {\r\n\t\t\t\t\t\t\t\tlet mindi = ds.getIndex(0);\r\n\t\t\t\t\t\t\t\tlet maxdi = ds.getIndex(ds.length - 1);\r\n\r\n\t\t\t\t\t\t\t\tif (mindi) {\r\n\t\t\t\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMin = mindi.dateX.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMin = mindi.dateY.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (maxdi) {\r\n\t\t\t\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMax = maxdi.dateX.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMax = maxdi.dateY.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tseriesMax = $time.round(\r\n\t\t\t\t\t\t\t$time.add(new Date(seriesMax), groupInterval.timeUnit, 1, this._df.utc),\r\n\t\t\t\t\t\t\tgroupInterval.timeUnit,\r\n\t\t\t\t\t\t\t1,\r\n\t\t\t\t\t\t\tthis._df.firstDayOfWeek,\r\n\t\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t\t).getTime();\r\n\r\n\t\t\t\t\t\tif (seriesMin < min) {\r\n\t\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (seriesMax > max) {\r\n\t\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tthis.groupMin[id] = min;\r\n\t\t\t\t\tthis.groupMax[id] = max;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstartValue = $math.fitToRange(startValue, min, max);\r\n\t\t\t\tendValue = $math.fitToRange(endValue, min, max);\r\n\r\n\t\t\t\tif (adjust) {\r\n\t\t\t\t\tif (isEnd) {\r\n\t\t\t\t\t\tstartValue = endValue - difference;\r\n\t\t\t\t\t\tstartValue = $math.fitToRange(startValue, min, max);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isStart) {\r\n\t\t\t\t\t\tendValue = startValue + difference;\r\n\t\t\t\t\t\tendValue = $math.fitToRange(endValue, min, max);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet start: number = (startValue - min) / (max - min);\r\n\t\t\t\tlet end: number = (endValue - min) / (max - min);\r\n\r\n\t\t\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tthis.groupIntervals.clear();\r\n\t\tsource.groupIntervals.each((interval) => {\r\n\t\t\tthis.groupIntervals.push({ ...interval });\r\n\t\t})\r\n\r\n\t\tthis.gridIntervals.clear();\r\n\t\tsource.gridIntervals.each((interval) => {\r\n\t\t\tthis.gridIntervals.push({ ...interval });\r\n\t\t})\r\n\r\n\t\tif (source._baseInterval) {\r\n\t\t\tthis.baseInterval = source._baseInterval;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\r\n\t\tif (this.snapTooltip) {\r\n\t\t\t// rounding is not good, pen/aac4e7f66f019d36b2447f050c600c13 (no last tootltip shown)\r\n\t\t\tlet actualDate = this.positionToDate(position) //$time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc, undefined, this._df.timezoneMinutes, this._df.timezone);\r\n\r\n\t\t\tlet actualTime = actualDate.getTime();\r\n\t\t\tlet closestDate: Date;\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet dataItem = this.getSeriesDataItem(series, position, true);\r\n\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet date: Date;\r\n\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateY;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!closestDate) {\r\n\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (Math.abs(closestDate.getTime() - actualTime) > Math.abs(date.getTime() - actualTime)) {\r\n\t\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (closestDate) {\r\n\t\t\t\tlet closestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = $time.round(\r\n\t\t\t\t\tnew Date(closestTime),\r\n\t\t\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\t\t\tthis.baseInterval.count,\r\n\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\tundefined,\r\n\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t);\r\n\t\t\t\tclosestTime = closestDate.getTime();\r\n\r\n\t\t\t\tlet tooltipLocation = this.renderer.tooltipLocation;\r\n\t\t\t\tif (tooltipLocation == 0) {\r\n\t\t\t\t\ttooltipLocation = 0.0001;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclosestDate = new Date(closestDate.getTime() + this.baseDuration * tooltipLocation);\r\n\t\t\t\tposition = this.dateToPosition(closestDate);\r\n\r\n\t\t\t\tif (this.chart.cursor && this.chart.cursor.snapToSeries) {\r\n\t\t\t\t\t//void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\r\n\t\t\t\t\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(closestTime + series.currentDataSetId);\r\n\t\t\t\t\t\tlet point = series.showTooltipAtDataItem(dataItem);\r\n\t\t\t\t\t\tif (point) {\r\n\t\t\t\t\t\t\tthis.chart._seriesPoints.push({ series: series, point: point });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t// check, otherwise column tooltip will be hidden\r\n\t\t\t\t\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//this.chart.sortSeriesTooltips(seriesPoints);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.showTooltipAtPosition(position, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if data should be aggregated to composide data items if there\r\n\t * are more data items in selected range than `groupCount`.\r\n\t *\r\n\t * Grouping will occur automatically, based on current selection range, and\r\n\t * will change dynamically when user zooms in/out the chart.\r\n\t *\r\n\t * NOTE: This works only if [[DateAxis]] is base axis of an [[XYSeries]].\r\n\t *\r\n\t * The related [[XYSeries]] also needs to be set up to take advantage of, by\r\n\t * setting its [`groupFields`](https://www.amcharts.com/docs/v4/reference/xyseries/#groupFields_property).\r\n\t *\r\n\t * The group intervals to aggregate data to is defined by `groupIntervals`\r\n\t * property.\r\n\t *\r\n\t * ```TypeScript\r\n\t * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t * \r\n\t * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t * \r\n\t * let series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t * \r\n\t * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t * \r\n\t * var series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     \"groupData\": true\r\n\t *   }],\r\n\t *   \"yAxes\": [{\r\n\t *     \"type\": \"ValueAxis\"\r\n\t *   }],\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"LineSeries\",\r\n\t *     \"dataFields\": {\r\n\t *       \"dateX\": \"date\",\r\n\t *       \"valueY\": \"value\"\r\n\t *     },\r\n\t *     \"groupFields\": {\r\n\t *       \"valueY\": \"average\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default false\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t * @since 4.7.0\r\n\t * @param  value  Group data points?\r\n\t */\r\n\tpublic set groupData(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"groupData\", value)) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.setDataSet(\"\");\r\n\r\n\t\t\t\tif (value && !series.dataGrouped && series.inited) {\r\n\t\t\t\t\tseries._baseInterval[this.uid] = this.mainBaseInterval;\r\n\t\t\t\t\tthis.groupSeriesData(series);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._currentDataSetId = \"\"\r\n\t\t\tthis._groupInterval = undefined;\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Group data points?\r\n\t */\r\n\tpublic get groupData(): boolean {\r\n\t\treturn this.getPropertyValue(\"groupData\");\r\n\t}\r\n\r\n\t/**\r\n\t * Disables automatic selection of data grouping intervals and always uses\r\n\t * `groupInterval` if set. Works only if `groupData = true`.\r\n\t * \r\n\t * @since 4.9.24\r\n\t * @param  value  Interval\r\n\t */\r\n\tpublic set groupInterval(value: ITimeInterval) {\r\n\t\tif (this.setPropertyValue(\"groupInterval\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Interval\r\n\t */\r\n\tpublic get groupInterval(): ITimeInterval {\r\n\t\treturn this.getPropertyValue(\"groupInterval\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates threshold of data items in selected range at which to start\r\n\t * aggregating data items if `groupData = true`.\r\n\t * \r\n\t * @default 200\r\n\t * @since 4.7.0\r\n\t * @param  value  Number of data items\r\n\t */\r\n\tpublic set groupCount(value: number) {\r\n\t\tthis.setPropertyValue(\"groupCount\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number of data items\r\n\t */\r\n\tpublic get groupCount(): number {\r\n\t\treturn this.getPropertyValue(\"groupCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data by applying specific offset\r\n\t * in minutes.\r\n\t *\r\n\t * IMPORTANT: do not set `timezoneOffset` on both `DateAxis` and `dateFormatter`. It\r\n\t * will skew your results by applying offset twice.\r\n\t * \r\n\t * @since 4.8.5\r\n\t * @param  value Time zone offset in minutes\r\n\t */\r\n\tpublic set timezoneOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"timezoneOffset\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @todo Timezone offset in minutes\r\n\t */\r\n\tpublic get timezoneOffset(): number {\r\n\t\treturn this.getPropertyValue(\"timezoneOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data to specific named timezone,\r\n\t * e.g. `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`, etc.\r\n\t *\r\n\t * IMPORTANT: it is no longer recommended to use this setting. Please \r\n\t * set`timezone` on `dateFormatter`.\r\n\t *\r\n\t * @deprecated\r\n\t * @since 4.10.1\r\n\t * @param  value Time zone\r\n\t */\r\n\tpublic set timezone(value: string) {\r\n\t\tthis.setPropertyValue(\"timezone\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Timezone\r\n\t */\r\n\tpublic get timezone(): string {\r\n\t\treturn this.getPropertyValue(\"timezone\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current grid interval.\r\n\t *\r\n\t * @return Grid interval\r\n\t */\r\n\tpublic get gridInterval(): ITimeInterval {\r\n\t\treturn this._gridInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeGap(dataItem: LineSeriesDataItem, previous: LineSeriesDataItem): boolean {\r\n\t\tlet series = dataItem.component;\r\n\t\tif (dataItem && previous) {\r\n\t\t\tif (!series.connect && $type.isNumber(series.autoGapCount)) {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet date = dataItem.dates[\"date\" + this.axisLetter];\r\n\t\t\t\t\tlet prevDate = previous.dates[\"date\" + this.axisLetter];\r\n\r\n\t\t\t\t\tif (date && prevDate) {\r\n\t\t\t\t\t\tlet time = date.getTime();\r\n\t\t\t\t\t\tlet prevTime = prevDate.getTime();\r\n\r\n\t\t\t\t\t\tif (time - prevTime > series.autoGapCount * this.baseDuration) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\t\treturn this.min;\r\n\t}\r\n\r\n\tprotected _saveMinMax(min: number, max: number) {\r\n\t\tlet groupInterval = this.groupInterval;\r\n\r\n\t\tif (!groupInterval) {\r\n\t\t\tgroupInterval = this.mainBaseInterval;\t\t\t\r\n\t\t}\r\n\r\n\t\tlet id = groupInterval.timeUnit + groupInterval.count;\r\n\r\n\t\tthis._intervalMin[id] = min;\r\n\t\tthis._intervalMax[id] = max;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n", "/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Grid } from \"./Grid\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { VerticalCenter } from \"../../core/defs/VerticalCenter\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererXAdapters extends IAxisRendererAdapters, IAxisRendererXProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererXProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererXAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererXEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisRendererX\";\r\n\r\n\t\tthis.minGridDistance = 120;\r\n\r\n\t\tthis.opposite = false;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.width = percent(100);\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"vertical\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.x = axis.pixelX;\r\n\t\t\tgridContainer.width = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\t// can not do this in init, as axis is set later\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tif (!(axis.width instanceof Percent)) {\r\n\t\t\t\taxis.width = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\t// @todo Is thi sneeded?\r\n\t\t\t$utils.used(this.line);\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.rotation = 0;\r\n\t\t\ttitle.align = \"center\";\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t\tthis.toBack();\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet bigNum: number = 1000;\r\n\t\t\tlet bbx: number = this.line.pixelX;\r\n\t\t\tlet bby: number = this.line.pixelY;\r\n\t\t\tlet bbw: number = this.axisLength;\r\n\r\n\t\t\tlet bbh: number = bigNum;\r\n\r\n\t\t\t// top\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// bottom\r\n\t\t\telse {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.axis.updateTooltip(\"vertical\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet deltaY = 0;\r\n\t\tlet verticalCenter: VerticalCenter;\r\n\t\tlet maxHeight = this.gridContainer.maxHeight;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\tif (label.valign == \"bottom\") {\r\n\t\t\t\t\tdeltaY = maxHeight;\r\n\t\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y = deltaY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\tif (label.valign == \"top\") {\r\n\t\t\t\t\tdeltaY = -maxHeight;\r\n\t\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = -maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y += deltaY;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.verticalCenter = verticalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: this.positionToCoordinate(position), y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.x, point.y);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet x1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet x2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet w: number = Math.abs(x2 - x1);\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet x: number = Math.min(x1, x2);\r\n\t\tlet y: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet y1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet y2: number = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\r\n\r\n\t\tstartPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\r\n\t\tendPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tstartLine.y = y1;\r\n\t\tstartLine.width = 0;\r\n\t\tstartLine.height = y2;\r\n\r\n\t\tendLine.y = y1;\r\n\t\tendLine.width = 0;\r\n\t\tendLine.height = y2;\r\n\r\n\t\tfillShape.height = y2;\r\n\t\tfillShape.width = Math.abs(endPoint.x - startPoint.x);\r\n\t\tfillShape.y = y1;\r\n\t\tfillShape.x = startPoint.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.getHeight() });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: tickLength });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.axisLength, y: 0 });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet w: number = this.axisLength;\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tlet x: number = axis.basePoint.x;\r\n\t\tif (x < -0.2 || x > w + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet y = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(false, true, false, true);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet inversedPosition = value;\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet x = axis.pixelX;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tx = $utils.spritePointToSprite({ x: this.pixelX, y: 0 }, this.parent, relativePositionSprite).x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif(relativePositionSprite){\r\n\t\t\t\tlet relativeX = x / relativePositionSprite.innerWidth;\r\n\t\t\t\tlet relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\r\n\r\n\t\t\t\treturn (inversedPosition - relativeX) / relativeWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});", "/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t */\r\n\tendCategory?: string;\r\n\r\n\t/**\r\n\t * Location where break starts within cell (0-1).\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Location where break ends within cell (0-1).\r\n\t */\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.properties.startLocation = 0.5;\r\n\t\tthis.properties.endLocation = 0.5;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue, this.startLocation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue, this.endLocation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates where within starting category break should begin.\r\n\t *\r\n\t * Values range from `0` (start) to `1` (end), with default being `0.5` (middle).\r\n\t *\r\n\t * E.g. if you want to a break to fully encompass start and end categories,\r\n\t * you should set `startLocation = 0` and `endLocation = 1`.\r\n\t *\r\n\t * @since 4.9.17\r\n\t * @default 0.5\r\n\t * @param  value  Break start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Break start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates where within ending category break should end.\r\n\t *\r\n\t * Values range from `0` (start) to `1` (end), with default being `0.5` (middle).\r\n\t *\r\n\t * E.g. if you want to a break to fully encompass start and end categories,\r\n\t * you should set `startLocation = 0` and `endLocation = 1`.\r\n\t *\r\n\t * @since 4.9.17\r\n\t * @default 0.5\r\n\t * @param  value  Break end location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Break end location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n", "/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents, IAxisDataItemAdapters } from \"./Axis\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererX } from \"./AxisRendererX\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { ColumnSeries } from \"../series/ColumnSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\tpublic seriesDataItems: { [index: string]: XYSeriesDataItem[] } = {};\r\n\r\n\tpublic deltaAnimation: Animation;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisDataItemAdapters;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.deltaPosition = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tlet oldCategory = this.properties.category;\r\n\t\tthis.setProperty(\"category\", value);\r\n\t\tif ($type.hasValue(oldCategory) && oldCategory != value) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\tif (this._adapterO) {\r\n\t\t\tif (this._adapterO.isEnabled(\"category\")) {\r\n\t\t\t\treturn this._adapterO.apply(\"category\", this.properties.category);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties.endCategory;\r\n\t}\r\n\r\n\tpublic set deltaPosition(value: number) {\r\n\t\tif (value != this.properties.deltaCoordinate) {\r\n\t\t\tthis.setProperty(\"deltaCoordinate\", value);\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t\tthis.component.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get deltaPosition(): number {\r\n\t\treturn this.properties.deltaCoordinate;\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisDataItemAdapters extends IAxisDataItemAdapters {\r\n\tcategory: string;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties {\r\n\tsortBySeries?: ColumnSeries;\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tlet dataItemsByCategory = this.dataItemsByCategory;\r\n\t\tthis.addDisposer(this.mainDataSet.events.on(\"removed\", function(event) {\r\n\t\t\tdataItemsByCategory.removeKey(event.oldValue.category);\r\n\t\t}))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\t\tsuper.processSeriesDataItem(dataItem, axisLetter);\r\n\t\tlet category: string = (<any>dataItem)[\"category\" + this.axisLetter];\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet categoryAxisDataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (categoryAxisDataItem) {\r\n\t\t\t\tlet seriesId = dataItem.component.uid;\r\n\t\t\t\tlet seriesDataItems = categoryAxisDataItem.seriesDataItems[seriesId];\r\n\t\t\t\tif (!seriesDataItems) {\r\n\t\t\t\t\tseriesDataItems = [];\r\n\t\t\t\t\tcategoryAxisDataItem.seriesDataItems[seriesId] = seriesDataItems;\r\n\t\t\t\t}\r\n\t\t\t\tseriesDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.component.dataItems.remove(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet startIndex = this.positionToIndex(this.start);\r\n\t\t\t\tlet endIndex = this.positionToIndex(this.end);\r\n\r\n\t\t\t\tif (endIndex >= this.dataItems.length) {\r\n\t\t\t\t\tendIndex--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesId = series.uid;\r\n\t\t\t\tlet minIndex: number;\r\n\t\t\t\tlet maxIndex: number;\r\n\r\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\r\n\t\t\t\t\tlet axisDataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (axisDataItem) {\r\n\t\t\t\t\t\tlet seriesDataItems = axisDataItem.seriesDataItems[seriesId];\r\n\r\n\t\t\t\t\t\tif (seriesDataItems) {\r\n\t\t\t\t\t\t\tfor (let i = 0; i < seriesDataItems.length; i++) {\r\n\t\t\t\t\t\t\t\tlet seriesDataItem = seriesDataItems[i];\r\n\t\t\t\t\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\t\t\t\t\tlet index = seriesDataItem.index;\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(minIndex) || index < minIndex) {\r\n\t\t\t\t\t\t\t\t\t\tminIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(maxIndex) || index > maxIndex) {\r\n\t\t\t\t\t\t\t\t\t\tmaxIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.isNumber(minIndex)) {\r\n\t\t\t\t\tseries.startIndex = minIndex;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.start = this.start;\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.isNumber(maxIndex)) {\r\n\t\t\t\t\tseries.endIndex = maxIndex + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.end = this.end;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this._axisBreaks && this._axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / Math.max(this.renderer.minGridDistance, 1 / Number.MAX_SAFE_INTEGER);\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tstartIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tendIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\t//this.validateDataElement(dataItem, itemIndex); // helps to solve shrinking // not good - creates all items\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b++) {\r\n\t\t\t\t\t\tlet dataItem = this.dataItems.getIndex(b);\r\n\t\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\t// TODO use iterator instead\r\n\t\t\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t\t\titemIndex++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.validateBreaks();\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t\tthis.renderer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem   [description]\r\n\t * @param itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" won't work, which is not intuitive.\r\n\t\t\tif (!dataItem.isRange || label.text == undefined) {\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\r\n\t\t\tif ((renderer instanceof AxisRendererY && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (renderer instanceof AxisRendererX && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\tif (dataItem.label.html) {\r\n\t\t\t\t\tthis.ghostLabel.html = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\t\tfillPosition = this.indexToPosition(index, fill.location);\r\n\t\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, fill.location);\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tthis.dataItemsByCategory.clear();\r\n\t\tsuper.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\tif (dataItem) {\r\n\t\t\t// creat a collection for fast access\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t\t// check if such category already exists\r\n\t\t\t//let existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\t\t//if (existingDataItem && existingDataItem != dataItem) {\r\n\t\t\t//\tthis.dataItems.remove(existingDataItem);\r\n\t\t\t//}\r\n\r\n\t\t\tif ($type.hasValue(dataItem.category)) {\r\n\t\t\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\tlet category: string = <string>(dataContext[this.dataFields.category]);\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.dataItems.create();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param index     Index\r\n\t * @param location  Location (0-1)\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\tif (index < startIndex || !$type.isNumber(breakStartIndex) || !$type.isNumber(breakEndIndex)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t// value to the right of break end\r\n\t\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// value to the left of break start\r\n\t\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// value within break\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tlet deltaPosition = 0;\r\n\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\t\tif (dataItem) {\r\n\t\t\tdeltaPosition = dataItem.deltaPosition;\r\n\t\t}\r\n\r\n\t\treturn $math.round(deltaPosition + (index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param category  Category\r\n\t * @return Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param startCategory  Start category\r\n\t * @param endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start         [description]\r\n\t * @param end           [description]\r\n\t * @param startLocation [description]\r\n\t * @param endLocation   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param position  Source position (px)\r\n\t * @param location  Location within category (0-1)\r\n\t * @return Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns first series data item with specific category\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getFirstSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = 0; i < series.dataItems.length; i++) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns last series data item with specific category.\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getLastSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = series.dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// todo: optimize\r\n\tpublic getSeriesDataItemByCategory(category: string, series: XYSeries): XYSeriesDataItem {\r\n\t\tlet seriesDataItem: XYSeriesDataItem;\r\n\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\tseriesDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\tseriesDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn seriesDataItem;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param series    Target series\r\n\t * @param position  Position (px)\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tif ($type.isNumber(position)) {\r\n\r\n\t\t\tlet index = this.positionToIndex(position);\r\n\r\n\t\t\tif (index >= this.dataItems.length) {\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet category = dataItem.category;\r\n\t\t\t\tlet sdi: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet seriesDataItem = series.dataItems.getIndex(index);\r\n\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryX == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryY == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//@todo\r\n\t\t\t\tif (findNearest) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn sdi;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position = this.getPositionX(dataItem, key, location, stackKey, range);\r\n\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Category\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\r\n\t\tlet position = this.getPositionY(dataItem, key, location, stackKey, range);\r\n\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Category\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack key (?)\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\r\n\t\tif (dataItem) {\r\n\t\t\tthis.tooltipDataItem = dataItem;\r\n\t\t\tthis.tooltip.dataItem = dataItem;\r\n\t\t\tif (this.tooltipText) {\r\n\t\t\t\treturn this.tooltipText;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\treturn dataItem.category;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._adapterO.apply(\"getTooltipText\", dataItem.category);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\t\tif (position < 0) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tif (position > 1) {\r\n\t\t\tposition = 1;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex - this.startLocation - (1 - this.endLocation);\r\n\r\n\t\tposition += 1 / difference * this.startLocation;\r\n\t\tlet index: number = null;\r\n\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\t// in case we have some axis breaks\r\n\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t\t// position to the right of break end\r\n\t\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// position to the left of break start\r\n\t\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= this.dataItems.length) {\r\n\t\t\tindex = this.dataItems.length - 1;\r\n\t\t}\r\n\t\t// not good, when panning out of bounds, each time one less item gets selected\r\n\t\t//if (index >= endIndex) {\r\n\t\t//\tindex--;\r\n\t\t//}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * This is a synonim of `getPositionLabel()` implemented here for consistentcy.\r\n\t *\r\n\t * @since 4.3.8\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic positionToCategory(position: number): string {\r\n\t\treturn this.getPositionLabel(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Current frequency of labels of the axis.\r\n\t *\r\n\t * Normally it would be 1, but when labels start to be hidden due\r\n\t * to `minGridDistance` this read-only property will increase.\r\n\t *\r\n\t * @readonly\r\n\t * @since 4.2.0\r\n\t * @return Label frequency\r\n\t */\r\n\tpublic get frequency(): number {\r\n\t\treturn this._frequency;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to a reference of [[ColumnSeries]] the categories will be sorted\r\n\t * by actual values.\r\n\t *\r\n\t * The categories are ordered in descending order (from highest values to\r\n\t * lowest). To reverse the order, use axis renderer's `inversed` setting.\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.sortBySeries = series;\r\n\t * categoryAxis.renderer.inversed = true;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.sortBySeries = series;\r\n\t * categoryAxis.renderer.inversed = true;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"sortBySeries\": \"s1\",\r\n\t *     \"renderer\": {\r\n\t *       // ...\r\n\t *       \"inversed\": true\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.8.7\r\n\t * @param  value  Sort categories?\r\n\t */\r\n\tpublic set sortBySeries(value: ColumnSeries) {\r\n\t\tthis.setPropertyValue(\"sortBySeries\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Sort categories?\r\n\t */\r\n\tpublic get sortBySeries(): ColumnSeries {\r\n\t\treturn this.getPropertyValue(\"sortBySeries\");\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.sortBySeries) && $type.isString(config.sortBySeries)) {\r\n\t\t\t\tif (this.map.hasKey(config.sortBySeries)) {\r\n\t\t\t\t\tconfig.sortBySeries = this.map.getKey(config.sortBySeries);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.addDelayedMap(\"sortBySeries\", config.sortBySeries);\r\n\t\t\t\t\tdelete config.sortBySeries;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n", "/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { XYCursor } from \"../cursors/XYCursor\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * References to any aggregate data items this data item is part of.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic groupDataItems: this[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.customValue = {};\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's custom numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set customValue(value: number) {\r\n\t\tthis.setValue(\"customValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get customValue(): number {\r\n\t\treturn this.values.customValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setCategory(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setCategory(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for some custom data.\r\n\t */\r\n\tcustomValue?: string;\r\n}\r\n\r\n\r\n/**\r\n * Defines types of the aggregate value.\r\n *\r\n * @since 4.7.0\r\n */\r\nexport type GroupField = \"open\" | \"close\" | \"low\" | \"high\" | \"average\" | \"sum\";\r\n\r\n/**\r\n * Defines data fields that can be calculated for aggregate values.\r\n * \r\n * @since 4.7.0\r\n */\r\nexport interface IXYSeriesGroupFields {\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `valueX` data field.\r\n\t *\r\n\t * @default \"close\"\r\n\t */\r\n\tvalueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `valueY` data field.\r\n\t * \r\n\t * @default \"close\"\r\n\t */\r\n\tvalueY?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `customValue` value data field.\r\n\t * \r\n\t * @default \"close\"\r\n\t */\r\n\tcustomValue?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `openValueX` data field.\r\n\t * \r\n\t * @default \"open\"\r\n\t */\r\n\topenValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `openValueY` data field.\r\n\t * \r\n\t * @default \"open\"\r\n\t */\r\n\topenValueY?: GroupField;\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tcursorHoverEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t */\r\n\texcludeFromTotal?: boolean;\r\n\r\n\r\n\t/**\r\n\t * Indicates if series' tooltip should be hidden while series axis range is\r\n\t * animating (zooming)\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @default true\r\n\t */\r\n\thideTooltipWhileZooming?: boolean;\r\n\r\n\t/**\r\n\t * Should series bullets be masked?\r\n\t * @default true\r\n\t * @since 4.7.17\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [boolean description]\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @default true\r\n\t */\r\n\tstackToNegative?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Applied to a source value that is being used to calculate aggregate values\r\n\t * for a grouped data item.\r\n\t * \r\n\t * applied only if `groupData = true` is set on the related `DateAxis`.\r\n\t *\r\n\t * @since 4.9.35\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/using-custom-functions-for-data-item-grouping/} for more information\r\n\t */\r\n\tgroupValue: {\r\n\t\tdataItem: XYSeriesDataItem,\r\n\t\tinterval: ITimeInterval,\r\n\t\tdataField: IXYSeriesDataFields,\r\n\t\tdate: Date,\r\n\t\tvalue: number\r\n\t}\r\n\r\n\t/**\r\n\t * Applied to a calculated aggregate data item and its values, so that\r\n\t * specific logic can be applied to calculation of derivative values.\r\n\t *\r\n\t * User's code needs to modify specific value in `values` object, most\r\n\t * probably `close` as it's the default grouping field.\r\n\t * \r\n\t * Applied only * if `groupData = true` is set on the related `DateAxis`.\r\n\t *\r\n\t * @since 4.9.36\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/using-custom-functions-for-data-item-grouping/} for more information\r\n\t */\r\n\tgroupDataItem: {\r\n\t\tdataItem: XYSeriesDataItem,\r\n\t\tinterval: ITimeInterval,\r\n\t\tdataField: IXYSeriesDataFields,\r\n\t\tdate: Date,\r\n\t\tvalue: number\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines type of the group fields.\r\n\t * \r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic _groupFields: IXYSeriesGroupFields;\r\n\r\n\t/**\r\n\t * Indicates which of the series' `dataFields` to calculate aggregate values\r\n\t * for.\r\n\t *\r\n\t * Available data fields for all [[XYSeries]] are:\r\n\t * `valueX`, `valueY`, `openValueX`, and `openValueY`.\r\n\t *\r\n\t * [[CandlestickSeries]] adds:\r\n\t * `lowValueX`, `lowValueY`, `highValueX`, and `highValueY`.\r\n\t *\r\n\t * Available options:\r\n\t * `\"open\"`, `\"close\"`, `\"low\"`, `\"high\"`, `\"average\"`, `\"sum\"`.\r\n\t *\r\n\t * Defaults are as follows:\r\n\t * * `valueX`: `\"close\"`\r\n\t * * `valueY`: `\"close\"`\r\n\t * * `openValueX`: `\"open\"`\r\n\t * * `openValueY`: `\"open\"`\r\n\t * * `lowValueX`: `\"low\"`\r\n\t * * `lowValueY`: `\"low\"`\r\n\t * * `highValueX`: `\"high\"`\r\n\t * * `highValueY`: `\"high\"`\r\n\t *\r\n\t * Is required only if data being plotted on a `DateAxis` and\r\n\t * its `groupData` is set to `true`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t *\r\n\t * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t *\r\n\t * let series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t *\r\n\t * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t *\r\n\t * var series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     \"groupData\": true\r\n\t *   }],\r\n\t *   \"yAxes\": [{\r\n\t *     \"type\": \"ValueAxis\"\r\n\t *   }],\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"LineSeries\",\r\n\t *     \"dataFields\": {\r\n\t *       \"dateX\": \"date\",\r\n\t *       \"valueY\": \"value\"\r\n\t *     },\r\n\t *     \"groupFields\": {\r\n\t *       \"valueY\": \"average\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above setup will ensure, that if there are many data items within\r\n\t * selected range, they will be grouped into aggregated data points, using\r\n\t * average value of all the values.\r\n\t *\r\n\t * For example if we have 2 years worth of daily data (~700 data items), when\r\n\t * fully zoomed out, the chart would show ~100 data items instead: one for\r\n\t * each week in those two years.\r\n\t *\r\n\t * Grouping will occur automatically, based on current selection range, and\r\n\t * will change dynamically when user zooms in/out the chart.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic groupFields: this[\"_groupFields\"] = {};\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\t/**\r\n\t * Dataitem of previously shown tooltip, used to avoid multiple\r\n\t * tooltipshownat dispatches.\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _baseInterval: { [index: string]: ITimeInterval } = {};\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataGrouped = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic usesShowFields: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _dataSetChanged: boolean = false;\r\n\r\n\r\n\tprotected _maxxX: number = 100000;\r\n\tprotected _maxxY: number = 100000;\r\n\r\n\tprotected _propertiesChanged: boolean = false;\r\n\r\n\t/**\r\n\t * If this series was used to create a series for scrollbar, this is a reference to it.\r\n\t */\r\n\tpublic scrollbarSeries: this;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic outOfRange: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\r\n\t\tthis.groupFields.valueX = \"close\";\r\n\t\tthis.groupFields.valueY = \"close\";\r\n\t\tthis.groupFields.customValue = \"close\";\r\n\r\n\t\tthis.groupFields.openValueX = \"open\";\r\n\t\tthis.groupFields.openValueY = \"open\";\r\n\r\n\t\tthis.cursorTooltipEnabled = true;\r\n\r\n\t\tthis.cursorHoverEnabled = true;\r\n\t\tthis.excludeFromTotal = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis._showBullets = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.properties.stackToNegative = true;\r\n\r\n\t\tthis.hideTooltipWhileZooming = true;\r\n\t\tthis.setPropertyValue(\"maskBullets\", true);\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.observe(visualProperties, () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis._propertiesChanged = true;\r\n\t\t\t\tif (this.legendDataItem) {\r\n\t\t\t\t\tthis.legendDataItem.childrenCreated = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.chart && this.chart.legend) {\r\n\t\t\t\t\tthis.chart.legend.invalidateDataItems();\r\n\t\t\t\t}\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic resetExtremes() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis.dataGrouped = false;\r\n\t\tthis._baseInterval = {};\r\n\t\tthis._currentDataSetId = \"\";\r\n\r\n\t\tthis.resetExtremes();\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._baseInterval = {};\r\n\t\tlet dataFields = this.dataFields;\r\n\t\tif (dataFields.valueYShow || dataFields.openValueXShow || dataFields.openValueXShow || dataFields.openValueYShow) {\r\n\t\t\tthis.usesShowFields = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.usesShowFields = false;\r\n\t\t}\r\n\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\t\tif (this.chart) {\r\n\t\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 4.7.21 solves 51540\r\n\t\tif (this.inited && this.isHidden) {\r\n\t\t\tthis.hide(0);\r\n\t\t}\r\n\r\n\t\tthis.dataGrouped = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tif (this._chart) {\r\n\t\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * When validating raw data, instead of processing data item, we update it\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected updateDataItem(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.updateDataItem(dataItem);\r\n\r\n\t\t//dataItem.events.disable();\r\n\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\t\t//dataItem.events.enable();\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(xAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(yAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected clearCatAxis(axis: CategoryAxis) {\r\n\t\tlet uid = this.uid;\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.seriesDataItems[uid]) {\r\n\t\t\t\tdataItem.seriesDataItems[uid] = [];\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\t\tthis._xField = xField;\r\n\t\t\tthis._yField = yField;\r\n\r\n\t\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\t\tthis._xOpenField = xOpenField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\t\tthis._yOpenField = yOpenField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.dataFields[yOpenField] && this.baseAxis == yAxis) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.dataFields[xOpenField] && this.baseAxis == xAxis) {\r\n\t\t\t\tthis._xOpenField = xField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.stacked && this.baseAxis == xAxis) {\r\n\t\t\t\tthis._xOpenField = xField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.stacked && this.baseAxis == yAxis) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\r\n\t\t\tif ((xAxis instanceof CategoryAxis) && (yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tif (!this._yOpenField) {\r\n\t\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._xValueFields = [];\r\n\t\t\tthis._yValueFields = [];\r\n\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param axis    Axis\r\n\t * @param fields  Fields (?)\r\n\t * @param field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\t\theight: this.yAxis.axisLength\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param axis  Axis\r\n\t * @return Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tthis._maxxX = $math.max(100000, chart.plotContainer.maxWidth * 2);\r\n\t\t\tthis._maxxY = $math.max(100000, chart.plotContainer.maxHeight * 2);\r\n\t\t}\r\n\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\txAxis.updateAxisBySeries();\r\n\t\t\tyAxis.updateAxisBySeries();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\txAxis.postProcessSeriesDataItems(this);\r\n\t\t\tyAxis.postProcessSeriesDataItems(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (xAxis.dataRangeInvalid) {\r\n\t\t\t\txAxis.validateDataRange();\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis.dataRangeInvalid) {\r\n\t\t\t\tyAxis.validateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (xAxis.invalid) {\r\n\t\t\t\txAxis.validate();\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis.invalid) {\r\n\t\t\t\tyAxis.validate();\r\n\t\t\t}\r\n\r\n\t\t\tthis.y = yAxis.pixelY;\r\n\t\t\tthis.x = xAxis.pixelX;\r\n\r\n\r\n\t\t\tthis._showBullets = true;\r\n\t\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\t\tthis._showBullets = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.updateTooltip();\r\n\r\n\t\tif ((xAxis instanceof DateAxis && xAxis.groupData && !this.dataGrouped) || (yAxis instanceof DateAxis && yAxis.groupData && !this.dataGrouped)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet maskBullets = this.maskBullets;\r\n\t\tif (chart && maskBullets) {\r\n\t\t\tif (chart.className == \"XYChart\") {\r\n\t\t\t\tif (chart.leftAxesContainer.layout == \"vertical\" || chart.rightAxesContainer.layout == \"vertical\") {\r\n\t\t\t\t\tif (this.yAxis) {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = this.yAxis.renderer.gridContainer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (chart.topAxesContainer.layout == \"horizontal\" || chart.bottomAxesContainer.layout == \"horizontal\") {\r\n\t\t\t\t\tif (this.xAxis) {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = this.xAxis.renderer.gridContainer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tthis.setXAxis(axis);\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tthis.setYAxis(axis);\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tif (axis.chart instanceof XYChart) {\r\n\t\t\t\taxis.chart.handleYAxisSet(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!this._baseAxis && xAxis && yAxis) {\r\n\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number, skipRaw?: boolean): void {\r\n\t\tsuper.addData(rawDataItem, removeCount, skipRaw);\r\n\t\tconst scrollbarSeries = this.scrollbarSeries;\r\n\t\tif (scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.addData(rawDataItem, removeCount, true);\r\n\t\t\tthis.scrollbarSeries._parseDataFrom = this._parseDataFrom;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tsuper.setData(value);\r\n\t\tif (this.scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.setData(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the chart use particular data set.\r\n\t *\r\n\t * If `id` is not provided or there is no such data set, main data will be\r\n\t * used.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t * @param  id  Data set id\r\n\t */\r\n\tpublic setDataSet(id: string): boolean {\r\n\t\tlet changed = super.setDataSet(id);\r\n\r\n\t\tif (changed) {\r\n\r\n\t\t\tthis._dataSetChanged = true;\r\n\t\t\tlet dataItems = this.dataItems;\r\n\r\n\t\t\tthis.resetExtremes();\r\n\r\n\t\t\tif (dataItems && dataItems.length > 0) {\r\n\r\n\t\t\t\tlet xAxis = this.xAxis;\r\n\t\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\t\tthis._prevStartIndex = undefined;\r\n\t\t\t\tthis._prevEndIndex = undefined;\r\n\t\t\t\tthis._startIndex = undefined;\r\n\t\t\t\tthis._endIndex = undefined;\r\n\r\n\t\t\t\tif (!this.appeared) {\r\n\t\t\t\t\tthis.processValues(false); // this will slow down!\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (xAxis instanceof DateAxis && xAxis == this.baseAxis) {\r\n\t\t\t\t\tthis._tmin.setKey(xAxis.uid, dataItems.getIndex(0).dateX.getTime());\r\n\t\t\t\t\tthis._tmax.setKey(xAxis.uid, dataItems.getIndex(dataItems.length - 1).dateX.getTime());\r\n\t\t\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (yAxis instanceof DateAxis && yAxis == this.baseAxis) {\r\n\t\t\t\t\tthis._tmin.setKey(yAxis.uid, dataItems.getIndex(0).dateY.getTime());\r\n\t\t\t\t\tthis._tmax.setKey(yAxis.uid, dataItems.getIndex(dataItems.length - 1).dateY.getTime());\r\n\t\t\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!xAxis || !yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tlet workingStartIndex = startIndex;\r\n\t\tlet workingEndIndex = endIndex;\r\n\r\n\t\tif (!working) {\r\n\t\t\tstartIndex = 0;\r\n\t\t\tendIndex = this.dataItems.length;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tif (!working) {\r\n\t\t\t\tstackX = dataItem.getValue(\"valueX\", \"stackTrue\");\r\n\t\t\t\tstackY = dataItem.getValue(\"valueY\", \"stackTrue\");\r\n\t\t\t}\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\txAxis.processSeriesDataItems();\r\n\t\tyAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = xAxis.uid;\r\n\t\tlet yAxisId: string = yAxis.uid;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\r\n\t\t\tthis._smin.setKey(xAxisId, undefined);\r\n\t\t\tthis._smax.setKey(xAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\r\n\t\t\tthis._smin.setKey(yAxisId, undefined);\r\n\t\t\tthis._smax.setKey(yAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tlet stackedSeries = this.stackedSeries;\r\n\t\t\t\tif (stackedSeries) {\r\n\t\t\t\t\tif (stackedSeries.isDisposed()) {\r\n\t\t\t\t\t\tthis.stackedSeries = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstackedSeries.processValues(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (startIndex != workingStartIndex || endIndex != workingEndIndex) {\r\n\t\t\tminX = Infinity;\r\n\t\t\tmaxX = - Infinity;\r\n\r\n\t\t\tminY = Infinity;\r\n\t\t\tmaxY = - Infinity;\r\n\r\n\t\t\tfor (let i = workingStartIndex; i < workingEndIndex; i++) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\t\tif (!working) {\r\n\t\t\t\t\tstackX = dataItem.getValue(\"valueX\", \"stackTrue\");\r\n\t\t\t\t\tstackY = dataItem.getValue(\"valueY\", \"stackTrue\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\r\n\t\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\t\tif (this.stacked) {\r\n\t\t\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\r\n\t\t\tthis._smin.setKey(xAxisId, undefined);\r\n\t\t\tthis._smax.setKey(xAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\r\n\t\t\tthis._smin.setKey(yAxisId, undefined);\r\n\t\t\tthis._smax.setKey(yAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared || this.start != 0 || this.end != 1 || this.dataItems != this.mainDataSet) {\r\n\t\t\t\t/// new, helps to handle issues with change percent\r\n\t\t\t\tlet changed = false;\r\n\r\n\t\t\t\tif (yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\t\t\t\t\tlet tmin = this._tmin.getKey(yAxisId);\r\n\r\n\t\t\t\t\tif (!$type.isNumber(tmin) || ((this.usesShowFields || this._dataSetChanged || (xAxis instanceof DateAxis && xAxis.groupData && this.isShowing)) && minY < tmin) || (this.stackedSeries && !this.isHidden && !working)) {\r\n\t\t\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet tmax = this._tmax.getKey(yAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmax) || ((this.usesShowFields || this._dataSetChanged || (xAxis instanceof DateAxis && xAxis.groupData && this.isShowing)) && maxY > tmax) || (this.stackedSeries && !this.isHidden && !working)) {\r\n\t\t\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis)) {\r\n\t\t\t\t\tlet tmin = this._tmin.getKey(xAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmin) || ((this.usesShowFields || this._dataSetChanged || (yAxis instanceof DateAxis && yAxis.groupData && this.isShowing)) && minX < tmin) || (this.stackedSeries && !this.isHidden && !working)) {\r\n\t\t\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet tmax = this._tmax.getKey(xAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmax) || ((this.usesShowFields || this._dataSetChanged || (yAxis instanceof DateAxis && yAxis.groupData && this.isShowing)) && maxX > tmax) || (this.stackedSeries && !this.isHidden && !working)) {\r\n\t\t\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (changed) {\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.start == 0 && this.end == 1) {\r\n\t\t\t\t\t// yes, its ok. otherwise min/max won't be updated when zooming out\r\n\t\t\t\t\tthis._dataSetChanged = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!working && this.stacked) {\r\n\t\t\tthis.processValues(true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip(duration?: number) {\r\n\t\tsuper.hideTooltip(duration);\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding && !this.isShowing) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t}\r\n\r\n\t\t\tlet point = this.showTooltipAtDataItem(dataItem);\r\n\r\n\t\t\tif (point) {\r\n\t\t\t\treturn point;\r\n\t\t\t}\r\n\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText && !this.tooltipHTML) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationX?: number) {\r\n\t\treturn dataItem.locations[field];\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationY?: number) {\r\n\t\treturn dataItem.locations[field];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific dataItem.\r\n\t *\r\n\t * @param dataItem\r\n\t */\r\n\tpublic showTooltipAtDataItem(dataItem: this[\"_dataItem\"]): IPoint {\r\n\r\n\t\tlet cursor = <XYCursor>this.chart.cursor;\r\n\t\tif (cursor && cursor.hideSeriesTooltipsOnSelection && cursor.selection.visible && cursor.downPoint) {\r\n\t\t\tthis.hideTooltip();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.returnBulletDefaultState(dataItem);\r\n\t\tif (dataItem && dataItem.visible) {\r\n\r\n\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\tif (this.cursorTooltipEnabled) {\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, this.getAdjustedXLocation(dataItem, tooltipXField), this.getAdjustedYLocation(dataItem, tooltipYField));\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tif (this.chart.className == \"XYChart\" && (tooltipPoint.y < -1 || tooltipPoint.y > this.yAxis.pixelHeight + 1 || tooltipPoint.x < -1 || tooltipPoint.x > this.xAxis.pixelWidth + 1)) {\r\n\t\t\t\t\t\t\t// void\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\r\n\t\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (this.cursorHoverEnabled) {\r\n\t\t\t\t\t\t\t\tfor (let sprite of dataItem.sprites) {\r\n\t\t\t\t\t\t\t\t\tif (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tif (!sprite.interactions.isRealHover) {\r\n\t\t\t\t\t\t\t\t\t\t\tsprite.dispatchImmediately(\"over\");\r\n\t\t\t\t\t\t\t\t\t\t\tsprite.interactions.isRealHover = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tsprite.isHover = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLegendValue(dataItem, true);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Returns default state to bullets when tooltip is shown at some other data\r\n\t * item or hidden\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let sprite of this._prevTooltipDataItem.sprites) {\r\n\t\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\t\tconst fireEvent = sprite.interactions.isRealHover;\r\n\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t\tif (fireEvent) {\r\n\t\t\t\t\t\tsprite.dispatchImmediately(\"out\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Bullet): boolean {\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bulletTemplate.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bulletTemplate.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (bulletTemplate.disabled) {\r\n\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\tif (dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tif (!this.hideTooltipWhileZooming && this.tooltip && !this.tooltip.isHidden && !this.isHiding && !this.isHidden && this.tooltipDataItem) {\r\n\t\t\tthis.showTooltipAtDataItem(<this[\"_dataItem\"]>this.tooltipDataItem);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif ((xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet xOpenField = this.xOpenField;\r\n\t\t\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\t\t\tlet positionX: number;\r\n\t\t\t\tlet positionY: number;\r\n\r\n\r\n\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(xField);\r\n\r\n\t\t\t\t\tif (!xOpenField) {\r\n\t\t\t\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\t\t\t\topenValue = xAxis.baseValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openValue)) {\r\n\t\t\t\t\t\topenValue = closeValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tif (openValue == closeValue) {\r\n\t\t\t\t\t\tlet baseInterval = xAxis.baseInterval;\r\n\t\t\t\t\t\tlet dateFormatter = xAxis.dateFormatter;\r\n\t\t\t\t\t\topenValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc, undefined, dateFormatter.timezoneMinutes, dateFormatter.timezone).getTime();\r\n\t\t\t\t\t\tcloseValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet middleValue: number;\r\n\t\t\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * bulletLocationX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (xAxis instanceof ValueAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(xField);\r\n\r\n\t\t\t\t\tif (!xOpenField) {\r\n\t\t\t\t\t\topenValue = xAxis.baseValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\r\n\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (xAxis instanceof CategoryAxis) {\r\n\r\n\t\t\t\t\tlet rightLocation = this.getAdjustedXLocation(dataItem, xField, bullet.locationX);\r\n\t\t\t\t\tlet leftLocation = this.getAdjustedXLocation(dataItem, xOpenField, bullet.locationX);\r\n\r\n\t\t\t\t\tpositionX = xAxis.categoryToPosition((<any>dataItem)[xField], rightLocation);\r\n\t\t\t\t\tlet openPositionX: number;\r\n\r\n\r\n\t\t\t\t\tif (xOpenField) {\r\n\t\t\t\t\t\topenPositionX = xAxis.categoryToPosition((<any>dataItem)[xOpenField], leftLocation);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openPositionX)) {\r\n\t\t\t\t\t\topenPositionX = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionX = openPositionX + (positionX - openPositionX) * bulletLocationX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(yField);\r\n\r\n\t\t\t\t\tif (!yOpenField) {\r\n\t\t\t\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\t\t\t\topenValue = yAxis.baseValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openValue)) {\r\n\t\t\t\t\t\topenValue = closeValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueY\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tif (openValue == closeValue) {\r\n\t\t\t\t\t\tlet baseInterval = yAxis.baseInterval;\r\n\t\t\t\t\t\tlet dateFormatter = yAxis.dateFormatter;\r\n\t\t\t\t\t\topenValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc, undefined, dateFormatter.timezoneMinutes, dateFormatter.timezone).getTime();\r\n\t\t\t\t\t\tcloseValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet middleValue: number;\r\n\r\n\t\t\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * bulletLocationY;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (yAxis instanceof ValueAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(yField);\r\n\r\n\t\t\t\t\tif (!yOpenField) {\r\n\t\t\t\t\t\topenValue = yAxis.baseValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueY\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\r\n\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], bulletLocationY);\r\n\r\n\t\t\t\t\tlet topLocation = this.getAdjustedYLocation(dataItem, yField, bullet.locationY);\r\n\t\t\t\t\tlet bottomLocation = this.getAdjustedYLocation(dataItem, yOpenField, bullet.locationY);\r\n\r\n\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], topLocation);\r\n\t\t\t\t\tlet openPositionY: number;\r\n\r\n\t\t\t\t\tif (yOpenField) {\r\n\t\t\t\t\t\topenPositionY = yAxis.categoryToPosition((<any>dataItem)[yOpenField], bottomLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.isNumber(openPositionY)) {\r\n\t\t\t\t\t\topenPositionY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionY = openPositionY + (positionY - openPositionY) * bulletLocationY;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.visible = true;\r\n\t\t\t\tthis.positionBulletReal(bullet, positionX, positionY);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tbullet.x = this.xAxis.renderer.positionToPoint(positionX, positionY).x;\r\n\t\tbullet.y = this.yAxis.renderer.positionToPoint(positionY, positionX).y;\r\n\t}\r\n\r\n\t/**\r\n\t * returns bullet x location\r\n\t * @ignore\r\n\t */\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bullet x location\r\n\t * @ignore\r\n\t */\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * This method must be called if you update Series' data fields that might\r\n\t * affect stacking of the series.\r\n\t *\r\n\t * Since individual `dataField` changes are not being monitored, you need\r\n\t * todo it manually for changes to take affect.\r\n\t *\r\n\t * @since 4.7.21\r\n\t */\r\n\tpublic updateStacking(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this.baseAxis) {\r\n\t\t\t\t\tseries.stackedSeries = undefined;\r\n\t\t\t\t\tseries.invalidateDataItems();\r\n\t\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t * \r\n\t * Note: proper stacking is only possible if series have the same number\r\n\t * of data items. To ensure this, don't set data directly on series\r\n\t * but do this on chart instead.\r\n\t *\r\n\t * @default false\r\n\t * @param stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tif (this.setPropertyValue(\"stacked\", stacked, true)) {\r\n\t\t\tthis.updateStacking();\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (!stacked) {\r\n\t\t\t\tlet field: string;\r\n\r\n\t\t\t\tif (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tfield = this.xField;\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tfield = this.yField;\r\n\t\t\t\t}\r\n\t\t\t\tif (field) {\r\n\t\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(field, 0, \"stackTrue\");\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position? In order this to work, you should set snapTooltip = false on the series baseAxis.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tif (this.isHidden) {\r\n\t\t\tif (this.appeared && this.xAxis instanceof DateAxis && this.xAxis.groupData) {\r\n\t\t\t\tthis._tmin.setKey(this.yAxis.uid, undefined);\r\n\t\t\t\tthis._tmax.setKey(this.yAxis.uid, undefined);\r\n\t\t\t}\r\n\t\t\tif (this.appeared && this.yAxis instanceof DateAxis && this.yAxis.groupData) {\r\n\t\t\t\tthis._tmin.setKey(this.xAxis.uid, undefined);\r\n\t\t\t\tthis._tmax.setKey(this.xAxis.uid, undefined);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\t\tif (!options.animationsEnabled) {\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet realDuration = interpolationDuration;\r\n\t\t\tif (i < this.startIndex - 10 || i > this.endIndex + 10) {\r\n\t\t\t\trealDuration = 0;\r\n\t\t\t\tdelay = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.sequencedInterpolation && realDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(realDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\t// other data sets\r\n\t\tthis.dataSets.each((key, dataSet) => {\r\n\t\t\tif (dataSet != this.dataItems) {\r\n\t\t\t\tdataSet.each((dataItem) => {\r\n\t\t\t\t\tdataItem.events.disable();\r\n\t\t\t\t\tdataItem.show(0, 0, fields);\r\n\t\t\t\t\tdataItem.events.enable();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (this.mainDataSet != this.dataItems) {\r\n\t\t\tthis.mainDataSet.each((dataItem) => {\r\n\t\t\t\tdataItem.events.disable();\r\n\t\t\t\tdataItem.show(0, 0, fields);\r\n\t\t\t\tdataItem.events.enable();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\tif (this.hidden) {\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\tthis.hidden = false;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < xAxis.baseValue && xAxis.maxZoomed > xAxis.baseValue) || this.stackedSeries) {\r\n\t\t\t\tvalue = xAxis.baseValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < yAxis.baseValue && yAxis.maxZoomed > yAxis.baseValue) || this.stackedSeries) {\r\n\t\t\t\tvalue = yAxis.baseValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif (!options.animationsEnabled) {\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet realDuration = interpolationDuration;\r\n\r\n\t\t\tif (i < this.startIndex - 10 || i > this.endIndex + 10) {\r\n\t\t\t\trealDuration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (realDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && realDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(realDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\t// other data sets\r\n\t\tthis.dataSets.each((key, dataSet) => {\r\n\t\t\tif (dataSet != this.dataItems) {\r\n\t\t\t\tdataSet.each((dataItem) => {\r\n\t\t\t\t\tdataItem.events.disable();\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t\tdataItem.events.enable();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (this.mainDataSet != this.dataItems) {\r\n\t\t\tthis.mainDataSet.each((dataItem) => {\r\n\t\t\t\tdataItem.events.disable();\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\tdataItem.events.enable();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\t\tif (this.appeared) {\r\n\t\t\tthis.dispatch(\"selectionextremeschanged\");\r\n\t\t}\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked || series.stackedSeries) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!this.stacked || !xAxis || !yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!field) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\t\t\t\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stackTrue\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == xAxis && prevSeries.yAxis == yAxis && prevSeries.className == this.className) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tlet prevStack = prevDataItem.getValue(field, \"stackTrue\");\r\n\t\t\t\t\t\tif (prevStack == null) {\r\n\t\t\t\t\t\t\tprevStack = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet prevRealValue = prevDataItem.getValue(field) + prevStack;\r\n\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\r\n\t\t\t\t\t\tif (this.stackToNegative) {\r\n\t\t\t\t\t\t\tif ((value >= 0 && prevRealValue >= 0) || (value < 0 && prevRealValue < 0)) {\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevRealValue, \"stackTrue\");\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevRealValue, \"stackTrue\");\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This setting indicates how negative values are treated in stacked stacked\r\n\t * series.\r\n\t *\r\n\t * If set to `true` (default), negative values will stack on the base line.\r\n\t *\r\n\t * If set to `false`, negative value will stack in relation to the previous\r\n\t * value in the stack.\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @param  value  Stack to base line\r\n\t */\r\n\tpublic set stackToNegative(value: boolean) {\r\n\t\tthis.setPropertyValue(\"stackToNegative\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Stack to base line\r\n\t */\r\n\tpublic get stackToNegative(): boolean {\r\n\t\treturn this.getPropertyValue(\"stackToNegative\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\t// not good, because bad if there are no items with values in selection\r\n\t\t//if (!$type.isNumber(value)) {\r\n\t\t//value = this.min(axis);\r\n\t\t//}\t\t\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\t// not good, because bad if there are no items with values in selection\r\n\t\t//if (!$type.isNumber(value)) {\r\n\t\t//value = this.max(axis);\r\n\t\t//}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up base axes\r\n\t\t\tif ($type.hasValue(config.baseAxis) && $type.isString(config.baseAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.baseAxis)) {\r\n\t\t\t\t\tconfig.baseAxis = this.map.getKey(config.baseAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.baseAxis + \"\\\" found for `baseAxis`.\");\r\n\t\t\t\t\tdelete config.baseAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthis.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string): IPoint {\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\t\tx = $math.fitToRange(x, -this._maxxX, this._maxxX); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\t\ty = $math.fitToRange(y, -this._maxxY, this._maxxY); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t\treturn { x: x, y: y };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\r\n\t\t// We do not want to overwrite this if `itemReaderText` was changed by\r\n\t\t// user code.\r\n\t\tif (this._itemReaderTextChanged) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t\tthis._itemReaderTextChanged = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * If set to `true` (default), the tooltips set for all series item's\r\n\t * elements like columns and bullets will be automatically shown\r\n\t * when [[XYCursor]] passes over category/date, even if its not hovered\r\n\t * directly over the item.\r\n\t *\r\n\t * Set this to `false` to disable such behavior and display item-specific\r\n\t * tooltips only when hovered directly over them\r\n\t *\r\n\t * @default true\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t *\r\n\t * If set to `true` (default) and chart cursor is enabled on th chart,\r\n\t * hovering over date/category will trigger hover states on related Series\r\n\t * items like bullets and columns.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t * @param  value  Hover enabled?\r\n\t */\r\n\tpublic set cursorHoverEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorHoverEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hover enabled?\r\n\t */\r\n\tpublic get cursorHoverEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorHoverEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Exclude from totals?\r\n\t */\r\n\tpublic set excludeFromTotal(value: boolean) {\r\n\t\tthis.setPropertyValue(\"excludeFromTotal\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from totals?\r\n\t */\r\n\tpublic get excludeFromTotal(): boolean {\r\n\t\treturn this.getPropertyValue(\"excludeFromTotal\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' tooltip should be hidden while series axis range is\r\n\t * animating (zooming).\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.16\r\n\t * @param  value  Hide tooltip while zooming?\r\n\t */\r\n\tpublic set hideTooltipWhileZooming(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideTooltipWhileZooming\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide tooltip while zooming?\r\n\t */\r\n\tpublic get hideTooltipWhileZooming(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideTooltipWhileZooming\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if series' bullets should be masked.\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.17\r\n\t * @param  value  Mask bullets?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value)\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.bulletsContainer.parent = chart.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.parent = chart.axisBulletsContainer;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullets?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.groupFields = $utils.copyProperties(source.groupFields, {});\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tif (this.scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.dispose();\r\n\t\t}\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n", "/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { options } from \"../../core/Options\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tif (!$utils.isIE()) {\r\n\t\t\tlet filter = new DesaturateFilter();\r\n\t\t\tfilter.filterUnits = \"userSpaceOnUse\";\r\n\t\t\tscrollbarChart.plotContainer.filters.push(filter);\r\n\t\t}\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tif (!sourceSeries.xAxis || !sourceSeries.yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tscrollbarChart.dateFormatter.inputDateFormat = this.chart.dateFormatter.inputDateFormat;\r\n\r\n\t\t// Ensure that scrollbar chart shares the same locale as parent chart\r\n\t\tscrollbarChart.language.locale = this.chart.language.locale;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis && this.scrollbarChart.xAxes.length > 0) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis && this.scrollbarChart.yAxes.length > 0) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsourceSeries.events.on(\"beforedisposed\", () => {\r\n\t\t\tthis.series.removeValue(sourceSeries)\r\n\t\t})\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif(options.onlyShowOnViewport || options.queue){\r\n\t\t\tthis.addDisposer(this.chart.events.on(\"removedfromqueue\", function(){\r\n\t\t\t\tscrollbarChart.invalidateData();\r\n\t\t\t}))\r\n\t\t}\r\n\r\n\t\tif($utils.isIE()){\r\n\t\t\tseries.stroke = color(\"#aaaaaa\");\r\n\t\t\tseries.fill = series.stroke;\r\n\t\t\tseries.propertyFields.fill = undefined;\r\n\t\t\tseries.propertyFields.stroke = undefined;\r\n\t\t}\r\n\t\tsourceSeries.scrollbarSeries = series;\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\t//xAxis.id = sourceSeries.uid;\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.padding(0, 0, 0, 0);\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.margin(0, 0, 0, 0);\r\n\r\n\t\t\txAxis.width = percent(100);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\t\t\txAxis.maxZoomCount = undefined;\r\n\t\t\txAxis.minZoomCount = undefined;\r\n\r\n\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\tlet vAxis = <DateAxis>xAxis;\r\n\t\t\t\tlet sourceAxis = <DateAxis>sourceSeries.xAxis;\r\n\t\t\t\tvAxis.groupCount = sourceAxis.groupCount * 5;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false))\r\n\t\t\t}\r\n\t\t\telse if (xAxis instanceof ValueAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>xAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.min;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.max;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false))\r\n\t\t\t}\r\n\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scrollbarChart.xAxes.each((xAxis) => {\r\n\t\t\t\tif (xAxis.clonedFrom == sourceSeries.xAxis) {\r\n\t\t\t\t\tseries.xAxis = xAxis;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.padding(0, 0, 0, 0);\r\n\t\t\trenderer.margin(0, 0, 0, 0);\r\n\t\t\tyAxis.height = percent(100);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\r\n\t\t\tyAxis.maxZoomCount = undefined;\r\n\t\t\tyAxis.minZoomCount = undefined;\r\n\r\n\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>yAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tlet sourceAxis = <DateAxis>sourceSeries.yAxis;\r\n\t\t\t\tyAxis.groupCount = sourceAxis.groupCount * 5;\r\n\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\r\n\t\t\telse if (yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>yAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scrollbarChart.yAxes.each((yAxis) => {\r\n\t\t\t\tif (yAxis.clonedFrom == sourceSeries.yAxis) {\r\n\t\t\t\t\tseries.yAxis = yAxis;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tlet scrollbarChart = this.scrollbarChart;\r\n\r\n\t\tscrollbarChart.series.each((series) => {\r\n\t\t\tif (series && series.clonedFrom == sourceSeries) {\r\n\t\t\t\tscrollbarChart.series.removeValue(series);\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (scrollbarChart.series.length == 0) {\r\n\t\t\tscrollbarChart.xAxes.clear();\r\n\t\t\tscrollbarChart.yAxes.clear();\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t\t}\r\n\t\tcatch (err) {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] object representing overlay that is used to dim area of the\r\n\t * scrollbar that is currently not selected.\r\n\t *\r\n\t * Use its `fillOpacity` to set opacity of the fill, with `0` (zero)\r\n\t * completely disabling the dimming, and `1` making unselected area completely\r\n\t * blank.\r\n\t *\r\n\t * @since 4.6.1\r\n\t * @readonly\r\n\t * @return Unselected area curtain element\r\n\t */\r\n\tpublic get unselectedOverlay(): Sprite {\r\n\t\treturn this._unselectedOverlay;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// add data is handled in XYChart\r\n\t\t\t// invalidating all data caused the problem: https://github.com/amcharts/amcharts4/issues/2096\r\n\t\t\tthis.scrollbarChart.invalidateRawData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic updateThumb(dispatchEvents: boolean = true) {\r\n\t\tsuper.updateThumb(dispatchEvents);\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n", "/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $number from \"../../core/utils/Number\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when horizontal mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\thorizontalMouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _mouseWheelDisposer2: IDisposer;\r\n\r\n\tprotected _cursorXPosition: number;\r\n\r\n\tprotected _cursorYPosition: number;\r\n\r\n\t/**\r\n\t * Holds a reference to the container axis bullets are drawn in.\r\n\t */\r\n\tpublic axisBulletsContainer: Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet axisBulletsContainer: Container = this.plotContainer.createChild(Container);\r\n\t\taxisBulletsContainer.shouldClone = false;\r\n\t\taxisBulletsContainer.width = percent(100);\r\n\t\taxisBulletsContainer.height = percent(100);\r\n\t\taxisBulletsContainer.isMeasured = false;\r\n\t\taxisBulletsContainer.zIndex = 4;\r\n\t\taxisBulletsContainer.layout = \"none\";\r\n\t\tthis.axisBulletsContainer = axisBulletsContainer;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.dataGrouped = false;\r\n\t\t\t\tseries._baseInterval = {};\r\n\t\t\t})\r\n\t\t}, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tsuper.reinit();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tseries.appeared = false;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tpublic toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\taxes.each((axis) => {\r\n\t\t\tif (!axis.zoomable || (axis instanceof ValueAxis && axis.syncWithAxis)) {\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet axisStart = axis.start;\r\n\t\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\t\tstart = axisStart;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\t\tend = axisEnd;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\trenderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n\r\n\t\tthis._disposers.push(axis.events.on(\"positionchanged\", () => {\r\n\t\t\tlet point = $utils.spritePointToSprite({ x: 0, y: 0 }, axis, this.axisBulletsContainer);\r\n\t\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\t\trenderer.bulletsContainer.y = point.y;\r\n\t\t\t}\r\n\t\t\tif (axis.renderer instanceof AxisRendererX) {\r\n\t\t\t\trenderer.bulletsContainer.x = point.x;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t\tthis.updateSeriesMasks();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet mask = series.mainContainer.mask;\r\n\t\t\t\tseries.mainContainer.mask = undefined;\r\n\t\t\t\tseries.mainContainer.mask = mask;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\r\n\t\tif (series) {\r\n\t\t\tif (series.xAxis) {\r\n\t\t\t\tseries.xAxis.series.removeValue(series);\r\n\t\t\t\tseries.xAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\tif (series.yAxis) {\r\n\t\t\t\tseries.yAxis.series.removeValue(series);\r\n\t\t\t\tseries.yAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\t// otherwise extremes won't change\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.resetExtremes();\r\n\t\t\t})\r\n\t\t}\r\n\t\tsuper.handleSeriesRemoved(event);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._xAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._yAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tseries.maskBullets = series.maskBullets;\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\t\t\tseries.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(series.fillOpacity)) {\r\n\t\t\t\t\t\tseries.fill.backgroundOpacity = series.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.stroke instanceof Color) {\r\n\t\t\t\t\t\tseries.fill.stroke = series.stroke;\r\n\t\t\t\t\t\tseries.fill.fill = series.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.tapToActivate) {\r\n\t\t\t\t\t// We need this in order to setup cursor properly\r\n\t\t\t\t\tthis.setTapToActivate(this.tapToActivate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxes: Axis[] = [];\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\r\n\t\t\tif (snapToSeries && !cursor.downPoint) {\r\n\t\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\t\tsnapToSeries = [snapToSeries];\r\n\t\t\t\t}\r\n\t\t\t\tlet dataItems: XYSeriesDataItem[] = [];\r\n\r\n\t\t\t\t$array.each(snapToSeries, (snpSeries) => {\r\n\t\t\t\t\tif (!snpSeries.isHidden && !snpSeries.isHiding) {\r\n\r\n\t\t\t\t\t\tlet xAxis = snpSeries.xAxis;\r\n\t\t\t\t\t\tlet yAxis = snpSeries.yAxis;\r\n\r\n\t\t\t\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\r\n\t\t\t\t\t\t\tsnpSeries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\t\tdataItems.push(dataItem);\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.xAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.yAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tlet closestDataItem = this.getClosest(dataItems, xPosition, yPosition);\r\n\r\n\t\t\t\tif (closestDataItem) {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tlet closestSeries = closestDataItem.component;\r\n\t\t\t\t\t\tif (series != closestSeries) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t\tif (series.xAxis != closestSeries.xAxis) {\r\n\t\t\t\t\t\t\t\tseries.xAxis.hideTooltip();\r\n\t\t\t\t\t\t\t\texceptAxes.push(series.xAxis);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (series.yAxis != closestSeries.yAxis) {\r\n\t\t\t\t\t\t\t\tseries.yAxis.hideTooltip();\r\n\t\t\t\t\t\t\t\texceptAxes.push(series.yAxis);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tclosestDataItem.component.showTooltipAtDataItem(closestDataItem);\r\n\t\t\t\t\tcursor.handleSnap(closestDataItem.component);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t\tthis._seriesPoints = [];\r\n\r\n\t\t\tif (this._cursorXPosition != xPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this._cursorYPosition != yPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this.arrangeTooltips) {\r\n\t\t\t\tthis.sortSeriesTooltips(this._seriesPoints);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.afterDraw();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds closest data item to position out of the array of items.\r\n\t *\r\n\t * @since 4.9.29\r\n\t * @param   dataItems  Array of items\r\n\t * @param              xPosition X position\r\n\t * @param              yPosition Y position\r\n\t * @return             Data item\r\n\t */\r\n\tpublic getClosest(dataItems: XYSeriesDataItem[], xPosition: number, yPosition: number): XYSeriesDataItem {\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet closestDataItem: XYSeriesDataItem\r\n\r\n\t\t$array.eachContinue(dataItems, (dataItem) => {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet xAxis = dataItem.component.xAxis;\r\n\t\t\t\tlet yAxis = dataItem.component.yAxis;\r\n\r\n\t\t\t\tlet xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\r\n\t\t\t\tlet yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\r\n\r\n\t\t\t\tlet xField = dataItem.component.xField;\r\n\t\t\t\tlet yField = dataItem.component.yField;\r\n\r\n\t\t\t\tif (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\r\n\t\t\t\tlet dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\r\n\r\n\t\t\t\tlet distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\r\n\r\n\t\t\t\tif (distance < minDistance) {\r\n\t\t\t\t\tminDistance = distance;\r\n\t\t\t\t\tclosestDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn closestDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\t\tthis._cursorXPosition = undefined;\r\n\t\tthis._cursorYPosition = undefined;\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Axis | XYSeries>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tif (sprite.cursorTooltipEnabled) {\r\n\t\t\t\tsprite.hideTooltip(0);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds($utils.spriteRectToSvg({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight }, this));\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\t\tif (seriesPoints.length > 0) {\r\n\t\t\tlet cursor = this.cursor;\r\n\r\n\t\t\tif (cursor && $type.isNumber(cursor.maxTooltipDistance)) {\r\n\r\n\t\t\t\tlet cursorPoint = $utils.spritePointToSvg({ x: cursor.point.x, y: cursor.point.y }, cursor);\r\n\r\n\t\t\t\tlet nearestSeries: XYSeries;\r\n\t\t\t\tlet nearestPoint: IPoint;\r\n\t\t\t\tlet smallestDistance: number = Infinity;\r\n\r\n\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\tlet series = seriesPoint.series;\r\n\t\t\t\t\tlet fixedPoint = seriesPoint.point;\r\n\t\t\t\t\tif (fixedPoint) {\r\n\t\t\t\t\t\tlet point = { x: fixedPoint.x, y: fixedPoint.y };\r\n\r\n\t\t\t\t\t\tlet distance = Math.abs($math.getDistance(point, cursorPoint));\r\n\t\t\t\t\t\tif (distance < smallestDistance) {\r\n\t\t\t\t\t\t\tnearestPoint = point;\r\n\t\t\t\t\t\t\tsmallestDistance = distance;\r\n\t\t\t\t\t\t\tnearestSeries = series;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tlet newSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t\tif (nearestSeries) {\r\n\r\n\t\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\t\tif (Math.abs($math.getDistance(seriesPoint.point, nearestPoint)) <= Math.abs(cursor.maxTooltipDistance)) {\r\n\t\t\t\t\t\t\tnewSeriesPoints.push({ series: seriesPoint.series, point: seriesPoint.point });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlet tooltipDataItem = seriesPoint.series.tooltipDataItem;\r\n\t\t\t\t\t\t\tif (tooltipDataItem) {\r\n\t\t\t\t\t\t\t\t$array.each(tooltipDataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t\t\t\t\t\tsprite.handleOutReal(); // to avoid flicker\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tseriesPoint.series.hideTooltip(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tif (cursor.maxTooltipDistance < 0) {\r\n\t\t\t\t\t\tif (newSeriesPoints.length > 0) {\r\n\t\t\t\t\t\t\t$array.each(newSeriesPoints, (np) => {\r\n\t\t\t\t\t\t\t\tif (nearestSeries != np.series) {\r\n\t\t\t\t\t\t\t\t\tnp.series.hideTooltip(0);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnewSeriesPoints = [{ series: nearestSeries, point: nearestPoint }];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseriesPoints = newSeriesPoints;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\t\tlet sum = 0;\r\n\t\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\tlet point = seriesPoint.point;\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\t\tsum += point.y;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\t\tlet firstSeries = this.series.getIndex(0);\r\n\t\t\tlet inversed = false;\r\n\t\t\tif (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\r\n\t\t\t\tinversed = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (inversed) {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(a.point.y, b.point.y))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(b.point.y, a.point.y))\r\n\t\t\t\tseriesPoints.reverse();\r\n\t\t\t}\r\n\r\n\t\t\tlet averageY = sum / seriesPoints.length;\r\n\t\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\t\tif (seriesPoints.length > 0) {\r\n\t\t\t\tlet top = topLeft.y;\r\n\t\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\t\tlet dropped = false;\r\n\r\n\t\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\t\tlet nextY = top;\r\n\t\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis[]): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (!except || except.indexOf(axis) == -1) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t\tif (xAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartXRange = $math.invertRange(this._panStartXRange)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t\tif (yAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartYRange = $math.invertRange(this._panStartYRange)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet delta = 0;\r\n\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (panStartRange.end > 1) {\r\n\t\t\t\tif (panEndRange.end > panStartRange.end) {\r\n\t\t\t\t\tdelta = panEndRange.end - panStartRange.end;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleYAxisSet(series: XYSeries) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\tthis.events.on(\"datavalidated\", () => scrollbar.updateThumb(false), this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(\r\n\t\t\t\t\t\txAxis.renderer.inversed\r\n\t\t\t\t\t\t\t? 1 - arg.position\r\n\t\t\t\t\t\t\t: arg.position\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\r\n\t\t\tscrollbar.adapter.add(\"positionValueDirection\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.flipped = xAxis.renderer.inversed;\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\tthis.events.on(\"datavalidated\", () => scrollbar.updateThumb(false), this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(yAxis.renderer.inversed ? arg.position : 1 - arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\r\n\t\t\tscrollbar.adapter.add(\"positionValueDirection\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.flipped = !yAxis.renderer.inversed;\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number, stop?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tlet originalRange = range;\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\r\n\t\t\t\tlet maxZoomFactor = axis.maxZoomFactor;\r\n\t\t\t\tif ($type.isNumber(axis.minZoomCount)) {\r\n\t\t\t\t\tmaxZoomFactor = maxZoomFactor / axis.minZoomCount\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (stop && 1 / (range.end - range.start) >= maxZoomFactor) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (axis.zoomable) {\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\trange = $math.invertRange(originalRange);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trange = originalRange;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\t\t\tif (round) {\r\n\t\t\t\t\t\t\t//let diff = range.end - range.start;\r\n\t\t\t\t\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\t\t\t\t\tlet cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\r\n\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + cellWidth / 2 - (axis.startLocation) * cellWidth, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlet d = 0.0001;\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + d, 0, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end + d, 0, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trealRange = axisRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tthis.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleHorizontalWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\r\n\t\tthis.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint)\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleWheelReal(shift: number, mouseWheelBehavior: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\", plotPoint: IPoint) {\r\n\t\tif (shift != 0) {\r\n\t\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet shiftStep = .1;\r\n\r\n\t\t\tlet maxPanOut = 0;\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tlet round = false;\r\n\t\t\t\tlet singleItemStep = shiftStep;\r\n\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\tsingleItemStep = .5 / ((rangeX.end - rangeX.start) * xAxis.dataItems.length);\r\n\t\t\t\t\tround = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshiftStep = Math.max(0.2, singleItemStep);\r\n\r\n\t\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartX <= 0) {\r\n\t\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndX >= 1) {\r\n\t\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined, round);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tlet singleItemStep = shiftStep;\r\n\t\t\t\tlet round = false;\r\n\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\tsingleItemStep = .5 / ((rangeX.end - rangeX.start) * yAxis.dataItems.length);\r\n\t\t\t\t\tround = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshiftStep = Math.max(0.2, singleItemStep);\r\n\r\n\t\t\t\tshift *= -1;\r\n\t\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartY <= 0) {\r\n\t\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndY >= 1) {\r\n\t\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined, round);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\t\tlet location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\r\n\t\t\t\tnewStartX = Math.min(newStartX, location2X);\r\n\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\t\tnewEndX = Math.max(newEndX, location2X);\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\t\tlet location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\r\n\t\t\t\tnewStartY = Math.min(newStartY, location2Y);\r\n\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\t\t\t\tnewEndY = Math.max(newEndY, location2Y);\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set horizontalMouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer2);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer2) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer2.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal mouse wheel behavior\r\n\t */\r\n\tpublic get horizontalMouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"horizontalMouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.xAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.xAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.yAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.yAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis) => {\r\n\t\t\tlet a = this.xAxes.push(axis.clone());\r\n\t\t\ta.chart = this;\r\n\t\t\ta.renderer.chart = this;\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis) => {\r\n\t\t\tlet a = this.yAxes.push(axis.clone());\r\n\t\t\ta.renderer.chart = this;\r\n\t\t\ta.chart = this;\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif (source.cursor) {\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarX) {\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarY) {\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarX, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarY, removeCount);\r\n\t\t}\r\n\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected addScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tchart._parseDataFrom = chart.data.length;\r\n\t\tchart.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected removeScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\twhile (removeCount > 0) {\r\n\t\t\t\tlet dataItem = this.dataItems.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchart.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchart.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tlet dataItem = dataUser.dataItems.getIndex(0);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataUser.dataItems.remove(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tchart._parseDataFrom--;\r\n\r\n\t\t\t\tremoveCount--;\r\n\t\t\t}\r\n\r\n\t\t\tchart.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>) {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarX, count);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarY, count);\r\n\t\t}\r\n\r\n\t\tsuper.removeData(count);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = value;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = false;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = true;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n", "/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeries } from \"./LineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\tpublic series: LineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.fill = color();\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0 && $type.isNumber(points[0].x) && $type.isNumber(points[0].y)) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0])\r\n\r\n\t\t\t\tlet series = this.series;\r\n\r\n\t\t\t\tif (series.smoothing == \"bezier\") {\r\n\t\t\t\t\tpath += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.smoothing == \"monotoneX\") {\r\n\t\t\t\t\tpath += new $smoothing.MonotoneX({ closed: false }).smooth(points);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.smoothing == \"monotoneY\") {\r\n\t\t\t\t\tpath += new $smoothing.MonotoneY({ closed: false }).smooth(points);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tif ($type.isNumber(closePoints[0].x) && $type.isNumber(closePoints[0].y)) {\r\n\t\t\t\t\t\tpath += $path.lineTo(closePoints[0]);\r\n\r\n\t\t\t\t\t\tif (series.smoothing == \"bezier\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (series.smoothing == \"monotoneX\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.MonotoneX({ closed: false }).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (series.smoothing == \"monotoneY\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.MonotoneY({ closed: false }).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.events.copyFrom(source.strokeSprite.events);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.events.copyFrom(source.fillSprite.events);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n", "/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\t// TODO can this be removed ?\r\n\t\t\tthis.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\tlet valueStr = this.formatLabel(value, this.tooltipDurationFormat)\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n", "/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { DurationAxis } from \"../axes/DurationAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { LegendDataItem } from \"../Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @default 1.1\r\n\t */\r\n\tautoGapCount?: number;\r\n\r\n\t/**\r\n\t * Smoothing algorythm to use for the line.\r\n\t *\r\n\t * @since 4.10.0\r\n\t */\r\n\tsmoothing: \"bezier\" | \"monotoneX\" | \"monotoneY\";\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Defines type for segment.\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\tprotected _adjustedStartIndex: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.autoGapCount = 1.1;\r\n\r\n\t\tthis.smoothing = \"bezier\";\r\n\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// this makes data items animate when added\r\n\r\n\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (xAxis instanceof DurationAxis) {\r\n\t\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\t\tlet value = dataItem.valueX;\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", previousDataItem.valueX, 0); // instantly move it to previous\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", value); // animate to new value\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (yAxis instanceof DurationAxis) {\r\n\t\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\t\tlet value = dataItem.valueY;\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", previousDataItem.valueY, 0); // instantly move it to previous\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", value); // animate to new value\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryX\", dataItem.locations.categoryX);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryY\", dataItem.locations.categoryY);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\tthis._segmentsIterator.reset();\r\n\r\n\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex);\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex, range);\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\t\tsegment.__disabled = true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._adjustedStartIndex = this.findAdjustedIndex(startIndex, [\"stroke\", \"strokeWidth\", \"strokeDasharray\", \"strokeOpacity\", \"fill\", \"fillOpacity\", \"opacity\"]);\r\n\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected findAdjustedIndex(adjustedIndex: number, properties: string[]): number {\r\n\t\tlet propertyFields: any = this.propertyFields;\r\n\t\tlet startIndex = adjustedIndex;\r\n\r\n\t\t$array.each(properties, (property) => {\r\n\t\t\tif ($type.hasValue(propertyFields[property])) {\r\n\t\t\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tif ($type.hasValue(dataItem.properties[property])) {\r\n\t\t\t\t\t\t\tif (adjustedIndex > i) {\r\n\t\t\t\t\t\t\t\tadjustedIndex = i;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn adjustedIndex;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Wraps openSegment call with iterative solution to prevent stack overflow\r\n\t *\r\n\t * @param openIndex  Index\r\n\t * @param axisRange  Range\r\n\t */\r\n\tprotected openSegmentWrapper(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet params = {\r\n\t\t\t\"index\": openIndex,\r\n\t\t\t\"axisRange\": axisRange\r\n\t\t};\r\n\t\tdo {\r\n\t\t\tparams = this.openSegment(params.index, params.axisRange);\r\n\t\t} while (params)\r\n\t}\r\n\r\n\r\n\tprotected getSegment(): LineSeriesSegment {\r\n\t\tlet segment = this._segmentsIterator.getFirst();\r\n\t\tsegment.series = this;\r\n\t\tif (segment.isDisposed()) {\r\n\t\t\tthis.segments.removeValue(segment);\r\n\t\t\treturn this.getSegment();\r\n\t\t}\r\n\t\treturn segment;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param openIndex  [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): { \"index\": number, \"axisRange\": AxisDataItem } {\r\n\t\tlet addToClose = false;\r\n\t\tlet points: IPoint[] = [];\r\n\t\topenIndex = Math.min(openIndex, this.dataItems.length);\r\n\t\tlet endIndex: number = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\t\tthis._workingEndIndex = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this.getSegment();\r\n\t\tsegment.strokeDasharray = undefined;\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tthis.group.node.removeAttribute(\"fill\");\r\n\r\n\t\tlet connect: boolean = this.connect;\r\n\t\tlet valuesFound: boolean = false; // some flag to avoid multiple closes if no values found\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t\tvaluesFound = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect && valuesFound) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (this.baseAxis instanceof DateAxis) {\r\n\t\t\t\tlet next = this.dataItems.getIndex(i + 1)\r\n\t\t\t\tif (next && this.baseAxis.makeGap(next, dataItem)) {\r\n\t\t\t\t\taddToClose = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.closeSegment(segment, points, openIndex, closeIndex, axisRange, addToClose);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment    [description]\r\n\t * @param points     [description]\r\n\t * @param openIndex  [description]\r\n\t * @param closeIndex [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem, add?: boolean) {\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (add) {\r\n\t\t\tcloseIndex++;\r\n\t\t}\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\treturn { \"index\": closeIndex, \"axisRange\": axisRange };\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param itemProperties  Item properties\r\n\t * @param segment         Segment\r\n\t * @return Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"connect\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * IMPORTANT: line smoothing works best when data items are placed at regular\r\n\t * intervals. For setups where data items are spaced erratically, enabling\r\n\t * smoothing might result in awkwardly looking lines.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.y2 = 0.00001;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.stroke;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\r\n\t\t\tif ((bullet instanceof Bullet) && !bullet.copyToLegendMarker) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet hasLabels: boolean = false;\r\n\r\n\t\t\tif (bullet instanceof Container) {\r\n\t\t\t\t// do not copy bullets with labels\r\n\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (!hasLabels) {\r\n\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\tclone.parent = marker;\r\n\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\tclone.x = w / 2;\r\n\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t}\r\n\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @since 4.2.4\r\n\t * @param  value  Gap count\r\n\t */\r\n\tpublic set autoGapCount(value: number) {\r\n\t\tthis.setPropertyValue(\"autoGapCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Gap count\r\n\t */\r\n\tpublic get autoGapCount(): number {\r\n\t\treturn this.getPropertyValue(\"autoGapCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Smoothing algorithm to be used for lines.\r\n\t *\r\n\t * Available options: `\"bezier\"` (default), `\"monotoneX\"`, and `\"monotoneY\"`.\r\n\t *\r\n\t * Monotone options are best suited for data with irregular intervals. Use `\"monotoneX\"` for\r\n\t * horizontal lines, and `\"monotoneY\"` vertical ones.\r\n\t *\r\n\t * NOTE: Both \"monotone\" algorithms will ignore `tensionX` and `tensionY` settings.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @param  value  Smoothing algorithm\r\n\t */\r\n\tpublic set smoothing(value: \"bezier\" | \"monotoneX\" | \"monotoneY\") {\r\n\t\tthis.setPropertyValue(\"smoothing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Smoothing algorithm\r\n\t */\r\n\tpublic get smoothing(): \"bezier\" | \"monotoneX\" | \"monotoneY\" {\r\n\t\treturn this.getPropertyValue(\"smoothing\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n", "/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\n//import { Sprite } from \"../../core/Sprite\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif(positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end){\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\t\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\t\t\r\n\t}\r\n\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererRadial>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif(this.__disabled || this.disabled){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n", "/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n", "/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if label should be bent along the circle\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tbent?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx: number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.locationOnPath = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positioned along the circle.\r\n\t *\r\n\t * @param value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t\tif (!$type.hasValue(value)) {\r\n\t\t\tthis.rotation = undefined;\r\n\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem && dataItem.component) {\r\n\t\t\t\tdataItem.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if label should be bent along the circle.\r\n\t *\r\n\t * IMPORTANT: Use this with caution, since it is quite CPU-greedy.\r\n\t *\r\n\t * @since 4.1.2\r\n\t * @default false\r\n\t * @param  value  Bent?\r\n\t */\r\n\tpublic set bent(value: boolean) {\r\n\t\tthis.setPropertyValue(\"bent\", value, true);\r\n\t\tthis.setPropertyValue(\"wrap\", false);\r\n\t\tthis.setPropertyValue(\"horizontalCenter\", \"none\");\r\n\t\tthis.setPropertyValue(\"verticalCenter\", \"none\");\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.setPropertyValue(\"dx\", 0);\r\n\t\t\tthis.setPropertyValue(\"dy\", 0);\r\n\t\t\tthis.setPropertyValue(\"x\", 0);\r\n\t\t\tthis.setPropertyValue(\"y\", 0);\r\n\t\t\tthis.setPropertyValue(\"rotation\", 0)\r\n\t\t\t//this.setPropertyValue(\"relativeRotation\", undefined);\r\n\t\t\tthis.fdx = 0;\r\n\t\t\tthis.fdy = 0;\r\n\t\t\tthis.textAlign = \"middle\";\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(this.textPathElement){\r\n\t\t\t\tthis.textPathElement.dispose();\r\n\t\t\t\tthis.textPathElement = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bent?\r\n\t */\r\n\tpublic get bent(): boolean {\r\n\t\treturn this.getPropertyValue(\"bent\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label radius in pixels.\r\n\t * \r\n\t * @param   axisRadius  Radius\r\n\t * @return              Pixel radius\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label horizontal radius in pixels.\r\n\t * \r\n\t * @param   axisRadius   Radius\r\n\t * @param   axisRadiusY  Vertical radius\r\n\t * @return               Radius\r\n\t */\r\n\tpublic pixelRadiusY(axisRadius: number, axisRadiusY: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet radius = this.radius;\r\n\r\n\t\tif ($type.isNumber(radius)) {\r\n\t\t\tradius *= axisRadiusY / axisRadius;\r\n\t\t\treturn $utils.relativeToValue(radius, axisRadius) * sign;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $utils.relativeToValue(radius, axisRadiusY) * sign;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param point       Label affixation point\r\n\t * @param axisRadius  Distance from point (px)\r\n\t */\r\n\tpublic fixPosition(angle: number, axisRadius: number, axisRadiusY?: number, dx?: number, dy?: number) {\r\n\t\tif (!$type.isNumber(axisRadiusY)) {\r\n\t\t\taxisRadiusY = axisRadius;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(dx)) {\r\n\t\t\tdx = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(dy)) {\r\n\t\t\tdy = 0;\r\n\t\t}\r\n\r\n\t\tlet point = { x: axisRadius * $math.cos(angle), y: axisRadiusY * $math.sin(angle) };\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet isNegative = false;\r\n\t\tlet realRadius = this.radius;\r\n\r\n\t\tif (realRadius instanceof Percent && realRadius.value < 0) {\r\n\t\t\tisNegative = true;\r\n\t\t}\r\n\t\telse if (realRadius < 0) {\r\n\t\t\tisNegative = true;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif (this.bent) {\r\n\t\t\tlet point = { x: (axisRadius + labelRadius )* $math.cos(angle + 180), y: (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle + 180) };\r\n\t\t\tthis.path = $path.moveTo(point) + $path.arcTo(angle + 180, 360, axisRadius + labelRadius, axisRadiusY + labelRadius * axisRadiusY / axisRadius);\r\n\t\t\t\r\n\t\t\tif (this.textPathElement) {\r\n\t\t\t\tthis.textPathElement.attr({ \"startOffset\": (this.locationOnPath * 100) + \"%\" })\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// WHEN ROTATED\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.horizontalCenter = \"none\";\r\n\t\t\tthis.verticalCenter = \"none\";\r\n\r\n\t\t\tangle = $math.fitAngleToRange(angle, -180, 180);\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = -pixelPaddingLeft - pixelPaddingRight;\r\n\t\t\t\t\tpixelHeight = - pixelHeight - pixelPaddingTop - pixelPaddingBottom;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\t\tpoint.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// END OF ROTATED\r\n\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\tthis.verticalCenter = \"middle\";\r\n\r\n\t\t\tif (isNegative) {\r\n\t\t\t\tthis.dx = 0;\r\n\t\t\t\tthis.dy = 0;\r\n\t\t\t\tpoint.x = (axisRadius + labelRadius) * $math.cos(angle);\r\n\t\t\t\tpoint.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t\t\t// @todo with this math doesn't work well with inside = true\r\n\t\t\t\tthis.dy = this._measuredHeight / 2 * $math.sin(angle) //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\r\n\t\t\t\t// simmilar with dx\r\n\t\t\t\tthis.dx = this._measuredWidth / 2 * $math.cos(angle) //(1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\t\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\t\t\tpoint.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpoint.x += dx;\r\n\t\tpoint.y += dy;\r\n\r\n\t\tthis.fdx = this.dx;\r\n\t\tthis.fdy = this.dy;\r\n\r\n\t\tthis.moveTo(point);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n", "/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { AxisRendererRadial } from \"./AxisRendererRadial\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\r\n\t/**\r\n\t * Y axis renderer\r\n\t */\r\n\tpublic axisRendererY: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = <RadarChart>this.chart;\t\t\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn innerRadius;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\r\n\t\tif (!$type.isNumber(position2)) {\r\n\t\t\tposition2 = 1;\r\n\t\t}\r\n\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\tlet radius = this.pixelRadius;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (this.axisRendererY) {\r\n\t\t\tlet realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity)\r\n\r\n\t\t\tif(realRadius == 0){\r\n\t\t\t\trealRadius = 0.000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet point = { x: realRadius * $math.cos(angle), y: realRadius * $math.sin(angle) };\r\n\t\t\treturn point;\r\n\t\t}\r\n\r\n\t\treturn { x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2, y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts angle on axis to relative position(0-1).\r\n\t *\r\n\t * @param angle Angle in degrees\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic angleToPosition(angle: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\t\tlet position: number\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - (angle - this.startAngle) / arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = (angle - this.startAngle) / arc + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = $math.min(360, endAngle - startAngle);\t\t\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\r\n\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = 0;\r\n\t\t\t}\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tpoint = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) }\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n", "/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _chartType: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = this.chart;\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn innerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element && chart) {\r\n\t\t\t\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = 0;\r\n\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tcount = series.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\tlet count = 0;\r\n\t\tif (series) {\r\n\t\t\tcount = series.dataItems.length;\r\n\t\t}\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: RadarChart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\t\r\n\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n", "/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic mr: number = 1;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\t\tthis.axisBulletsContainer = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\r\n\t\t\tthis.mr = mr;\r\n\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif (axis.renderer.useChartAngles) {\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n", "/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"counterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns hand's relative position on axis\r\n\t */\r\n\tpublic get currentPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\treturn renderer.angleToPosition(this.rotation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n", "/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"hands\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"hands\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n", "/**\r\n * Defines Percent Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { PercentChart } from \"../types/PercentChart\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, 0, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tif (!noChangeValues) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setWorkingValue(\"value\", 0, 0, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): this[\"_tick\"] {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet tick = this.component.ticks.create();\r\n\t\t\tthis._tick = tick;\r\n\t\t\tthis.addSprite(tick);\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\ttick.parent = this.component.ticksContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.ticks.removeValue(tick);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\r\n\t\t\ttick.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): this[\"_label\"] {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._label = label;\r\n\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.component.labelsContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tlabel.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet slice = component.slices.create();\r\n\t\t\tthis.addSprite(slice);\r\n\r\n\t\t\tthis._slice = slice;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tslice.parent = component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tcomponent.slices.removeValue(slice);\r\n\t\t\t}));\r\n\r\n\r\n\t\t\tslice.visible = this.visible;\r\n\r\n\t\t\t// Apply accessibility\r\n\t\t\tif (component.itemsFocusable()) {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"menu\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"list\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply screen reader label\r\n\t\t\tif (slice.focusable) {\r\n\t\t\t\tslice.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t\tif (slice.hoverable) {\r\n\t\t\t\tslice.events.on(\"over\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"out\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t */\r\n\thiddenInLegend?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesProperties extends ISeriesProperties {\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * Pattern set to apply to fills.\r\n\t * \r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\talignLabels?: boolean;\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t */\r\n\tignoreZeroValues?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentSeriesAdapters extends ISeriesAdapters, IPercentSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\r\nexport class PercentSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines type of the slice elements for the series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * Defines type of the tick elements for the series.\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * Defines type of the label elements for the series.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: PercentChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPercentSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PercentSeriesDataItem;\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _slices: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tick\"]>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_label\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PercentSeries\";\r\n\r\n\t\tthis._addAllDataItems = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\t\tthis.calculatePercent = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.alignLabels = false;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#p')}\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a slice element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Sprite();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a tick element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new Tick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sreates label element.\r\n\t *\r\n\t * @return label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new Label();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the slices. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"slices\": {\r\n\t *       \"stroke\": \"#fff\",\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Slices\r\n\t */\r\n\tpublic get slices(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._slices) {\r\n\t\t\tlet slice = this.createSlice();\r\n\r\n\t\t\tslice.applyOnClones = true;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tthis.initSlice(slice);\r\n\r\n\t\t\tthis._slices = new ListTemplate(slice);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._slices));\r\n\t\t}\r\n\t\treturn this._slices;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of tick elements for the series. Ticks connect slice to its label.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the ticks. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"ticks\": {\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Ticks\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tick\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\tthis.initTick(tick);\r\n\r\n\t\t\tthis._ticks = new ListTemplate(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice label elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the labels. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"stroke\": \"#c00\",\r\n\t *       \"fontSize\": 20\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Labels\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_label\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tthis.initLabel(label);\r\n\r\n\t\t\tthis._labels = new ListTemplate(label);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PercentSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param sliceType  Type of the slice element\r\n\t * @return Slice\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\r\n\t}\r\n\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0p')}\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\tprotected initTick(label: this[\"_tick\"]) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\tthis.colors.reset();\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.reset();\r\n\t\t}\r\n\t\tsuper.validateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tif (slice) {\r\n\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(slice.stroke)) {\r\n\t\t\t\t\t\tslice.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tslice.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(slice.fillOpacity)) {\r\n\t\t\t\t\t\tslice.fill.backgroundOpacity = slice.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (slice.stroke instanceof Color) {\r\n\t\t\t\t\t\tslice.fill.stroke = slice.stroke;\r\n\t\t\t\t\t\tslice.fill.fill = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.colors.currentStep += this.colors.step;\r\n\t\t\t}\r\n\r\n\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\tslice.stroke = slice.fill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (slice) {\r\n\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\tif (bullet.fill == undefined) {\r\n\t\t\t\t\tbullet.fill = slice.fill;\r\n\t\t\t\t}\r\n\t\t\t\tif (bullet.stroke == undefined) {\r\n\t\t\t\t\tbullet.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.updateLegendValue(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i = 0, len = dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (label.pixelY - lh / 2 < -this.maxHeight / 2) {\r\n\t\t\t\t\tlabel.y = -this.maxHeight / 2 + lh / 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet nextLabel = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\tlet bottom: number = label.pixelY + lh / 2;\r\n\r\n\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\tif (nextLabel.invalid) {\r\n\t\t\t\t\t\tnextLabel.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet nextLabelHeight = nextLabel.measuredHeight;\r\n\t\t\t\t\tif (!nextLabel.visible) {\r\n\t\t\t\t\t\tnextLabelHeight = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet nextLabelY = nextLabel.pixelY;\r\n\t\t\t\t\tif (nextLabelY == null) {\r\n\t\t\t\t\t\tnextLabelY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (nextLabelY - nextLabelHeight / 2 < bottom) {\r\n\t\t\t\t\t\tnextLabel.y = bottom + nextLabelHeight / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected arrangeLabels2(dataItems: this[\"_dataItem\"][]): void {\r\n\r\n\t\tlet previousTop = this.maxHeight / 2;\r\n\r\n\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//if (i == dataItems.length - 1) {\r\n\t\t\t\t//previousTop += lh / 2;\r\n\t\t\t\t//}\r\n\r\n\t\t\t\tif (label.pixelY + lh / 2 > previousTop) {\r\n\t\t\t\t\tlabel.y = previousTop - lh / 2;\r\n\t\t\t\t\tpreviousTop = label.y - lh / 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param index      Current index\r\n\t * @param dataItems  Data items\r\n\t * @return Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): this[\"_label\"] {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\tif (nextDataItem.visible) {\r\n\t\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker    Container\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: this[\"_slice\"] = dataItem.slice;\r\n\r\n\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\tchild.defaultState.properties.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tchild.fill = slice.fill;\r\n\t\t\tchild.stroke = slice.stroke;\r\n\t\t\tchild.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tif (child.fill == undefined) {\r\n\t\t\t\tchild.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\r\n\t\t\tchild.addDisposer(slice.events.on(\"propertychanged\", (ev) => {\r\n\t\t\t\tif (ev.property == \"fill\") {\r\n\r\n\t\t\t\t\tchild.__disabled = false;\r\n\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.fill = slice.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"stroke\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.stroke = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"strokeOpacity\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.strokeOpacity = slice.strokeOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: this[\"_slice\"] = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\tif (dataItem && dataItem.bullets) {\r\n\t\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\t\tlet value = a[1];\r\n\t\t\t\tthis.positionBullet(value);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PercentSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.colors = source.colors.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setAlignLabels(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t * @param  value  Ignore zero values\r\n\t */\r\n\tpublic set ignoreZeroValues(value: boolean) {\r\n\t\tthis.setPropertyValue(\"ignoreZeroValues\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ignore zero values\r\n\t */\r\n\tpublic get ignoreZeroValues(): boolean {\r\n\t\treturn this.getPropertyValue(\"ignoreZeroValues\");\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tif (dataItem) {\r\n\t\t\tlet legendDataItem = dataItem.legendDataItem;\r\n\t\t\tlet legendSettings = dataItem.legendSettings;\r\n\r\n\t\t\tif (legendDataItem && legendSettings) {\r\n\r\n\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\r\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable labels and ticks.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof PercentSeries) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\r\n\t\t\tlet labelState = target.labels.template.states.create(stateId);\r\n\t\t\tlabelState.properties.disabled = true;\r\n\r\n\t\t\tlet tickState = target.ticks.template.states.create(stateId);\r\n\t\t\ttickState.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n", "/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { Legend } from \"../Legend\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\t\t\t\t\t\t\tif (!dataItem.legendSettings) {\r\n\t\t\t\t\t\t\t\tdataItem.legendSettings = series.legendSettings;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0p')}\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tlet slice = percentSeriesDataItem.slice;\r\n\r\n\t\t\t\t\tslice.dispatchImmediately(\"over\");\r\n\t\t\t\t\tslice.isHover = true;\r\n\t\t\t\t\tslice.interactions.isRealHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tlet slice = percentSeriesDataItem.slice;\r\n\t\t\t\tslice.dispatchImmediately(\"out\");\r\n\t\t\t\tslice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\r\n", "/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"../series/PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radiusY * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst r = label.pixelRadius(slice.radius);\r\n\r\n\t\t\t\tx1 = x0 + r * slice.ix;\r\n\t\t\t\ty1 = y0 + r * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n", "/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\n//import { Slice3D } from \"../../core/elements/3D/Slice3D\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _startAngleInternal: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _endAngleInternal: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\t//this.startAngle = -90;\r\n\t\t//this.endAngle = 270;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.addDisposer(this.labels.template.events.on(\"enabled\", this.invalidate, this, false));\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/**\r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/**\r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#p')} ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\r\n\t\t\t// The following takes care of removing hover on subsequent click of\r\n\t\t\t// a slice\r\n\t\t\tif (event.target.interactions.lastHitPointer\r\n\t\t\t\t&& event.target.interactions.lastHitPointer.touch\r\n\t\t\t\t&& !event.target.isActive) {\r\n\t\t\t\tevent.target.isHover = false;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels2(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t\tthis.arrangeLabels2(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tif (this.ignoreZeroValues && (dataItem.value == 0 || dataItem.value == null)) {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t}\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = Math.abs(dataItem.values.value.percent) * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tif (!this.labels.template.disabled) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.slice = slice;\r\n\t\t\t\ttick.label = label;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\t\t\t\t\tlabel.dx = 0;\r\n\t\t\t\t\tlabel.dy = 0;\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle > 270 || normalizedMiddleAngle <= 90) {\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t\tlabel.moveTo(point);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet depth = (<any>slice)[\"depth\"];\r\n\t\t\t\t\tif (!$type.isNumber(depth)) {\r\n\t\t\t\t\t\tdepth = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\tlet startAngle = this.getPropertyValue(\"startAngle\");\r\n\t\tif ($type.isNumber(startAngle)) {\r\n\t\t\treturn startAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._startAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\tlet endAngle = this.getPropertyValue(\"endAngle\");\r\n\t\tif ($type.isNumber(endAngle)) {\r\n\t\t\treturn endAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._endAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\r\n\t\tbullet.x = locationY * slice.radius * $math.cos(angle);\r\n\t\tbullet.y = locationY * slice.radiusY * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n", "/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries } from \"../series/PieSeries\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\tprotected _chartPixelRadius:number;\r\n\r\n\tprotected _chartPixelInnerRadius:number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.updateRadius, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\tthis._disposers.push(this.seriesContainer.events.on(\"positionchanged\", ()=>{\r\n\t\t\tthis.bulletsContainer.x = this.seriesContainer.x;\r\n\t\t\tthis.bulletsContainer.y = this.seriesContainer.y;\r\n\t\t}))\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<PieSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tthis._chartPixelRadius = undefined;\r\n\t\tthis.updateSeriesAngles();\r\n\t}\r\n\r\n\tprotected updateSeriesAngles(){\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tseries._startAngleInternal = this.startAngle;\r\n\t\t\tseries._endAngleInternal = this.endAngle;\r\n\t\t\t//series.defaultState.properties.startAngle = this.startAngle;\r\n\t\t\t//series.defaultState.properties.endAngle = this.endAngle;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\r\n\t\tif(chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius){\r\n\t\t\tthis._chartPixelRadius = chartRadius;\r\n\t\t\tthis._chartPixelInnerRadius = chartPixelInnerRadius;\r\n\r\n\t\t\t//@todo: make it possible to set series radius in percent\r\n\t\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\t\tlet i = a[0];\r\n\t\t\t\tlet series = a[1];\r\n\r\n\t\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t\t}\r\n\t\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.pixelRadius = radius;\r\n\t\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t\t});\r\n\r\n\r\n\t\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\t\tthis.seriesContainer.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 80%\r\n\t * @param value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPercentProperty(\"radius\", value, true, false, 10, false)){\r\n\t\t\tthis.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * NOTE: it's not related to `radius`.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.innerRadius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.innerRadius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"innerRadius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"startAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"endAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tconst startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tbullet.y = bullet.pixelY - slice.depth;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n", "/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tif (this.setPropertyValue(\"depth\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tvalue = $math.fitToRange(value, 0, 90);\r\n\t\tif (this.setPropertyValue(\"angle\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n", "/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n", "/**\r\n * FlowDiagramNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, visualProperties, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings, LegendDataItem } from \"../Legend\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sum of all incomming+outgoing link values\r\n\t */\r\n\ttotal?: number;\r\n\r\n\t/**\r\n\t * Sum of all incoming link values\r\n\t */\r\n\ttotalIncoming?: number;\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values\r\n\t */\r\n\ttotalOutgoing?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramNodeAdapters extends IContainerAdapters, IFlowDiagramNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramNode extends Container {\r\n\r\n\t/**\r\n\t * total ajusted taken in mind chart.minNodeSize\r\n\t */\r\n\tpublic adjustedTotal: number;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: FlowDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[FlowDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this node.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramNode\";\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.inert = true;\r\n\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this, false);\r\n\t\tthis.events.on(\"sizechanged\", this.invalidateLinks, this, false);\r\n\t\t//this.events.on(\"hit\", this.handleHit, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleHit(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tif (this.isHidden || this.isHiding) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden node.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t\tdataItem.link.show();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t\tdataItem.link.show();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides node.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t\tdataItem.link.hide();\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t\tdataItem.link.hide();\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif(!this.isDisposed()){\r\n\t\t\tsuper.validate();\r\n\t\t\tthis.invalidateLinks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tthis.outgoingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"fromNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.fromNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.incomingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"toNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.toNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<this[\"_dataItem\"]> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = this._incomingDataItems.iterator();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<FlowDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = this._outgoingDataItems.iterator();\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incoming+outgoing link values\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set total(value: number) {\r\n\t\tthis.setPropertyValue(\"total\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this.getPropertyValue(\"total\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incomming link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalIncoming(value: number) {\r\n\t\tthis.setPropertyValue(\"totalIncoming\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalIncoming(): number {\r\n\t\treturn this.getPropertyValue(\"totalIncoming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalOutgoing(value: number) {\r\n\t\tthis.setPropertyValue(\"totalOutgoing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalOutgoing(): number {\r\n\t\treturn this.getPropertyValue(\"totalOutgoing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setColorProperty(\"color\", value);\r\n\t\tif (this._background) {\r\n\t\t\tthis._background.fill = value;\r\n\t\t}\r\n\t\tthis.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\tcolumn.stroke = this.fill;\r\n\r\n\t\tcolumn.copyFrom(<any>this);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n", "/**\r\n * FlowDiagramLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t */\r\n\tcolorMode?: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\";\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n\r\n\t/**\r\n\t * [maskBullets description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [tooltipLocation description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttooltipLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramLinkAdapters extends IContainerAdapters, IFlowDiagramLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramLink extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tprotected _gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullets: ListTemplate<Bullet>;\r\n\r\n\t/**\r\n\t * Link sprite\r\n\t */\r\n\tpublic link: Sprite;\r\n\r\n\t/**\r\n\t * Bullets mask spite\r\n     */\r\n\tprotected _bulletsMask: Sprite;\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tprotected _bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Line | Polyline;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.maskBullets = false;\r\n\r\n\t\tthis.colorMode = \"fromNode\";\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\t// this is very important, otherwise the container will be shifted\r\n\t\tthis.verticalCenter = \"none\";\r\n\t\tthis.horizontalCenter = \"none\";\r\n\r\n\t\tthis.tooltipText = \"{fromName}→{toName}:{value.value}\";\r\n\t\tthis.tooltipLocation = 0.5;\r\n\r\n\t\tthis.link = this.createChild(Sprite);\r\n\t\tthis.link.shouldClone = false;\r\n\t\tthis.link.setElement(this.paper.add(\"path\"));\r\n\t\tthis.link.isMeasured = false;\r\n\t\tthis.fillOpacity = 0.2;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullets() {\r\n\t\t$iter.each(this.bullets.iterator(), (bullet) => {\r\n\t\t\tbullet.parent = this.bulletsContainer;\r\n\r\n\t\t\tbullet.maxWidth = this.maxWidth;\r\n\t\t\tbullet.maxHeight = this.maxHeight;\r\n\r\n\t\t\tthis.positionBullet(bullet);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tpublic get bulletsContainer() {\r\n\t\tif (!this._bulletsContainer) {\r\n\t\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\t\tbulletsContainer.shouldClone = false;\r\n\t\t\tbulletsContainer.layout = \"none\";\r\n\t\t\tthis._bulletsContainer = bulletsContainer;\r\n\t\t}\r\n\t\treturn this._bulletsContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bullets mask sprite\r\n     */\r\n\tpublic get bulletsMask() {\r\n\t\tif (!this._bulletsMask) {\r\n\t\t\tlet bulletsMask = this.createChild(Sprite);\r\n\t\t\tbulletsMask.shouldClone = false;\r\n\t\t\tbulletsMask.setElement(this.paper.add(\"path\"));\r\n\t\t\tbulletsMask.isMeasured = false;\r\n\t\t\tthis._bulletsMask = bulletsMask;\r\n\t\t}\r\n\t\treturn this._bulletsMask;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets at relative bullet.locationX position on the link.\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet location = bullet.locationX;\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\t\tlet point = this.middleLine.positionToPoint(location);\r\n\r\n\t\tbullet.moveTo(point);\r\n\r\n\t\tlet rotationField = bullet.propertyFields.rotation;\r\n\t\tlet angle: number;\r\n\t\tif (bullet.dataItem) {\r\n\t\t\tlet dataContext: any = bullet.dataItem.dataContext;\r\n\t\t\tangle = dataContext[rotationField];\r\n\t\t}\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = point.angle;\r\n\t\t}\r\n\r\n\t\tbullet.rotation = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t * Some of the links, like ChordLink does not support gradiens well.\r\n\t *\r\n\t * @param value  Fill mode\r\n\t */\r\n\tpublic set colorMode(value: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\") {\r\n\t\tif (value == \"gradient\") {\r\n\t\t\tlet color = this.fill;\r\n\r\n\t\t\tthis.gradient.stops.clear();\r\n\t\t\tif (color instanceof Color) {\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t}\r\n\t\t\tthis.fill = this.gradient;\r\n\t\t\tthis.stroke = this.gradient;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"colorMode\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fill mode\r\n\t */\r\n\tpublic get colorMode(): \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\" {\r\n\t\treturn this.getPropertyValue(\"colorMode\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link bullets be masked or not\r\n\t *\r\n\t * @param value\r\n\t * @default false\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return mask bullets value\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of a tooltip.\r\n\t * @default 0.5\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip location value\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds color steps in the link gradient.\r\n\t *\r\n\t * @param value  Fill option\r\n\t */\r\n\tprotected setFill(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tsuper.setFill(value)\r\n\t\tlet gradient = this._gradient;\r\n\r\n\t\tif (gradient && value instanceof Color) {\r\n\t\t\tgradient.stops.clear();\r\n\t\t\tgradient.addColor(value);\r\n\t\t\tgradient.addColor(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box based on element dimension settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Bullet> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Bullet>(new Bullet());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t\tthis._bullets.events.on(\"inserted\", (event) => {\r\n\t\t\t\tevent.newValue.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"locationX\" || event.property == \"locationY\") {\r\n\t\t\t\t\t\tthis.positionBullet(event.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t}, undefined, false)\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties from another [[FlowDiagramLink]].\r\n\t *\r\n\t * @param source  Source link\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tlet middleLine = this.middleLine;\r\n\t\tif (middleLine) {\r\n\t\t\tif (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\r\n\t\t\tif (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.link.copyFrom(source.link);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tpublic get gradient() {\r\n\t\tif (!this._gradient) {\r\n\t\t\tthis._gradient = new LinearGradient();\r\n\t\t}\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n", "/**\r\n * FlowDiagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FlowDiagramDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FlowDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Source node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set fromName(value: string) {\r\n\t\tthis.setProperty(\"fromName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get fromName(): string {\r\n\t\treturn this.properties.fromName;\r\n\t}\r\n\r\n\t/**\r\n\t * Destination node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set toName(value: string) {\r\n\t\tthis.setProperty(\"toName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get toName(): string {\r\n\t\treturn this.properties.toName;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Node color\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", toColor(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @return color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Link's value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A visual element, representing link between the source and target nodes.\r\n\t *\r\n\t * Link's actual thickness will be determined by `value` of this link and\r\n\t * `value` of the source node.\r\n\t *\r\n\t * @readonly\r\n\t * @return Link element\r\n\t */\r\n\tpublic get link(): this[\"_link\"] {\r\n\t\tif (!this._link) {\r\n\t\t\tlet link = this.component.links.create();\r\n\t\t\tthis._link = link;\r\n\r\n\t\t\tthis.addSprite(link);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.links.removeValue(link);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._link;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramDataFields extends IChartDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Visibility of a node\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[FlowDiagram]]\r\n */\r\nexport interface IFlowDiagramProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t */\r\n\tnodePadding?: number;\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort a\r\n\t */\r\n\tsortBy?: \"none\" | \"name\" | \"value\";\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t */\r\n\tminNodeSize: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramAdapters extends IChartAdapters, IFlowDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagram extends Chart {\r\n\r\n\t/**\r\n\t * A Color Set to use when applying/generating colors for each subsequent\r\n\t * node.\r\n\t */\r\n\tpublic colors: ColorSet = new ColorSet();\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IFlowDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramEvents;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: FlowDiagramNode;\r\n\r\n\r\n\t/**\r\n\t * A list of chart's FlowDiagram nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tprotected _nodes: DictionaryTemplate<string, this[\"_node\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * A list of FlowDiagram links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * A container that holds all of the link elements.\r\n\t */\r\n\tpublic linksContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds all of the node elements.\r\n\t */\r\n\tpublic nodesContainer: Container;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, FlowDiagramNode]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagram\";\r\n\t\tthis.nodePadding = 20;\r\n\t\tthis.sortBy = \"none\";\r\n\t\tthis.sequencedInterpolation = true;\r\n\r\n\t\tthis.colors.step = 2;\r\n\t\tthis.minNodeSize = 0.02;\r\n\r\n\t\tlet linksContainer = this.chartContainer.createChild(Container);\r\n\t\tlinksContainer.shouldClone = false;\r\n\t\tlinksContainer.layout = \"none\";\r\n\t\tlinksContainer.isMeasured = false;\r\n\t\tthis.linksContainer = linksContainer;\r\n\r\n\t\tlet nodesContainer = this.chartContainer.createChild(Container);\r\n\t\tnodesContainer.shouldClone = false;\r\n\t\tnodesContainer.layout = \"none\";\r\n\t\tnodesContainer.isMeasured = false;\r\n\t\tthis.nodesContainer = nodesContainer;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tthis.dataItem.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\tthis.nodes.clear();\r\n\t\t}\r\n\r\n\t\tthis.sortNodes();\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet count = 0;\r\n\t\tlet low: number;\r\n\t\tlet high: number;\r\n\r\n\t\t// build blocks\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet fromName = dataItem.fromName;\r\n\r\n\t\t\tif (fromName) {\r\n\t\t\t\tlet node = this.nodes.getKey(fromName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(fromName);\r\n\t\t\t\t\tnode.name = fromName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.fromNode = node;\r\n\t\t\t\tdataItem.fromNode.outgoingDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t\tlet toName = dataItem.toName;\r\n\t\t\tif (toName) {\r\n\t\t\t\tlet node = this.nodes.getKey(toName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(toName);\r\n\t\t\t\t\tnode.name = toName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.toNode = node;\r\n\t\t\t\tdataItem.toNode.incomingDataItems.push(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\tlet strokeModifier = new LinearGradientModifier();\r\n\t\t\t\tstrokeModifier.opacities = [0, 1];\r\n\t\t\t\tdataItem.link.strokeModifier = strokeModifier;\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\tlet fillModifier = new LinearGradientModifier();\r\n\t\t\t\tfillModifier.opacities = [1, 0];\r\n\t\t\t\tdataItem.link.strokeModifier = fillModifier;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = dataItem.value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tsum += value;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (low > value || !$type.isNumber(low)) {\r\n\t\t\t\t\tlow = value;\r\n\t\t\t\t}\r\n\t\t\t\tif (high < value || !$type.isNumber(high)) {\r\n\t\t\t\t\thigh = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet key = \"value\";\r\n\r\n\t\tthis.dataItem.setCalculatedValue(key, high, \"high\");\r\n\t\tthis.dataItem.setCalculatedValue(key, low, \"low\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n\t\tthis.dataItem.setCalculatedValue(key, count, \"count\");\r\n\r\n\r\n\t\t$iter.each(this.nodes.iterator(), (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\r\n\t\t\tif (node.fill instanceof Color) {\r\n\t\t\t\tnode.color = node.fill;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.color == undefined) {\r\n\t\t\t\tnode.color = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (node.dataItem.color != undefined) {\r\n\t\t\t\tnode.color = node.dataItem.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (!node.dataItem.visible) {\r\n\t\t\t\tnode.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.sortNodes();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n\t */\r\n\tprotected sortNodes() {\r\n\t\tif (this.sortBy == \"name\") {\r\n\t\t\tthis._sorted = this.nodes.sortedIterator();\r\n\t\t}\r\n\t\telse if (this.sortBy == \"value\") {\r\n\t\t\tthis._sorted = $iter.sort(this.nodes.iterator(), (x, y) => $order.reverse($number.order(x[1].total, y[1].total)));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._sorted = this.nodes.iterator();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: FlowDiagramNode) {\r\n\r\n\t\t// todo: totalIncomming totalOutgoing, total\r\n\r\n\t\tlet incomingTotal = 0;\r\n\t\tlet outgoingTotal = 0;\r\n\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tincomingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\toutgoingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnode.total = incomingTotal + outgoingTotal;\r\n\t\tnode.totalIncoming = incomingTotal;\r\n\t\tnode.totalOutgoing = outgoingTotal;\r\n\t};\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Flow diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FlowDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t *\r\n\t * Padding will add extra space around node's name label.\r\n\t *\r\n\t * @param value Padding (px)\r\n\t */\r\n\tpublic set nodePadding(value: number) {\r\n\t\tthis.setPropertyValue(\"nodePadding\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding (px)\r\n\t */\r\n\tpublic get nodePadding(): number {\r\n\t\treturn this.getPropertyValue(\"nodePadding\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n\t * @default \"none\"\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set sortBy(value: \"none\" | \"name\" | \"value\") {\r\n\t\tthis.setPropertyValue(\"sortBy\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Node sorting\r\n\t */\r\n\tpublic get sortBy(): \"none\" | \"name\" | \"value\" {\r\n\t\treturn this.getPropertyValue(\"sortBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t * @default 0.02\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set minNodeSize(value: number) {\r\n\t\tthis.setPropertyValue(\"minNodeSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns min node size\r\n\t */\r\n\tpublic get minNodeSize(): number {\r\n\t\treturn this.getPropertyValue(\"minNodeSize\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of chart's nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tpublic get nodes(): DictionaryTemplate<string, this[\"_node\"]> {\r\n\t\tif (!this._nodes) {\r\n\t\t\tlet template = this.createNode();\r\n\t\t\ttemplate.events.on(\"hit\", (event) => {\r\n\t\t\t\tevent.target.handleHit(event);\r\n\t\t\t});\r\n\t\t\tthis._nodes = new DictionaryTemplate<string, this[\"_node\"]>(template);\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new FlowDiagramNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's links.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tpublic get links(): ListTemplate<this[\"_link\"]> {\r\n\t\tif (!this._links) {\r\n\t\t\tthis._links = new ListTemplate<this[\"_link\"]>(this.createLink());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new FlowDiagramLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.nodes.each((key, node) => {\r\n\t\t\t\tlegendData.push(node);\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.nodes.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n", "/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ILabelBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ILabelBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILabelBulletAdapters extends IBulletAdapters, ILabelBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class LabelBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILabelBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILabelBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILabelBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"LabelBullet\";\r\n\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.hideOversized = false;\r\n\r\n\t\tlabel.maxWidth = 500;\r\n\t\tlabel.maxHeight = 500;\r\n\r\n\t\tlabel.stroke = color();\r\n\t\tlabel.strokeOpacity = 0;\r\n\t\tlabel.fill = new InterfaceColorSet().getFor(\"text\");\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", this.handleMaxSize, this, false);\r\n\r\n\t\tthis.label = label;\r\n\r\n\t\t// not good, as lineSeries will have labels somewhere in the middle.\r\n\t\t//this.locationX = 0.5;\r\n\t\t//this.locationY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected handleMaxSize(){\r\n\t\tthis.label.maxWidth = this.maxWidth;\r\n\t\tthis.label.maxHeight = this.maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[LabelBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LabelBullet\"] = LabelBullet;\r\n", "/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IFlowDiagramNodeProperties {\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t */\r\n\tlevel?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IFlowDiagramNodeAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyNodeEvents;\r\n\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[SankeyDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\tnameLabel.shouldClone = false;\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.label.text = \"{name}\";\r\n\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.width = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tnameLabel.label.padding(0, 5, 0, 5);\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.shouldClone = false;\r\n\t\tvalueLabel.label.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.background.hiddenState.copyFrom(hiddenState);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t\t\t\t$utils.used(link.gradient);\r\n\r\n\t\t\t\t\t\t\tlink.fill = dataItem.toNode.color;\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t *\r\n\t * @param bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.measuredWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.measuredHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t *\r\n\t * @param value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n", "/**\r\n * SankeyLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SankeyDiagramDataItem, SankeyDiagram } from \"../types/SankeyDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyLinkAdapters extends IFlowDiagramLinkAdapters, ISankeyLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t */\r\n\tpublic middleLine: Polyspline;\r\n\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyLink\";\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.controlPointDistance = 0.2;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.linkWidth = 0;\r\n\r\n\t\tthis.startX = 0;\r\n\t\tthis.endX = 0;\r\n\r\n\t\tthis.startY = 0;\r\n\t\tthis.endY = 0;\r\n\r\n\t\tthis.middleLine = this.createChild(Polyspline);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected makeBackwards() {\r\n\t\tif (this.states.getKey(\"backwards\") != undefined) {\r\n\t\t\tthis.setState(\"backwards\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet x0 = this.startX\r\n\t\t\tlet y0 = this.startY;\r\n\t\t\tlet x1 = this.endX;\r\n\t\t\tlet y1 = this.endY;\r\n\r\n\t\t\tif (this.states.getKey(\"backwards\")) {\r\n\t\t\t\tthis.setState(\"default\");\r\n\t\t\t}\r\n\r\n\t\t\tif (this.dataItem) {\r\n\t\t\t\tlet chart = this.dataItem.component;\r\n\r\n\t\t\t\tif (chart) {\r\n\t\t\t\t\tif (chart.orientation == \"horizontal\") {\r\n\t\t\t\t\t\tif (x1 < x0) {\r\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\r\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\r\n\t\t\t\t\t\t\tthis.makeBackwards();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (y1 < y0) {\r\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\r\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\r\n\t\t\t\t\t\t\tthis.makeBackwards();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(x1)) {\r\n\t\t\t\tx1 = x0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(y1)) {\r\n\t\t\t\ty1 = y0;\r\n\t\t\t}\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet w = this.linkWidth;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tlet xt0 = x0;\r\n\t\t\tlet yt0 = y0;\r\n\r\n\t\t\tlet xt1 = x1;\r\n\t\t\tlet yt1 = y1;\r\n\r\n\t\t\tlet xb0 = x0 + w * $math.sin(startAngle);\r\n\t\t\tlet xb1 = x1 + w * $math.sin(endAngle);\r\n\r\n\t\t\tlet yb0 = y0 + w * $math.cos(startAngle);\r\n\t\t\tlet yb1 = y1 + w * $math.cos(endAngle);\r\n\r\n\t\t\tlet xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n\t\t\tlet xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n\r\n\t\t\tlet ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n\t\t\tlet ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n\r\n\t\t\tthis.zIndex = this.zIndex || this.dataItem.index;\r\n\r\n\t\t\tlet tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n\t\t\tlet tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n\r\n\t\t\tthis.middleLine.tensionX = tensionX;\r\n\t\t\tthis.middleLine.tensionY = tensionY;\r\n\r\n\t\t\tif ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n\r\n\t\t\t\t// solves issues with gradient fill of straight lines\r\n\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n\t\t\t\t\txt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n\t\t\t\t\tyt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n\t\t\t\t\txb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n\t\t\t\t\tyb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minX = Math.min(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet minY = Math.min(yb0, yb1, yt0, yt1);\r\n\t\t\t\tlet maxX = Math.max(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet maxY = Math.max(yb0, yb1, yt0, yt1);\r\n\r\n\t\t\t\tthis._bbox = {\r\n\t\t\t\t\tx: minX,\r\n\t\t\t\t\ty: minY,\r\n\t\t\t\t\twidth: maxX - minX,\r\n\t\t\t\t\theight: maxY - minY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet cpd = this.controlPointDistance;\r\n\r\n\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n\r\n\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tif (ym1 == ym0) {\r\n\t\t\t\t\tym1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n\r\n\t\t\t\tkxt0 += dx / 2;\r\n\t\t\t\tkyt0 += dy / 2;\r\n\r\n\t\t\t\tkxt1 += dx / 2;\r\n\t\t\t\tkyt1 += dy / 2;\r\n\r\n\t\t\t\tpath += $path.moveTo({ x: xt0, y: yt0 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n\t\t\t\tpath += $path.lineTo({ x: xb1, y: yb1 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.link.path = path;\r\n\r\n\t\t\tif (this.maskBullets) {\r\n\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t}\r\n\t\t\tthis.positionBullets();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start X\r\n\t */\r\n\tpublic set startX(value: number) {\r\n\t\tthis.setPropertyValue(\"startX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start X\r\n\t */\r\n\tpublic get startX(): number {\r\n\t\treturn this.getPropertyValue(\"startX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End X\r\n\t */\r\n\tpublic set endX(value: number) {\r\n\t\tthis.setPropertyValue(\"endX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End X\r\n\t */\r\n\tpublic get endX(): number {\r\n\t\treturn this.getPropertyValue(\"endX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start Y\r\n\t */\r\n\tpublic set startY(value: number) {\r\n\t\tthis.setPropertyValue(\"startY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start Y\r\n\t */\r\n\tpublic get startY(): number {\r\n\t\treturn this.getPropertyValue(\"startY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set endY(value: number) {\r\n\t\tthis.setPropertyValue(\"endY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get endY(): number {\r\n\t\treturn this.getPropertyValue(\"endY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set linkWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"linkWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get linkWidth(): number {\r\n\t\treturn this.getPropertyValue(\"linkWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n\t * @default 0.2\r\n\t * @param value\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return relative control point distance\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of a spline, 1 would make the link to have sharp edges\r\n\t * @default 0.8\r\n\t * @param value\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return tension value\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n", "/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\tprotected _level: number;\r\n\r\n\tprotected _counter: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._valueHeight = undefined;\t\t\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = undefined;\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tif ($type.isNumber(link.fromNode.level)) {\r\n\t\t\t\t\tlevels.push(link.fromNode.level + 1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._counter = 0;\r\n\t\t\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t\t\t\tif (this._counter < this.dataItems.length) {\r\n\t\t\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's no loop in the ancestor chain.\r\n\t * \r\n\t * @param  node  Node\r\n\t */\r\n\tprotected checkLoop(node: this[\"_node\"]): void {\r\n\t\tthis._counter++;\r\n\r\n\t\tif (this._counter > this.dataItems.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t})\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\t\tlet minHeight: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\r\n\t\t\tlet levelNodeCount = this._levelNodesCount[key];\r\n\t\t\tlet valueHeight = (availableHeight - (levelNodeCount - 1) * this.nodePadding) / realValue;\r\n\r\n\t\t\tif (valueHeight == Infinity) {\r\n\t\t\t\tvalueHeight = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (minHeight > valueHeight || !$type.isNumber(minHeight)) {\r\n\t\t\t\tminHeight = valueHeight;\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (valueHeight == Infinity) {\r\n\t\t\tvalueHeight = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.maxSum == 0) {\r\n\t\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight - nodeCount * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"middle\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight / 2 - nodeCount / 2 * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && h == 0) {\r\n\t\t\t\t\th = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && w == 0) {\r\n\t\t\t\t\tw = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.preventShow) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n", "/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tlet label = this.createChild(AxisLabelCircular);\r\n\t\tlabel.location = 0.5;\r\n\t\tlabel.radius = 5;\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.zIndex = 1;\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.fixPosition(labelAngle, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n", "/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n", "/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n", "/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n", "/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realX: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realY: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\t//this.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.events.disableType(\"transformed\"); // not to bug parent\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", this.handleKidAdded, this, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleKidAdded() {\r\n\t\tif (this.layout == \"none\") {\r\n\t\t\tthis.layout = \"absolute\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.isMeasured = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet column = this.column;\r\n\t\tif (column) {\r\n\t\t\tcolumn.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tcolumn.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t\tif(column.invalid){\r\n\t\t\t\tcolumn.validate(); // important!\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Column]].\r\n\t *\r\n\t * @param source Source Column\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tif (this.column) {\r\n\t\t\treturn { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n", "/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesDataItemAdapters extends IDataItemAdapters {\r\n\twidth: number | Percent;\r\n\theight: number | Percent;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesDataItemAdapters;\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic set width(value: number | Percent) {\r\n\t\tif (this.properties.width != value) {\r\n\t\t\tthis.properties.width = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get width(): number | Percent {\r\n\t\tlet width = this.properties.width;\r\n\t\tif (this._adapterO) {\r\n\t\t\twidth = this._adapterO.apply(\"width\", width);\r\n\t\t}\r\n\t\treturn width;\r\n\t}\r\n\r\n\r\n\tpublic set height(value: number | Percent) {\r\n\t\tif (this.properties.height != value) {\r\n\t\t\tthis.properties.height = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get height(): number | Percent {\r\n\t\tlet height = this.properties.height;\r\n\t\tif (this._adapterO) {\r\n\t\t\theight = this._adapterO.apply(\"height\", height);\r\n\t\t}\r\n\t\treturn height;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields {\r\n\twidth?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\r\n\t\tthis.group.node.removeAttribute(\"fill\");\r\n\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tlet baseAxisSeries = this.chart.series;\r\n\t\t\tlet clusterCount: number = 0;\r\n\t\t\tlet index: number = 0;\r\n\r\n\t\t\tlet sortedByAxis: { series: XYSeries, axis: number }[] = [];\r\n\t\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\t\tlet index: number;\r\n\t\t\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\t\t\tindex = this.chart.yAxes.indexOf(series.yAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tindex = this.chart.xAxes.indexOf(series.xAxis);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tsortedByAxis.push({ series: series, axis: index })\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tsortedByAxis.sort((a, b) => a.axis - b.axis);\r\n\t\t\tlet prevAxisIndex: number;\r\n\r\n\t\t\t$array.each(sortedByAxis, (sortedItem) => {\r\n\t\t\t\tlet series = sortedItem.series;\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || (prevAxisIndex != sortedItem.axis && series.clustered)) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tprevAxisIndex = sortedItem.axis;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.clustered) {\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tclusterCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (xAxis instanceof CategoryAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\tif (xAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(xAxis, \"valueY\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof CategoryAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\tif (yAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(yAxis, \"valueX\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tthis._propertiesChanged = false;\r\n\t}\r\n\r\n\tprotected sortCategoryAxis(axis: CategoryAxis, key: string) {\r\n\t\tthis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn (<any>y).values[key].workingValue - (<any>x).values[key].workingValue;\r\n\t\t})\r\n\t\tlet i = 0;\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tdataItem._index = i;\r\n\t\t\ti++;\r\n\t\t})\r\n\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tlet axis = dataItem.component;\r\n\t\t\tlet currentPosition = axis.categoryToPosition(dataItem.category) - dataItem.deltaPosition;\r\n\r\n\t\t\tlet seriesDataItem = axis.getSeriesDataItemByCategory(dataItem.category, this);\r\n\r\n\t\t\tif (seriesDataItem) {\r\n\t\t\t\tlet index = this.dataItems.indexOf(<ColumnSeriesDataItem>seriesDataItem);\r\n\r\n\t\t\t\tdataItem._index = index;\r\n\r\n\t\t\t\tlet deltaPosition = $math.round((index + 0.5) / this.dataItems.length - currentPosition, 3);\r\n\r\n\t\t\t\tif (dataItem.deltaAnimation && !dataItem.deltaAnimation.isDisposed() && dataItem.deltaAnimation.animationOptions[0].to == deltaPosition) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse if (deltaPosition != $math.round(dataItem.deltaPosition, 3)) {\r\n\t\t\t\t\tif (dataItem.deltaAnimation) {\r\n\t\t\t\t\t\tdataItem.deltaAnimation.stop();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.deltaAnimation = dataItem.animate({ property: \"deltaPosition\", from: -deltaPosition, to: 0 }, axis.interpolationDuration, axis.interpolationEasing);\r\n\t\t\t\t\tthis._disposers.push(dataItem.deltaAnimation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\taxis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn x.index - y.index;\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tthis.validateDataElementReal(dataItem);\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\t/*\r\n   public handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t   if (this.simplifiedProcessing) {\r\n\t\t   this.validateDataElement(dataItem);\r\n\t   }\r\n\t   else {\r\n\t\t   super.handleDataItemWorkingValueChange(dataItem, name);\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\tlet diw = dataItem.width;\r\n\t\tif ($type.hasValue(diw)) {\r\n\t\t\tif ($type.isNumber(diw)) {\r\n\t\t\t\tpixelWidth = diw;\r\n\t\t\t}\r\n\t\t\tif (diw instanceof Percent) {\r\n\t\t\t\tpercentWidth = diw.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet dih = dataItem.height;\r\n\t\tif ($type.hasValue(dih)) {\r\n\t\t\tif ($type.isNumber(dih)) {\r\n\t\t\t\tpixelHeight = dih;\r\n\t\t\t}\r\n\t\t\tif (dih instanceof Percent) {\r\n\t\t\t\tpercentHeight = dih.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.yAxis.axisLength);\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.xAxis.axisLength);\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t\tcolumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tif (!$type.hasValue(this.role)) {\r\n\t\t\t\t\t\tthis.role = \"menu\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.hasValue(column.role)) {\r\n\t\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!$type.hasValue(this.role)) {\r\n\t\t\t\t\t\tthis.role = \"list\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.hasValue(column.role)) {\r\n\t\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\t\tcolumn.virtualParent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t\tif (this._propertiesChanged) {\r\n\t\t\t\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t\t$array.each(visualProperties, (property) => {\r\n\t\t\t\t\t\t(<any>column)[property] = column[property];\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\t\tif (this._dropFromOpenState || this._dropFromPreviousState || this._riseFromOpenState || this._riseFromPreviousState) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet open: number;\r\n\t\t\t\tlet value: number;\r\n\t\t\t\tlet change: number;\r\n\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value < open) {\r\n\t\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (change < 0) {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet bulletLocationX = bullet.locationX;\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet bulletLocationY = bullet.locationY;\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationX?: number) {\r\n\t\t//if (this.baseAxis == this.xAxis) {\r\n\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationX = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._endLocation - (this._endLocation - this._startLocation) * (1 - bulletLocationX);\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedXLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationY?: number) {\r\n\t\t//if (this.baseAxis == this.yAxis) {\r\n\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationY = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedYLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n", "/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\treturn treeMapDataItem.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.hide(duration);\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.show(duration, delay, fields);\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tif(this.preventShow){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t\tdataItem.show(duration);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t\tdataItem.hide(duration);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\t\t\r\n\t\treturn 0;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\treturn 1;\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tsuper.disableUnusedColumns(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.__disabled = false;\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n", "/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {workingValue:0};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\t/**\r\n\t * Percent value of a node\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * For the legend to work properly\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", 0);\r\n\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.hide(duration, delay, toValue, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.hide();\r\n\t\t\t\tvalue.preventShow = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", this.values.value.value);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.show(duration, delay, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.preventShow = false;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t */\r\n\thideParentColumns?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis._usesData = true;\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.hideParentColumns = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\ttemplate.virtualParent = this;\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (!dataItem.isDisposed()) {\r\n\t\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.currentlyZoomed = undefined;\r\n\t\tthis.xAxis.start = 0;\r\n\t\tthis.xAxis.end = 1;\r\n\t\tthis.yAxis.start = 0;\r\n\t\tthis.yAxis.end = 1;\r\n\t\tsuper.setData(value);\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\tbullet.show();\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tif (this.hideParentColumns) {\r\n\t\t\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.level == this.currentLevel) {\r\n\t\t\t\t\tif (this.maxLevels > 1) {\r\n\t\t\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\tif (dataItem.treeMapDataItem.children) {\r\n\t\t\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\t\t\tbullet.hide();\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem?: TreeMapDataItem): void {\r\n\t\tif (!dataItem) {\r\n\t\t\tdataItem = this._homeDataItem;\r\n\t\t}\r\n\r\n\t\tlet zoomOutButton = this.zoomOutButton;\r\n\t\t// this is needed because if there is only one fist level, it won't be shown\r\n\t\tif (zoomOutButton) {\r\n\t\t\tif (dataItem != this._homeDataItem) {\r\n\t\t\t\tzoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tzoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t * @param  value  Hide?\r\n\t */\r\n\tpublic set hideParentColumns(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideParentColumns\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide?\r\n\t */\r\n\tpublic get hideParentColumns(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideParentColumns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tif(n > 0){\r\n\t\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\t\t}\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) {\r\n\t\t\t\t\tk = mid + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thi = mid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n\t\t\t\t--k;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif(value == 0){\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\t\t\t\t\r\n\t\t\t\treturn;\r\n\t\t\t}\t\t\t\t\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet node;\r\n\t\tlet i = -1;\r\n\t\tlet n = nodes.length;\r\n\t\tlet k = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tnode.x1 = x1;\r\n\t\t\tnode.y0 = y0;\r\n\t\t\ty0 += node.value * k;\r\n\t\t\tnode.y1 = y0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.y0 = y0;\r\n\t\t\tnode.y1 = y1;\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tx0 += node.value * k;\r\n\t\t\tnode.x1 = x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tif (parent.level & 1) {\r\n\t\t\tthis.slice(parent);\r\n\t\t} else {\r\n\t\t\tthis.dice(parent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0;\r\n\t\t\tdy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo {\r\n\t\t\t\tsumValue = nodes.getIndex(i1++).value;\r\n\t\t\t} while (!sumValue && i1 < n);\r\n\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue;\r\n\t\t\ti0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2() {\r\n\t\t// void\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLegendLevel(dataItem: TreeMapDataItem): TreeMapDataItem {\r\n\t\tif (!dataItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!dataItem.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dataItem.children.length > 1) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse if (dataItem.children.length == 1) {\r\n\t\t\tlet child = dataItem.children.getIndex(0);\r\n\t\t\tif (child.children) {\r\n\t\t\t\treturn this.getLegendLevel(child);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series:TreeMapSeries){\r\n\t\t// void\r\n\t}\t\r\n\r\n\t/**\r\n\t * A data item associated with top node.\r\n\t * \r\n\t * @since 4.8.2\r\n\t */\r\n\tpublic get homeDataItem(): TreeMapDataItem {\r\n\t\treturn this._homeDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlet legendParent = this.getLegendLevel(this._homeDataItem);\r\n\r\n\t\t\tif (legendParent) {\r\n\t\t\t\tlet legendData: Array<this[\"_dataItem\"]> = [];\r\n\r\n\t\t\t\tlegendParent.children.each((dataItem) => {\r\n\t\t\t\t\t//if (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(dataItem);\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlegend.data = legendData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif ($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n", "/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D || 0;\r\n\t\tlet dy = this.chart.dy3D || 0;\r\n\t\tthis.baseGrid.path =  $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n", "/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w + dx, y: dy });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t\tif(this.column3D.invalid){\r\n\t\t\t\tthis.column3D.validate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Column3D]].\r\n\t *\r\n\t * @param source Source Column3D\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\t\tthis.column.fill = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n", "/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && chart.columnsContainer && chart.leftAxesContainer.layout != \"vertical\" && chart.rightAxesContainer.layout != \"vertical\" && chart.bottomAxesContainer.layout != \"horizontal\" && chart.topAxesContainer.layout != \"horizontal\") {\r\n\t\t\treturn chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif (dataItem.column) {\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\r\n\t\t\tdataItem.column.visible = this.visible;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n", "/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tsuper.updateSeriesMasks();\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tlet columnsContainer = this.columnsContainer;\r\n\t\t\tlet mask = columnsContainer.mask;\r\n\t\t\tcolumnsContainer.mask = undefined;\r\n\t\t\tcolumnsContainer.mask = mask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.paddingTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count);\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tif (series.columnsContainer == this.columnsContainer) {\r\n\t\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tlet column = dataItem.column;\r\n\t\t\t\t\tif (column) {\r\n\t\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * (1000 - i) + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t\tif (inversed) {\r\n\t\t\t\t\ts--;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n", "/**\r\n * HeatLegend module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[HeatLegend]].\r\n */\r\nexport interface IHeatLegendProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum color\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tminColor?: Color;\r\n\r\n\t/**\r\n\t * Minimum value\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tminValue?: number;\r\n\r\n\t/**\r\n\t * Maximum value\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaxValue?: number;\r\n\r\n\r\n\t/**\r\n\t * Maximum color\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaxColor?: Color;\r\n\r\n\t/**\r\n\t * Number of markers (steps)\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmarkerCount?: number;\r\n\r\n\r\n\t/**\r\n\t * Orientation\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\torientation?: \"horizontal\" | \"vertical\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[HeatLegend]].\r\n */\r\nexport interface IHeatLegendEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[HeatLegend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IHeatLegendAdapters extends IContainerAdapters, IHeatLegendProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link IHeatLegendEvents} for a list of available events\r\n * @see {@link IHeatLegendAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class HeatLegend extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IHeatLegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IHeatLegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IHeatLegendEvents;\r\n\r\n\t/**\r\n\t * List of heat legend markers (color step rectangles).\r\n\t */\r\n\tpublic markers: ListTemplate<RoundedRectangle>;\r\n\r\n\t/**\r\n\t * Container which holds markers\r\n\t */\r\n\tpublic markerContainer: Container;\r\n\r\n\t/**\r\n\t * Value axis of a heat legend\r\n\t * @ignore\r\n\t */\r\n\tprotected _valueAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * Series of a heat legend\r\n\t * @ignore\r\n\t */\r\n\tprotected _series: Series;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"HeatLegend\";\r\n\r\n\t\tthis.markerContainer = this.createChild(Container);\r\n\t\tthis.markerContainer.shouldClone = false;\r\n\r\n\t\tthis.markerCount = 1;\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: RoundedRectangle = new RoundedRectangle();\r\n\t\tmarker.minHeight = 20;\r\n\t\tmarker.minWidth = 20;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.fillOpacity = 1;\r\n\t\tmarker.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tthis.markerContainer.minHeight = 20;\r\n\t\tthis.markerContainer.minWidth = 20;\r\n\r\n\t\tthis.orientation = \"horizontal\";\r\n\r\n\t\tthis.markers = new ListTemplate<RoundedRectangle>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\tprotected getMinFromRules(property: string, ) {\r\n\t\tlet series = this.series;\r\n\t\tif (series) {\r\n\t\t\tlet minValue;\r\n\t\t\t$iter.eachContinue(series.heatRules.iterator(), (heatRule) => {\r\n\t\t\t\tif (heatRule.property == property) {\r\n\t\t\t\t\tminValue = heatRule.min;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t})\r\n\t\t\treturn minValue;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getMaxFromRules(property: string, ) {\r\n\t\tlet series = this.series;\r\n\t\tif (series) {\r\n\t\t\tlet maxValue;\r\n\t\t\t$iter.each(series.heatRules.iterator(), (heatRule) => {\r\n\t\t\t\tif (heatRule.property == property) {\r\n\t\t\t\t\tmaxValue = heatRule.max;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\treturn maxValue;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.valueAxis.renderer.inversed = this.reverseOrder;\r\n\r\n\t\tlet series = this.series;\r\n\r\n\t\tlet minColor = this.minColor;\r\n\t\tlet maxColor = this.maxColor;\r\n\r\n\t\tif (!$type.hasValue(minColor)) {\r\n\t\t\tminColor = toColor(this.getMinFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(maxColor)) {\r\n\t\t\tmaxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tif (series) {\r\n\t\t\tlet seriesFill = series.fill;\r\n\t\t\tif (!$type.hasValue(minColor) && seriesFill instanceof Color) {\r\n\t\t\t\tminColor = seriesFill;\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(maxColor) && seriesFill instanceof Color) {\r\n\t\t\t\tmaxColor = seriesFill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(maxColor)) {\r\n\t\t\tmaxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tlet minOpacity = $type.toNumber(this.getMinFromRules(\"fillOpacity\"));\r\n\t\tif (!$type.isNumber(minOpacity)) {\r\n\t\t\tminOpacity = 1;\r\n\t\t}\r\n\t\tlet maxOpacity = $type.toNumber(this.getMaxFromRules(\"fillOpacity\"));\r\n\t\tif (!$type.isNumber(maxOpacity)) {\r\n\t\t\tmaxOpacity = 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet minStrokeOpacity = $type.toNumber(this.getMinFromRules(\"strokeOpacity\"));\r\n\t\tif (!$type.isNumber(minStrokeOpacity)) {\r\n\t\t\tminStrokeOpacity = 1;\r\n\t\t}\r\n\t\tlet maxStrokeOpacity = $type.toNumber(this.getMaxFromRules(\"strokeOpacity\"));\r\n\t\tif (!$type.isNumber(maxStrokeOpacity)) {\r\n\t\t\tmaxStrokeOpacity = 1;\r\n\t\t}\r\n\r\n\t\tlet minStroke = toColor(this.getMinFromRules(\"stroke\"));\r\n\t\tlet maxStroke = toColor(this.getMaxFromRules(\"stroke\"));\r\n\r\n\r\n\t\t//if (series) {\r\n\t\tfor (let i = 0; i < this.markerCount; i++) {\r\n\t\t\tlet marker = this.markers.getIndex(i);\r\n\r\n\t\t\tif (!marker) {\r\n\t\t\t\tmarker = this.markers.create();\r\n\t\t\t\tmarker.parent = this.markerContainer;\r\n\t\t\t\tmarker.height = percent(100);\r\n\t\t\t\tmarker.width = percent(100);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (this.markerCount == 1) {\r\n\t\t\t\tlet gradient = new LinearGradient();\r\n\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\tgradient.addColor(maxColor, maxOpacity);\r\n\t\t\t\t\tgradient.addColor(minColor, minOpacity);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tgradient.addColor(minColor, minOpacity);\r\n\t\t\t\t\tgradient.addColor(maxColor, maxOpacity);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tgradient.rotation = -90;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmarker.fill = gradient;\r\n\t\t\t\tif ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n\t\t\t\t\tlet strokeGradient = new LinearGradient();\r\n\t\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\t\tstrokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n\t\t\t\t\t\tstrokeGradient.addColor(minStroke, minStrokeOpacity);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstrokeGradient.addColor(minStroke, minStrokeOpacity);\r\n\t\t\t\t\t\tstrokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\tstrokeGradient.rotation = -90;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmarker.stroke = strokeGradient;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet c = i;\r\n\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\tc = this.markerCount - i - 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet color = new Color($colors.interpolate(minColor.rgb, maxColor.rgb, c / this.markerCount));\r\n\t\t\t\tmarker.fill = color;\r\n\r\n\t\t\t\tlet opacity = minOpacity + (maxOpacity - minOpacity) * c / this.markerCount;\r\n\t\t\t\tmarker.fillOpacity = opacity;\r\n\r\n\t\t\t\tif ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n\t\t\t\t\tlet color = new Color($colors.interpolate(minStroke.rgb, maxStroke.rgb, c / this.markerCount));\r\n\t\t\t\t\tmarker.stroke = color;\r\n\r\n\t\t\t\t\tlet opacity = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * c / this.markerCount;\r\n\t\t\t\t\tmarker.strokeOpacity = opacity;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet renderer = this.valueAxis.renderer;\r\n\t\tif (this.markerCount > 1) {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\trenderer.minGridDistance = this.measuredWidth / this.markerCount;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trenderer.minGridDistance = this.measuredHeight / this.markerCount;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.valueAxis.invalidate();\r\n\r\n\t\tfor (let i = this.markerCount, len = this.markers.length; i < len; i++) {\r\n\t\t\tthis.markers.getIndex(i).parent = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.\r\n\t *\r\n\t * @param {Color}\r\n\t */\r\n\tpublic set minColor(value: Color) {\r\n\r\n\t\tif (!(value instanceof Color)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setColorProperty(\"minColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns minColor value\r\n\t * @return {Color}\r\n\t */\r\n\tpublic get minColor(): Color {\r\n\t\treturn this.getPropertyValue(\"minColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.\r\n\t *\r\n\t * @param {Color}\r\n\t */\r\n\tpublic set maxColor(value: Color) {\r\n\r\n\t\tif (!(value instanceof Color)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setColorProperty(\"maxColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maxColor value\r\n\t * @return {Color}\r\n\t */\r\n\tpublic get maxColor(): Color {\r\n\t\treturn this.getPropertyValue(\"maxColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set markerCount(value: number) {\r\n\t\tthis.setPropertyValue(\"markerCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns number of color squares (markers).\r\n\t * @return {number}\r\n\t */\r\n\tpublic get markerCount(): number {\r\n\t\treturn this.getPropertyValue(\"markerCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set minValue(value: number) {\r\n\t\tthis.setPropertyValue(\"minValue\", value);\r\n\t\tthis.valueAxis.min = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns minimum value of heat legend.\r\n\t * @return {number}\r\n\t */\r\n\tpublic get minValue(): number {\r\n\t\treturn this.getPropertyValue(\"minValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxValue(value: number) {\r\n\t\tthis.setPropertyValue(\"maxValue\", value);\r\n\t\tthis.valueAxis.max = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maximum value of heat legend.\r\n\t * @return {number}\r\n\t */\r\n\tpublic get maxValue(): number {\r\n\t\treturn this.getPropertyValue(\"maxValue\");\r\n\t}\r\n\r\n\t/**\r\n\t* Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.\r\n\t*\r\n\t* @param {\"horizontal\" | \"vertical\"}\r\n\t*/\r\n\tpublic set orientation(value: \"horizontal\" | \"vertical\") {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet markerContainer = this.markerContainer;\r\n\t\tlet valueAxis = this.valueAxis;\r\n\r\n\t\t// HORIZONTAL\r\n\t\tif (value == \"horizontal\") {\r\n\t\t\tif (!$type.hasValue(this.width)) {\r\n\t\t\t\tthis.width = 200;\r\n\t\t\t}\r\n\t\t\tthis.height = undefined;\r\n\r\n\t\t\tvalueAxis.width = percent(100);\r\n\t\t\tvalueAxis.height = undefined;\r\n\t\t\tvalueAxis.tooltip.pointerOrientation = \"vertical\";\r\n\r\n\t\t\tthis.layout = \"vertical\";\r\n\t\t\tmarkerContainer.width = percent(100);\r\n\t\t\tmarkerContainer.height = undefined;\r\n\t\t\tif (!(valueAxis.renderer instanceof AxisRendererX)) {\r\n\t\t\t\tvalueAxis.renderer = new AxisRendererX();\r\n\t\t\t}\r\n\t\t}\r\n\t\t// VERTICAL\r\n\t\telse {\r\n\t\t\tif (!$type.hasValue(this.height)) {\r\n\t\t\t\tthis.height = 200;\r\n\t\t\t}\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.layout = \"horizontal\";\r\n\t\t\tmarkerContainer.width = undefined;\r\n\t\t\tmarkerContainer.height = percent(100);\r\n\t\t\tvalueAxis.height = percent(100);\r\n\t\t\tvalueAxis.width = undefined;\r\n\t\t\tvalueAxis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\t\tif (!(valueAxis.renderer instanceof AxisRendererY)) {\r\n\t\t\t\tvalueAxis.renderer = new AxisRendererY();\r\n\t\t\t}\r\n\t\t\tvalueAxis.renderer.inside = true;\r\n\t\t\tvalueAxis.renderer.labels.template.inside = true;\r\n\r\n\t\t\tthis.markerContainer.reverseOrder = true;\r\n\t\t}\r\n\r\n\t\tlet renderer = valueAxis.renderer;\r\n\t\trenderer.grid.template.disabled = true;\r\n\t\trenderer.axisFills.template.disabled = true;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t\trenderer.labels.template.padding(2, 3, 2, 3);\r\n\r\n\t\trenderer.minHeight = undefined;\r\n\t\trenderer.minWidth = undefined;\r\n\r\n\t\tthis.markerContainer.layout = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns orientation value.\r\n\t *\r\n\t * @return {\"horizontal\" | \"vertical\"}\r\n\t */\r\n\tpublic get orientation(): \"horizontal\" | \"vertical\" {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a value axis of heat legend. Value axis for heat legend is created automatically.\r\n\t * @param {ValueAxis}\r\n\t */\r\n\tpublic set valueAxis(valueAxis: ValueAxis) {\r\n\r\n\t\tthis._valueAxis = valueAxis;\r\n\r\n\t\tvalueAxis.parent = this;\r\n\t\tvalueAxis.strictMinMax = true;\r\n\t\tthis.orientation = this.orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns valueAxis value.\r\n\t * @return {ValueAxis}\r\n\t */\r\n\tpublic get valueAxis(): ValueAxis {\r\n\t\tif (!this._valueAxis) {\r\n\t\t\tthis.valueAxis = this.createChild(ValueAxis);\r\n\t\t\tthis.valueAxis.shouldClone = false;\r\n\t\t}\r\n\t\treturn this._valueAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.\r\n\t * @param series\r\n\t */\r\n\tset series(series: Series) {\r\n\t\tthis._series = series;\r\n\r\n\t\tlet dataField = \"value\";\r\n\r\n\t\ttry {\r\n\t\t\tlet dataFieldDefined = series.heatRules.getIndex(0).dataField;\r\n\t\t\tif (dataFieldDefined) {\r\n\t\t\t\tdataField = dataFieldDefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err) {\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n\r\n\t\tseries.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\tthis.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n\t\t}, undefined, false);\r\n\r\n\t\tseries.heatRules.events.on(\"inserted\", this.invalidate, this, false);\r\n\t\tseries.heatRules.events.on(\"removed\", this.invalidate, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns series value.\r\n\t * @return {Series}\r\n\t */\r\n\tget series(): Series {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates min/max of value axis.\r\n\t * @ignore\r\n\t */\r\n\tprotected updateMinMax(min: number, max: number) {\r\n\t\tlet valueAxis = this.valueAxis;\r\n\t\tif (!$type.isNumber(this.minValue)) {\r\n\t\t\tvalueAxis.min = min;\r\n\t\t\tvalueAxis.invalidate();\r\n\t\t}\r\n\t\tif (!$type.isNumber(this.maxValue)) {\r\n\t\t\tvalueAxis.max = max;\r\n\t\t\tvalueAxis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isString(config.series)) {\r\n\t\t\t\tif ($type.isString(config.series)) {\r\n\t\t\t\t\tif (this.map.hasKey(config.series)) {\r\n\t\t\t\t\t\tconfig.series = this.map.getKey(config.series);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet seriesId = config.series;\r\n\t\t\t\t\t\tconst disposer = this.map.events.on(\"insertKey\", function(ev) {\r\n\t\t\t\t\t\t\tif (ev.key == seriesId) {\r\n\t\t\t\t\t\t\t\tthis.series = ev.newValue;\r\n\t\t\t\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\tthis._disposers.push(disposer);\r\n\t\t\t\t\t\tdelete config.series;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"HeatLegend\"] = HeatLegend;\r\n", "/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n", "/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { GroupField, IXYSeriesGroupFields } from \"./XYSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t */\r\n\thighDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines data fields that can be calculated for aggregate values.\r\n * \r\n * @since 4.7.0\r\n */\r\nexport interface ICandlestickSeriesGroupFields extends IXYSeriesGroupFields {\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `lowValueX` data field.\r\n\t *\r\n\t * @default \"low\"\r\n\t */\r\n\tlowValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `lowValueY` data field.\r\n\t *\r\n\t * @default \"low\"\r\n\t */\r\n\tlowValueY?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `highValueX` data field.\r\n\t *\r\n\t * @default \"high\"\r\n\t */\r\n\thighValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `highValueY` data field.\r\n\t *\r\n\t * @default \"high\"\r\n\t */\r\n\thighValueY?: GroupField;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines type of the group fields.\r\n\t * \r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic _groupFields: ICandlestickSeriesGroupFields;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\t/**\r\n\t * Sets type of the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.groupFields.lowValueX = \"low\";\r\n\t\tthis.groupFields.lowValueY = \"low\";\r\n\r\n\t\tthis.groupFields.highValueX = \"high\";\r\n\t\tthis.groupFields.highValueY = \"high\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]) {\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tlet yAxisFieldName: string = $utils.capitalize(yAxis.axisFieldName);\r\n\t\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t\t}\r\n\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tlet xAxisFieldName: string = $utils.capitalize(xAxis.axisFieldName);\r\n\t\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n", "/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n", "/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.stroke;\r\n\t\tlegendDataItem.colorOrig = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n", "/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\tthis.fillSprite.path = \"\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n", "/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines type for segement.\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocationX:number;\r\n\t\tlet endLocationX:number;\r\n\r\n\t\tlet startLocationY:number;\r\n\t\tlet endLocationY:number;\t\t\r\n\r\n\t\tif(this.baseAxis == this.xAxis){\r\n\t\t\tstartLocationX = this.startLocation;\r\n\t\t\tendLocationX = this.endLocation;\r\n\r\n\t\t\tstartLocationY = this.getAdjustedXLocation(dataItem, this.yOpenField);\r\n\t\t\tendLocationY = this.getAdjustedXLocation(dataItem, this.yField);\r\n\t\t}\r\n\r\n\t\tif(this.baseAxis == this.yAxis){\r\n\t\t\tstartLocationY = this.startLocation;\r\n\t\t\tendLocationY = this.endLocation;\r\n\r\n\t\t\tstartLocationX = this.getAdjustedXLocation(dataItem, this.xOpenField);\r\n\t\t\tendLocationX = this.getAdjustedXLocation(dataItem, this.xField);\t\t\t\r\n\t\t}\r\n\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocationX);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocationY);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocationX);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocationY);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n", "/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t * @ignore\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\treturn this.radarColumn.getTooltipX();\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t * @ignore\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\treturn this.radarColumn.getTooltipY();\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n", "/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.copyProperties(this, radarColumn, visualProperties); // need this \r\n\t\t\t$object.copyProperties(this.columns.template, radarColumn, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tradarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet width = radarColumn.width;\r\n\t\tlet percentWidth = 100;\r\n\r\n\t\tif (width instanceof Percent) {\r\n\t\t\tpercentWidth = width.percent;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, 0, \"valueY\"), y: this.yAxis.getY(dataItem, yField, 0, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, 1, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, 1, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, 0, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, 1, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tif ($type.isNumber(width)) {\t\t\t\t\r\n\t\t\t\tlet abs = Math.abs(tRadius - bRadius);\r\n\t\t\t\tif (abs > width) {\r\n\t\t\t\t\tlet d = (abs - width) / 2;\r\n\t\t\t\t\ttRadius += d;\r\n\t\t\t\t\tbRadius -= d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = rangeColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.paper = this.paper;\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererRadial>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n", "/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Width of the top edge of the slice.\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Width of the bottom edge of the slice.\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\texpandDistance?: number;\r\n\r\n\t/**\r\n\t * Orientation of the slice.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSlice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSliceAdapters extends IContainerAdapters, IFunnelSliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSlice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Am anchor point the slice tick line is pointing to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @readonly\r\n\t */\r\n\tpublic tickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.shouldClone = false;\r\n\t\tthis.slice.setElement(this.paper.add(\"path\"));\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.expandDistance = 0;\r\n\r\n\t\tthis.className = \"FunnelSlice\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tlet ed = this.expandDistance;\r\n\r\n\t\tlet path = \"\";\r\n\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n\t\t\tlet cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(br);\r\n\t\t\tlet qp2 = $path.lineTo(tl);\r\n\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(br, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tl, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n\t\t\tlet cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(bt);\r\n\t\t\tlet qp2 = $path.lineTo(tb);\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(bt, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tb, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n\t\t}\r\n\r\n\t\tthis.slice.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\r\n\tgetPoint(locationX:number, locationY:number):IPoint{\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet mlx = tl.x + (bl.x - tl.x) * locationY;\r\n\t\t\tlet mrx = tr.x + (br.x - tr.x) * locationY;\r\n\r\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet mty = tt.y + (bt.y - tt.y) * locationX;\r\n\t\t\tlet mby = tb.y + (bb.y - tb.y) * locationX;\r\n\r\n\t\t\treturn { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Bottom width\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return bottom width\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Top width\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top width\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set orintation if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to. It's relative to the\r\n\t * height of the slice.\r\n\t *\r\n\t * Zero (default) will mean the sides will be perfectly straight.\r\n\t *\r\n\t * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n\t *\r\n\t * Negative values will make them bend inwards.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set expandDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"expandDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return expandDistance\r\n\t */\r\n\tpublic get expandDistance(): number {\r\n\t\treturn this.getPropertyValue(\"expandDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.slice) {\r\n\t\t\tthis.slice.copyFrom(source.slice);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n", "/**\r\n * Funnel tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelSlice } from \"./FunnelSlice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickProperties extends ITickProperties {\r\n\tlocationX?: number;\r\n\r\n\tlocationY?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelTickAdapters extends ITickAdapters, IFunnelTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nexport class FunnelTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<Label>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<FunnelSlice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelTick\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\r\n\t\tthis.setPropertyValue(\"locationX\", 0);\r\n\t\tthis.setPropertyValue(\"locationY\", 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: FunnelSlice = this.slice;\r\n\t\tlet point = slice.getPoint(this.locationX, this.locationY);\r\n\r\n\t\tif (point) {\r\n\t\t\tlet label = this.label;\r\n\r\n\t\t\tlet series = <FunnelSeries>slice.dataItem.component;\r\n\t\t\tlet p0:IPoint;\r\n\t\t\tlet p1:IPoint;\r\n\t\t\tlet p2:IPoint;\r\n\r\n\t\t\tif (series.orientation == \"vertical\") {\r\n\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tx1 += label.maxRight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp0 = $utils.spritePointToSprite(point, slice, this.parent);\t\t\t\t\r\n\t\t\t\tp2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\t\t\t\tp1 = { x: label.parent.pixelX - this.length, y: p2.y };\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tp1.x = label.parent.measuredWidth + this.length; \r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\ty1 += label.maxBottom;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tp2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\t\t\t\tp1 = { x: p2.x, y: label.parent.pixelY - this.length };\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tp1.y = label.parent.measuredHeight + this.length; \r\n\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1) + $path.lineTo(p2);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [[FunnelSlice]] element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: FunnelSlice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this, false),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return FunnelSlice\r\n\t */\r\n\tpublic get slice(): FunnelSlice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: Label) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tthis.setPropertyValue(\"locationX\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tthis.setPropertyValue(\"locationY\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n", "/**\r\n * Defines Funnel Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SlicedChart } from \"../types/SlicedChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FunnelSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * A reference to a label element.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a tick element.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FunnelSeries;\r\n\r\n\t/**\r\n\t * Defines a type of elements linking slices.\r\n\t */\r\n\tpublic _sliceLink: FunnelSlice;\r\n\r\n\t/**\r\n\t * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get sliceLink(): this[\"_sliceLink\"] {\r\n\t\tif (!this._sliceLink) {\r\n\t\t\tlet sliceLink = this.component.sliceLinks.create();\r\n\t\t\tthis._sliceLink = sliceLink;\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\t\t\tsliceLink.parent = this.component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.sliceLinks.removeValue(sliceLink);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(sliceLink);\r\n\t\t\tsliceLink.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._sliceLink;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelSeriesDataItem\";\r\n\t\t// this helps to invalidate series when value is 0 an it is hidden (no other events are triggered then)\r\n\t\tthis.events.on(\"visibilitychanged\", () => {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesDataFields extends IPercentSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative width of the slice bottom. See description of `bottomRatio`\r\n\t * property for full description.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tbottomRatio?: number;\r\n\r\n\t/**\r\n\t * Orientation of series\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tlabelsOpposite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSeriesAdapters extends IPercentSeriesAdapters, IFunnelSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSeries extends PercentSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: SlicedChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IFunnelSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: FunnelSeriesDataItem;\r\n\r\n\r\n\tprotected _nextY: number = 0;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _sliceLinks: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * Holds sum of values for all slices\r\n\t */\r\n\tprotected _total: number;\r\n\r\n\t/**\r\n\t * Holds number of slices.\r\n\t */\r\n\tprotected _count: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FunnelSeries\";\r\n\t\tthis.orientation = \"vertical\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.slicesContainer.width = percent(100);\r\n\t\tthis.slicesContainer.height = percent(100);\r\n\r\n\t\tthis._disposers.push(this.slicesContainer.events.on(\"maxsizechanged\", this.invalidateDataItems, this, false));\r\n\r\n\t\tthis.labelsOpposite = true;\r\n\r\n\t\tthis.labelsContainer.layout = \"absolute\";\r\n\r\n\t\tthis.bottomRatio = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelSlice]] element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new FunnelSlice();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelTick]] element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new FunnelTick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Funnel Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FunnelSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#p')} ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.expandDistance = 0.2;\r\n\t}\r\n\r\n\t/**\r\n\t * [initLabel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param label [description]\r\n\t */\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tsuper.initLabel(label);\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.isMeasured = true;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextY = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\r\n\t\tlet slicesContainer = this.slicesContainer;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlabelTemplate.interactionsEnabled = true;\r\n\t\t\tslicesContainer.isMeasured = true;\r\n\t\t\tlabelsContainer.isMeasured = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabelTemplate.interactionsEnabled = false;\r\n\t\t\tslicesContainer.isMeasured = false;\r\n\t\t\tlabelsContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\t\tthis.dataItems.each((dItem) => {\r\n\t\t\tif ($type.hasValue(dItem.value)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tif (dItem.value > 0) {\r\n\t\t\t\t\ttotal += Math.abs(dItem.getWorkingValue(\"value\") / dItem.value);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.ignoreZeroValues) {\r\n\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (!dItem.visible || dItem.__disabled || dItem.isHiding) {\r\n\t\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttotal += 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._total = 1 / count * total;\r\n\t\tthis._count = count;\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tthis.arrangeLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\r\n\t\t\tif (!nextItem.visible || nextItem.isHiding || nextItem.__disabled || (nextItem.value == 0 && this.ignoreZeroValues)) {\r\n\t\t\t\treturn this.getNextValue(nextItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [formDataElement description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected formDataElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//if ($type.hasValue(dataItem.value)) {\r\n\t\t// FunnelSlice\r\n\t\tlet slice = dataItem.slice;\r\n\t\tslice.orientation = this.orientation;\r\n\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tsliceLink.orientation = this.orientation;\r\n\r\n\t\tlet tick = dataItem.tick;\r\n\t\tlet label = dataItem.label;\r\n\r\n\t\ttick.slice = slice;\r\n\t\ttick.label = label;\r\n\r\n\t\tif ($type.hasValue(dataItem.value)) {\r\n\t\t\tthis.decorateSlice(dataItem);\r\n\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\tif (dataItem.value == 0 && this.ignoreZeroValues) {\r\n\t\t\t\t\tsprite.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsprite.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (dataItem.index == this.dataItems.length - 1) {\r\n\t\t\tsliceLink.disabled = true;\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tsliceLink.fill = slice.fill;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\t\tlet bottomRatio = this.bottomRatio;\r\n\r\n\t\tlet d = 1;\r\n\t\tif (dataItem.value != 0) {\r\n\t\t\td = workingValue / Math.abs(dataItem.value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (dataItem.__disabled || dataItem.isHiding || !dataItem.visible) {\r\n\t\t\t\td = 0.000001;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.ignoreZeroValues && dataItem.value == 0) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this._nextY == Infinity) {\r\n\t\t\tthis._nextY = 0;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tlet linkHeight = sliceLink.pixelHeight * d;\r\n\r\n\t\t\tmaxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\tslice.height = Math.min(100000, $math.max(0, maxHeight / this._count * d / this._total - linkHeight));\r\n\r\n\t\t\tslice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = slice.x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = undefined;\r\n\t\t\t}\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = slice.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet linkWidth = sliceLink.pixelWidth * d;\r\n\r\n\t\t\tmaxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\tslice.width = Math.min(100000, maxWidth / this._count * d * 1 / this._total - linkWidth);\r\n\t\t\tslice.y = maxHeight / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = slice.y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\r\n\t\t\tsliceLink.y = slice.y;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLastLabel(index: number): Label {\r\n\t\tif (index > 0) {\r\n\t\t\tlet lastLabel = this.labels.getIndex(index);\r\n\t\t\tif (lastLabel.__disabled || !lastLabel.visible) {\r\n\t\t\t\treturn this.getLastLabel(index - 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn lastLabel;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [arrangeLabels description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected arrangeLabels(): void {\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlet count = this.labels.length;\r\n\t\t\tif (count > 1) {\r\n\r\n\t\t\t\tlet lastLabel = this.getLastLabel(count - 1);\r\n\t\t\t\tif (lastLabel) {\r\n\r\n\t\t\t\t\tlet lastY = lastLabel.pixelY;\r\n\t\t\t\t\tlet lastX = lastLabel.pixelX;\r\n\r\n\t\t\t\t\tif (count > 1) {\r\n\t\t\t\t\t\tfor (let i = count - 2; i >= 0; i--) {\r\n\t\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\r\n\t\t\t\t\t\t\tif (label.visible && !label.__disabled) {\r\n\t\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelY + label.measuredHeight > lastY) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.y = Math.min(1000000, lastY - label.measuredHeight);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelX + label.measuredWidth > lastX) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.x = Math.min(1000000, lastX - label.measuredWidth);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlastY = label.pixelY;\r\n\t\t\t\t\t\t\t\tlastX = label.pixelX;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlastY = 0;\r\n\t\t\t\t\t\tlastX = 0;\r\n\t\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\t\t\t\t\t\t\tif (label.visible && !label.__disabled) {\r\n\t\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelY < lastY) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.y = Math.min(1000000, lastY);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelX < lastX) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.x = Math.min(1000000, lastX);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlastY += label.measuredHeight;\r\n\t\t\t\t\t\t\t\tlastX += label.measuredWidth;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: FunnelSlice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tbullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n\t\tbullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\t\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t\t\tthis.invalidate();\r\n\t\t\tif (value == \"vertical\") {\r\n\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\tthis.ticks.template.locationY = 0.5;\r\n\t\t\t\tthis.labels.template.rotation = 0;\r\n\t\t\t\tthis.layout = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.ticks.template.locationX = 0.5;\r\n\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\tthis.labels.template.rotation = -90;\r\n\t\t\t\tthis.layout = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's bottom will change in relation to slices top AND\r\n\t * next slices top.\r\n\t *\r\n\t * Basically it's a relative value (0-1) that indicates bottom width\r\n\t * position between current slice's top width and the top withd of the next\r\n\t * one.\r\n\t *\r\n\t * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n\t * slice with).\r\n\t *\r\n\t * `0` (default) will mean that bottom will be the same as top, resulting in\r\n\t * a prefectly square slice.\r\n\t *\r\n\t * From the data-viz standpoint `0` is a correct setting, since area of the\r\n\t * slices will depict their value correctly.\r\n\t *\r\n\t * `1` will mean that slice will become trapezoid with its bottom matching\r\n\t * width of the next slice.\r\n\t *\r\n\t * `0.5` will make bottom width be in the middle of width of current slice\r\n\t * and the next slice.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set bottomRatio(value: number) {\r\n\t\tif (this.setPropertyValue(\"bottomRatio\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get bottomRatio(): number {\r\n\t\treturn this.getPropertyValue(\"bottomRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of elements linking each actual slice.\r\n\t *\r\n\t * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n\t * so they have all the same configuration options.\r\n\t *\r\n\t * You can use `template` of this link, to specify how links will look.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"FunnelSeries\",\r\n\t *      // ...\r\n\t *      \"sliceLinks\": {\r\n\t *        \"fillOpacity\": 0.5\r\n\t *      }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Funnel links\r\n\t */\r\n\tpublic get sliceLinks(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._sliceLinks) {\r\n\t\t\tlet sliceLink = new FunnelSlice();\r\n\t\t\tsliceLink.applyOnClones = true;\r\n\t\t\tsliceLink.fillOpacity = 0.5;\r\n\t\t\tsliceLink.expandDistance = - 0.3;\r\n\t\t\tsliceLink.hiddenState.properties.opacity = 0;\r\n\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\r\n\t\t\tthis._sliceLinks = new ListTemplate(sliceLink);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._sliceLinks));\r\n\t\t}\r\n\t\treturn this._sliceLinks;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif(!options.animationsEnabled){\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\t\t\r\n\r\n\t\tlet delay: number = 0;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.show(interpolationDuration, delay, [\"value\"]);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[] = [\"value\"];\r\n\t\tlet value: number = 0;\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif(!options.animationsEnabled){\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\t\t\t\t\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t});\r\n\r\n\t\tlet animation: Animation = super.hide(duration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tsuper.setAlignLabels(value);\r\n\t\tthis.ticks.template.disabled = !value;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tif (labelsContainer) {\r\n\t\t\t// do not align\r\n\t\t\tif (!value) {\r\n\t\t\t\tlabelsContainer.width = percent(100);\r\n\t\t\t\tlabelsContainer.height = percent(100);\r\n\t\t\t}\r\n\t\t\t//align\r\n\t\t\telse {\r\n\t\t\t\tlabelsContainer.height = undefined;\r\n\t\t\t\tlabelsContainer.width = undefined;\r\n\t\t\t\tlabelsContainer.margin(10, 10, 10, 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t}\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * This setting is only used if `alignLabels = true`.\r\n\t *\r\n\t * If set to `true` (default) labels will be drawn to the right (on vertical\r\n\t * series), or to the bottom (on horizontal series).\r\n\t *\r\n\t * If set to `false`, labels will be positioned to the left or top\r\n\t * respectively.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.1.13\r\n\t * @param  value  Labels on opposite side?\r\n\t */\r\n\tpublic set labelsOpposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"labelsOpposite\", value)\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tlet labelAlign: Align = \"none\";\r\n\t\tlet labelValign: VerticalAlign = \"none\";\r\n\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlabelAlign = \"center\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelValign = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// opposite (left/bottom)\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.labelsContainer.toFront();\r\n\t\t\t\t// left\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"left\";\r\n\t\t\t\t\tlabelAlign = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\t// bottom\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"right\";\r\n\t\t\t\t\tlabelValign = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// non oposite (right/top)\r\n\t\t\telse {\r\n\t\t\t\tthis.labelsContainer.toBack();\r\n\t\t\t\t// right\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 0;\r\n\t\t\t\t\tlabelAlign = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\t// top\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelValign = \"top\";\r\n\t\t\t\t\tthis.ticks.template.locationY = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlabelTemplate.align = labelAlign;\r\n\t\tlabelTemplate.valign = labelValign;\r\n\r\n\t\tthis.validateLayout();\r\n\t\tthis.ticks.each((tick) => {\r\n\t\t\ttick.invalidate();\r\n\t\t})\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels on opposite side?\r\n\t */\r\n\tpublic get labelsOpposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"labelsOpposite\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n", "/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.value > 0) {\r\n\t\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.absoluteSum;\r\n\r\n\t\tif (sum == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tif (sliceHeight > 0) {\r\n\t\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsliceBottomWidth = sliceTopWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n", "/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t\tthis.align = \"center\";\r\n\t\tthis.valign = \"middle\";\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tlet y: number;\r\n\t\tlet x: number;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tif (this.valign == \"bottom\") {\r\n\t\t\t\ty = (maxHeight - newHeight);\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"middle\") {\r\n\t\t\t\ty = (maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"top\") {\r\n\t\t\t\ty = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.align == \"left\") {\r\n\t\t\t\tx = -(maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"center\") {\r\n\t\t\t\tx = 0;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"right\") {\r\n\t\t\t\tx = (maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tthis.slicesContainer.dx = x;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.valign == \"bottom\") {\r\n\t\t\t\ty = (maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"middle\") {\r\n\t\t\t\ty = 0;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"top\") {\r\n\t\t\t\ty = -(maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.align == \"left\") {\r\n\t\t\t\tx = 0;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"center\") {\r\n\t\t\t\tx = (maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"right\") {\r\n\t\t\t\tx = (maxWidth - newWidth);\r\n\t\t\t}\r\n\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tthis.slicesContainer.dy = y;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.slicesContainer.x = x;\r\n\t\tthis.labelsContainer.x = x;\r\n\t\tthis.ticksContainer.x = x;\r\n\r\n\t\tthis.slicesContainer.y = y;\r\n\t\tthis.labelsContainer.y = y;\r\n\t\tthis.ticksContainer.y = y;\r\n\r\n\t\tif (newWidth > 0 && newHeight > 0) {\r\n\t\t\tthis.slicesContainer.mask = maskSprite;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n", "/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n", "/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\t\t\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.innerWidth / 2 + 1\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.innerHeight / 2 + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n", "/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\th = Math.abs(h);\r\n\t\t\tpoints = [{ x: x, y: h }, { x: x + w, y: h / 2 }, { x: x, y: 0 }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n", "/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines type of the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tcolumn = dataItem.column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n", "/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n", "/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n", "/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n", "/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $dom from \"../../core/utils/DOM\";\r\nimport { system } from \"../../core/System\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties {\r\n\r\n\t/**\r\n\t * Can be used to modify cursor position point dynamically using custom code.\r\n\t *\r\n\t * @since 4.9.35\r\n\t */\r\n\tcursorPoint: IPoint;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * non-modified down point\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * non-modified up point\r\n\t * @ignore\r\n\t */\r\n\tprotected _upPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n\t * make cursor execute all of the actions associated with cursor move,\r\n\t * including line redraws, tooltip updates, etc. Useful when underlying\r\n\t * chart data is dynamically being updated.\r\n\t *\r\n\t * @param point  Point to place cursor at\r\n\t * @param stick  Level of cursor stickiness to the place\r\n\t * @param force  Force cursor move\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\", force?: boolean): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point, force);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y || force) {\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tsystem.requestFrame();\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatch(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatch(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatch(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\tthis.updateSelection();\r\n\t\t}\r\n\t\t/*\r\n\t\telse {\r\n\t\t\t\r\n\t\t\tif(this._generalBehavior == \"select\"){\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}*/\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Initiate blur so that whatever focused element on the page is unselected\r\n\t\t$dom.blur();\r\n\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tthis._downPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * Child classes should override this as necessary.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tif (!this.downPoint || !this.fitsToBounds(this.downPoint)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tthis._upPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n", "/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t */\r\n\tsnapToSeries?: XYSeries | XYSeries[];\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t */\r\n\thideSeriesTooltipsOnSelection?: boolean;\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t */\r\n\tmaxTooltipDistance?: number;\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t */\r\n\tsnapOnPan?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposers: IDisposer[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.snapOnPan = true;\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.visible = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\tthis.hideSeriesTooltipsOnSelection = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\t\t\tlet behavior = this.behavior;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t\tlet snapToSeries = this.snapToSeries;\r\n\t\tif ((snapToSeries && !this.downPoint)) {\r\n\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\tif (snapToSeries.isHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet allHidden = true;\r\n\t\t\t\t$array.each(snapToSeries, (s) => {\r\n\t\t\t\t\tif (!s.isHidden) {\r\n\t\t\t\t\t\tallHidden = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (allHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this._generalBehavior == \"select\") {\r\n\t\t\t\tthis.selection.parent = this.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handle action when cursor is released, which should perform an operation\r\n\t * based on its `behavior`, like zoom.\r\n\t * \r\n\t * @param  point  Release point\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint): void {\r\n\t\tif (this.hasMoved()) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tif (this._generalBehavior != \"pan\") {\r\n\t\t\t\t\tthis.getRanges();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\tthis.selection.hide(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.xRange = undefined;\r\n\t\t\t\tthis.yRange = undefined;\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the cursor has moved enough based on its `behavior`.\r\n\t * \r\n\t * @return Moved?\r\n\t */\r\n\tprivate hasMoved(): boolean {\r\n\t\tlet distance: number;\r\n\t\tif (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\r\n\t\t\tdistance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\r\n\t\t\tdistance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdistance = $math.getDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\treturn distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = startY - currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = 1 - $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * `\"zoomX\"` - zooms horizontally.\r\n\t * * `\"zoomY\"` - zooms vertically.\r\n\t * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n\t * * `\"selectX\"` - selects a range horizontally.\r\n\t * * `\"selectY\"` - selects a range vertically.\r\n\t * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n\t * * `\"panX\"` - moves (pans) current selection horizontally.\r\n\t * * `\"panY\"` - moves (pans) current selection vertically.\r\n\t * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n\t * * `\"none\"` - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n\t * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t * @param  value  hide tooltips?\r\n\t */\r\n\tpublic set hideSeriesTooltipsOnSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return hide tooltip?\r\n\t */\r\n\tpublic get hideSeriesTooltipsOnSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t * @param  value  Distance\r\n\t */\r\n\tpublic set maxTooltipDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"maxTooltipDistance\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance\r\n\t */\r\n\tpublic get maxTooltipDistance(): number {\r\n\t\treturn this.getPropertyValue(\"maxTooltipDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.preventShow = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.preventShow = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\t\tpoint.y = 1;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\t\tpoint.x = 1;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries)) {\r\n\t\t\t\tlet snapTo = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\r\n\t\t\t\tlet snapError = false;\r\n\t\t\t\t$array.each(snapTo, (snap, index) => {\r\n\t\t\t\t\tif ($type.isString(snap)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(snap)) {\r\n\t\t\t\t\t\t\tsnapTo[index] = this.map.getKey(snap);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\r\n\t\t\t\t\t\t\tsnapError = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (snapError) {\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconfig.snapToSeries = snapTo;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t *\r\n\t * @param {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries | XYSeries[]) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\r\n\t\t\tif (series instanceof XYSeries) {\r\n\t\t\t\tseries = [series];\r\n\t\t\t}\r\n\t\t\tif (this._snapToDisposers) {\r\n\t\t\t\t$array.each(this._snapToDisposers, (disposer) => {\r\n\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tthis._snapToDisposers = [];\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\t$array.each(series, (s) => {\r\n\t\t\t\t\tthis._snapToDisposers.push(s.events.on(\"tooltipshownat\", () => { this.handleSnap(s) }, undefined, false));\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries | XYSeries[] {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t * @return Snap on pan?\r\n\t */\r\n\tpublic get snapOnPan(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapOnPan\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param value Snap on pan?\r\n\t */\r\n\tpublic set snapOnPan(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapOnPan\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Snaps the zoom selection after chart is panned.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic handleSnap(series: XYSeries) {\r\n\t\tif (!this.downPoint) {\r\n\t\t\tlet x = series.getTooltipX() + series.xAxis.pixelX;\r\n\t\t\tlet y = series.getTooltipY() + series.yAxis.pixelY;\r\n\r\n\t\t\tlet xAxis = series.xAxis;\r\n\t\t\tlet yAxis = series.yAxis;\r\n\r\n\t\t\tif (xAxis) {\r\n\t\t\t\tif (xAxis.renderer.opposite) {\r\n\t\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = { x: x, y: y };\r\n\t\t\tthis.getPositions();\r\n\r\n\t\t\tlet xx = x;\r\n\t\t\tlet yy = y;\r\n\r\n\t\t\tx -= this.pixelWidth;\r\n\r\n\t\t\tif (yAxis) {\r\n\t\t\t\tif (yAxis.renderer.opposite) {\r\n\t\t\t\t\tx += this.pixelWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltip = series.tooltip;\r\n\t\t\tlet duration = tooltip.animationDuration;\r\n\t\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t//\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\t//\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\t\tthis.lineY.x = x;\r\n\t\t\tthis.lineX.y = y;\r\n\r\n\t\t\tif (!this.xAxis) {\r\n\t\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t\t}\r\n\t\t\tif (!this.yAxis) {\r\n\t\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.hide(0);\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, force?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n"],
  "mappings": "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",
  "names": ["Grip", "ChartDataItem", "Chart", "each", "Bullet", "LegendDataItem", "LegendSettings", "Legend", "rectangle", "SeriesDataItem", "Series", "each", "i", "percent", "event", "minValue", "maxValue", "min", "max", "SerialChartDataItem", "SerialChart", "each", "AxisBreak", "AxisDataItem", "AxisItemLocation", "Axis", "each", "order", "min", "max", "eachContinue", "intersection", "AxisLine", "AxisFill", "Grid", "AxisLabel", "Tick", "AxisTick", "AxisRenderer", "AxisBullet", "AxisRendererY", "ValueAxisBreak", "ValueAxisDataItem", "ValueAxis", "i", "series", "each", "min", "max", "axisBreak", "dataItem", "eachContinue", "DateAxisBreak", "DateAxisDataItem", "DateAxis", "min", "max", "round", "each", "series", "key", "copyProperties", "AxisRendererX", "CategoryAxisBreak", "CategoryAxisDataItem", "CategoryAxis", "each", "axisBreak", "dataItem", "eachContinue", "XYSeriesDataItem", "min", "max", "XYSeries", "each", "round", "eachContinue", "copyProperties", "XYChartScrollbar", "each", "series", "xAxis", "yAxis", "XYChartDataItem", "XYChart", "each", "eachContinue", "series", "order", "round", "dataItem", "LineSeriesSegment", "DurationAxisDataItem", "DurationAxis", "min", "max", "closest", "LineSeriesDataItem", "LineSeries", "each", "add", "eachContinue", "RadarSeriesDataItem", "RadarSeries", "AxisFillCircular", "GridCircular", "AxisLabelCircular", "AxisRendererCircular", "arc", "AxisRendererRadial", "arc", "RadarChartDataItem", "RadarChart", "each", "ClockHand", "GaugeChartDataItem", "GaugeChart", "PercentSeriesDataItem", "PercentSeries", "each", "PercentChartDataItem", "PercentChart", "each", "PieTick", "PieSeriesDataItem", "PieSeries", "PieChartDataItem", "PieChart", "each", "innerRadius", "PieSeries3DDataItem", "PieSeries3D", "PieChart3DDataItem", "PieChart3D", "SlicedChartDataItem", "SlicedChart", "FlowDiagramNode", "order", "FlowDiagramLink", "each", "color", "event", "FlowDiagramDataItem", "FlowDiagram", "each", "order", "LabelBullet", "SankeyNode", "each", "SankeyLink", "SankeyDiagramDataItem", "SankeyDiagram", "each", "valueHeight", "duration", "ChordNode", "each", "QuadraticCurve", "ChordLink", "arc", "ChordDiagramDataItem", "ChordDiagram", "each", "arc", "Column", "ColumnSeriesDataItem", "ColumnSeries", "each", "axis", "TreeMapSeriesDataItem", "TreeMapSeries", "TreeMapDataItem", "each", "color", "TreeMap", "each", "dataItem", "i", "AxisRendererX3D", "AxisRendererY3D", "Column3D", "ColumnSeries3DDataItem", "ColumnSeries3D", "XYChart3DDataItem", "XYChart3D", "each", "HeatLegend", "eachContinue", "each", "color", "min", "max", "Candlestick", "CandlestickSeriesDataItem", "CandlestickSeries", "each", "OHLC", "OHLCSeriesDataItem", "OHLCSeries", "each", "StepLineSeriesSegment", "StepLineSeriesDataItem", "StepLineSeries", "RadarColumn", "RadarColumnSeriesDataItem", "RadarColumnSeries", "each", "arc", "slice", "FunnelSlice", "FunnelTick", "FunnelSeriesDataItem", "FunnelSeries", "each", "PyramidSeriesDataItem", "PyramidSeries", "PictorialStackedSeriesDataItem", "PictorialStackedSeries", "ConeColumn", "ConeSeriesDataItem", "ConeSeries", "CurvedColumn", "CurvedColumnSeriesDataItem", "CurvedColumnSeries", "CircleBullet", "ErrorBullet", "NavigationBarDataItem", "NavigationBar", "Cursor", "XYCursor", "RadarCursor", "arc", "sin", "cos"]
}
