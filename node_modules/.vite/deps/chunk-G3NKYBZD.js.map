{
  "version": 3,
  "sources": ["../../src/.internal/core/utils/Percent.ts", "../../src/.internal/core/utils/Type.ts", "../../src/.internal/core/utils/Math.ts", "../../src/.internal/core/utils/Array.ts", "../../src/.internal/core/utils/Disposer.ts", "../../src/.internal/core/utils/AsyncPending.ts", "../../src/.internal/core/utils/EventDispatcher.ts", "../../src/.internal/core/utils/Object.ts", "../../src/.internal/core/utils/Iterator.ts", "../../src/.internal/core/utils/String.ts", "../../src/.internal/core/utils/Dictionary.ts", "../../src/.internal/core/utils/Cache.ts", "../../src/.internal/core/Registry.ts"],
  "sourcesContent": ["/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Represents a relative value (percent).\n *\n * The Percent object, can be instantiated using two ways:\n *\n * * Via `new Percent(X)`.\n * * Via `am4core.percent(X)`.\n *\n * `Percent` type objects can be used in a number of dual-measuring or\n * positioning properties, like `width`. E.g.:\n *\n * ```TypeScript\n * chart.paddingRight = new Percent(10);\n * // or\n * chart.paddingRight = am4core.percent(10);\n * ```\n * ```JavaScript\n * chart.paddingRight = new Percent(10);\n * // or\n * chart.paddingRight = am4core.percent(10);\n * ```\n * ```JSON\n * {\n *   // ...\n *   \"paddingRight\": \"10%\"\n * }\n * ```\n */\nexport class Percent {\n\n\t/**\n\t * Value in percent.\n\t */\n\tprotected _value: number;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param percent  Percent value\n\t */\n\tconstructor(percent: number) {\n\t\tthis._value = percent;\n\t}\n\n\t/**\n\t * Relative value.\n\t *\n\t * E.g. 100% is 1, 50% is 0.5, etc.\n\t *\n\t * This is useful to apply transformations to other values. E.g.:\n\t *\n\t * ```TypeScript\n\t * let value = 256;\n\t * let percent = new am4core.Percent(50);\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t * ```JavaScript\n\t * var value = 256;\n\t * var percent = new am4core.Percent(50);\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t *\n\t * Alternatively, you can use `am4core.percent()` helper function:\n\t *\n\t * ```TypeScript\n\t * let value = 256;\n\t * let percent = am4core.percent(50);\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t * ```JavaScript\n\t * var value = 256;\n\t * var percent = am4core.percent(50);\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t *\n\t * @readonly\n\t * @return Relative value\n\t */\n\tpublic get value(): number {\n\t\treturn this._value / 100;\n\t}\n\n\t/**\n\t * Value in percent.\n\t *\n\t * @return Percent\n\t */\n\tpublic get percent(): number {\n\t\treturn this._value;\n\t}\n\n\tpublic toString(): string {\n\t\treturn \"\" + this._value + \"%\";\n\t}\n\n\t/*public toNumber(): number {\n\t\treturn this.percent;\n\t}*/\n\n}\n\n\n/**\n * Converts numeric percent value to a proper [[Percent]] object.\n *\n * ```TypeScript\n * pieSeries.radius = am4core.percent(80);\n * ```\n * ```JavaScript\n * pieSeries.radius = am4core.percent(80);\n * ```\n *\n * @param value  Percent\n * @return Percent object\n */\nexport function percent(value: number): Percent {\n\treturn new Percent(value);\n}\n\n\n/**\n * Checks if value is a [[Percent]] object.\n *\n * @ignore Exclude from docs\n * @param value  Input value\n * @return Is percent?\n */\nexport function isPercent(value: any): boolean {\n\treturn value instanceof Percent;\n}\n", "/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @todo Review unused functions for removal\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { percent, Percent, isPercent } from \"./Percent\";\r\n\r\n\r\n/**\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n */\r\nexport type Public<T> = {[P in keyof T]: T[P]};\r\n\r\n\r\n/**\r\n * `Keyof<T>` is the same as `keyof T` except it only accepts string keys, not numbers or symbols.\r\n */\r\nexport type Keyof<T> = Extract<keyof T, string>;\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param value Input value\r\n * @return Is NaN?\r\n * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere\r\n */\r\nexport function isNaN(value: number): boolean {\r\n\treturn Number(value) !== value;\r\n}\r\n\r\n/**\r\n * Represents a type for all available JavaScript variable types.\r\n */\r\nexport type Type\r\n\t= \"[object Object]\"\r\n\t| \"[object Array]\"\r\n\t| \"[object String]\"\r\n\t| \"[object Number]\"\r\n\t| \"[object Boolean]\"\r\n\t| \"[object Date]\";\r\n\r\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param value  Input value\r\n * @return Type of the value\r\n */\r\nexport function getType<A>(value: A): Type {\r\n\treturn ({}).toString.call(value) as Type;\r\n}\r\n\r\n/**\r\n * Returns a default value if the passed in value is empty.\r\n *\r\n * @param value     Input value\r\n * @param optional  Default value\r\n * @return Value or default value whichever is available\r\n * @deprecated Not used anywhere\r\n */\r\nexport function getDefault<A>(value: null | undefined | A, optional: A): A {\r\n\treturn value || optional;\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a string.\r\n *\r\n * @param value  Value\r\n * @return Is string?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkString(value: any): value is string {\r\n\tif (typeof value === \"string\") {\r\n\t\treturn true;\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a string but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a boolean.\r\n *\r\n * @param value  Value\r\n * @return Is boolean?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkBoolean(value: any): value is boolean {\r\n\tif (typeof value === \"boolean\") {\r\n\t\treturn true;\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a boolean but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a number.\r\n *\r\n * @param value  Value\r\n * @return Is number?\r\n * @throws {Error}\r\n */\r\nexport function checkNumber(value: any): value is number {\r\n\tif (typeof value === \"number\") {\r\n\t\tif (isNaN(value)) {\r\n\t\t\tthrow new Error(\"Expected a number but got NaN\");\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a number but got \" + getType(value));\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is an object.\r\n *\r\n * @param value  Value\r\n * @return Is object?\r\n * @throws {Error}\r\n * @todo Is the input type correct?\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkObject(value: {}): value is {} {\r\n\tconst t = getType(value);\r\n\r\n\tif (t === \"[object Object]\") {\r\n\t\treturn true;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected an object but got \" + t);\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is an array.\r\n *\r\n * @param value  Value\r\n * @return Is array?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkArray<A>(value: Array<A>): value is Array<A> {\r\n\tif (Array.isArray(value)) {\r\n\t\treturn true;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected an array but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a Date object.\r\n *\r\n * @param value  Value\r\n * @return Is Date object?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkDate(value: Date): value is Date {\r\n\tconst t = getType(value);\r\n\r\n\tif (t === \"[object Date]\") {\r\n\t\treturn true;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a date but got \" + t);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CASTING\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Casts string or a number into string.\r\n *\r\n * @param value  Input\r\n * @return String value\r\n * @deprecated Not used anywhere\r\n */\r\nexport function castString(value: string | number): string {\r\n\tif (typeof value === \"string\") {\r\n\t\treturn value;\r\n\r\n\t} else if (typeof value === \"number\") {\r\n\t\treturn \"\" + value;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a string or number but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Casts string or a number into a number.\r\n *\r\n * @param value   Input value\r\n * @return Number  value\r\n * @throws {Error}\r\n */\r\nexport function castNumber(value: string | number | Date): number {\r\n\tif (typeof value === \"string\") {\r\n\t\tconst number = +value;\r\n\r\n\t\tif (isNaN(number)) {\r\n\t\t\tthrow new Error(\"Cannot cast string \" + JSON.stringify(value) + \" to a number\");\r\n\r\n\t\t} else {\r\n\t\t\treturn number;\r\n\t\t}\r\n\r\n\t} else if (typeof value === \"number\") {\r\n\t\tif (isNaN(value)) {\r\n\t\t\tthrow new Error(\"Expected a number but got NaN\");\r\n\r\n\t\t} else {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t} else {\r\n\t\tconst t = getType(value);\r\n\r\n\t\tif (t === \"[object Date]\") {\r\n\t\t\treturn value.getTime();\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Expected a string, number, or date but got \" + t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Casts number, string or Date into a Date object.\r\n *\r\n * @param value  Input value\r\n * @return Date object\r\n * @deprecated Not used anywhere\r\n * @throws {Error}\r\n * @hidden\r\n * @deprecated\r\n */\r\n/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {\r\n\tif (typeof value === \"string\") {\r\n\t\tif (formatter) {\r\n\t\t\treturn formatter.parse(value);\r\n\t\t}\r\n\t\treturn new Date(value);\r\n\r\n\t} else if (typeof value === \"number\") {\r\n\t\treturn new Date(value);\r\n\r\n\t} else {\r\n\t\tconst t = getType(value);\r\n\r\n\t\tif (t === \"[object Date]\") {\r\n\t\t\treturn value;\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Expected a string, number, or date but got \" + t);\r\n\t\t}\r\n\t}\r\n}*/\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * Converts any value into `boolean`.\r\n *\r\n * @param value  Source value\r\n * @return `true` or `false`\r\n */\r\nexport function toBoolean(value: any): boolean {\r\n\treturn value ? true : false;\r\n}\r\n\r\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param value  Source value\r\n * @return Number representation of value\r\n */\r\nexport function toNumber(value: any): number {\r\n\tif (hasValue(value) && !isNumber(value)) {\r\n\t\tlet converted = Number(value);\r\n\t\tif (isNaN(converted) && isString(value) && value != \"\") {\r\n\t\t\treturn toNumber(value.replace(/[^0-9.\\-]+/g, ''));\r\n\t\t}\r\n\t\treturn converted;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Converts any value into a string (text).\r\n *\r\n * @param value  Source value\r\n * @return String representation of the input\r\n */\r\nexport function toText(value: any): string {\r\n\tif (hasValue(value) && !isString(value)) {\r\n\t\tif (isNumber(value)) {\r\n\t\t\treturn castString(value);\r\n\t\t}\r\n\t\telse if (isObject(value)) {\r\n\t\t\treturn value.toString();\r\n\t\t}\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Converts any value to a number or [[Percent]].\r\n *\r\n * If the parameter is a string and contains \"%\", it will\r\n * convert it into a [[Percent]].\r\n *\r\n * Otherwise, it will convert into a number.\r\n *\r\n * @param value  Number or percent\r\n * @return Percent object\r\n */\r\nexport function toNumberOrPercent(value: any): number | Percent {\r\n\tif (!hasValue(value) || isNumber(value) || isPercent(value)) {\r\n\t\treturn value;\r\n\t}\r\n\tif (isString(value) && value.indexOf(\"%\") != -1) {\r\n\t\treturn percent(toNumber(value));\r\n\t}\r\n\treturn toNumber(value);\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * VALUE PRESENCE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an optional value that can be of any type or `undefined`.\r\n */\r\nexport type Optional<A> = A | undefined;\r\n\r\n/**\r\n * Checks if a variable has a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Has value?\r\n */\r\nexport function hasValue<A>(a: Optional<A> | null): a is A {\r\n\treturn a != null;\r\n}\r\n\r\n/**\r\n * Returns a value or throws an {Error} exception if the variable has not\r\n * value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValue<A>(a: Optional<A> | null): A {\r\n\tif (hasValue(a)) {\r\n\t\treturn a;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Value doesn't exist\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a value, or returns the default value if it doesn't have a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValueDefault<A>(a: Optional<A> | null, defaultValue: A): A {\r\n\tif (hasValue(a)) {\r\n\t\treturn a;\r\n\r\n\t} else {\r\n\t\treturn defaultValue;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param value  Input value\r\n * @return Is Date?\r\n */\r\nexport function isDate(value: any): value is Date {\r\n\treturn getType(value) === \"[object Date]\";\r\n}\r\n\r\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param value  Input value\r\n * @return Is string?\r\n */\r\nexport function isString(value: any): value is string {\r\n\treturn typeof value === \"string\";\r\n}\r\n\r\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param value  Input value\r\n * @return Is number?\r\n */\r\nexport function isNumber(value: any): value is number {\r\n\treturn typeof value === \"number\" && Number(value) == value;\r\n}\r\n\r\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param value  Input value\r\n * @return Is object?\r\n */\r\nexport function isObject(value: any): value is object {\r\n\treturn typeof value === \"object\" && value != null;\r\n}\r\n\r\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param value  Input value\r\n * @return Is Array?\r\n */\r\nexport function isArray(value: any): value is Array<any> {\r\n\treturn Array.isArray(value);\r\n}\r\n", "/**\r\n * A collection of Math-related functions\r\n *\r\n * @todo Comment trigonometric functions?\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { IRange } from \"../defs/IRange\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport const PI = Math.PI;\r\nexport const HALFPI = PI / 2;\r\nexport const RADIANS = PI / 180;\r\nexport const DEGREES = 180 / PI;\r\n\r\n/**\r\n * Converts any value and fits it into a specific value range.\r\n *\r\n * @param value  Source value\r\n * @param min    Minimum allowable value\r\n * @param max    Maximum allowable value\r\n * @return Number\r\n */\r\nexport function toNumberRange(value: any, min: number, max: number): number {\r\n\tif ($type.hasValue(value)) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\treturn fitToRange(value, min, max);\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Rounds the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.\r\n * @return Rounded value\r\n */\r\nexport function round(value: number, precision?: number, floor?: boolean): number {\r\n\tif (!$type.isNumber(precision) || precision <= 0) {\r\n\r\n\t\tlet rounded = Math.round(value);\r\n\t\tif (floor) {\r\n\t\t\tif (rounded - value == 0.5) {\r\n\t\t\t\trounded--;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rounded;\r\n\t}\r\n\telse {\r\n\t\tlet d: number = Math.pow(10, precision);\r\n\t\treturn Math.round(value * d) / d;\r\n\t}\r\n}\r\n\r\n/**\r\n * Ceils the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @return Rounded value\r\n */\r\nexport function ceil(value: number, precision?: number): number {\r\n\tif (!$type.isNumber(precision) || precision <= 0) {\r\n\t\treturn Math.ceil(value);\r\n\t}\r\n\telse {\r\n\t\tlet d: number = Math.pow(10, precision);\r\n\t\treturn Math.ceil(value * d) / d;\r\n\t}\r\n}\r\n\r\n/**\r\n * Stretches `t` so that it will always be between `from` and `to`.\r\n *\r\n * @param t     Number from 0 to 1\r\n * @param from  Lowest possible value\r\n * @param to    Highest possible value\r\n * @return Adjusted value\r\n */\r\nexport function stretch(t: number, from: number, to: number): number {\r\n\treturn (t * (to - from)) + from;\r\n}\r\n\r\n\r\n/**\r\n * Adjust numeric value so it fits to specific value range.\r\n *\r\n * @param value     Value\r\n * @param minValue  Lowest possible value\r\n * @param maxValue  Highest possible value\r\n * @return Adjusted value\r\n */\r\nexport function fitToRange(value: number, minValue: $type.Optional<number>, maxValue: $type.Optional<number>): number {\r\n\tif ($type.isNumber(minValue)) {\r\n\t\tif ($type.isNumber(maxValue) && maxValue < minValue) {\r\n\t\t\tlet temp = maxValue;\r\n\t\t\tmaxValue = minValue;\r\n\t\t\tminValue = temp;\r\n\t\t}\r\n\r\n\t\tif (value < minValue) {\r\n\t\t\tvalue = minValue;\r\n\t\t}\r\n\t}\r\n\r\n\tif ($type.isNumber(maxValue)) {\r\n\t\tif (value > maxValue) {\r\n\t\t\tvalue = maxValue;\r\n\t\t}\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Returns sine of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\r\nexport function sin(value: number): number {\r\n\treturn round(Math.sin(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns tan of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\r\nexport function tan(value: number): number {\r\n\treturn round(Math.tan(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns cosine of a number.\r\n *\r\n * @param value  Value\r\n * @return Cosine\r\n */\r\nexport function cos(value: number): number {\r\n\treturn round(Math.cos(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns biggest value out of passed in numeric values.\r\n *\r\n * @param left   Numeric value\r\n * @param right  Numeric value\r\n * @return Biggest value\r\n */\r\nexport function max(left: number, right: number): number;\r\nexport function max(left: number, right: $type.Optional<number>): number;\r\nexport function max(left: $type.Optional<number>, right: number): number;\r\nexport function max(left: $type.Optional<number>, right: $type.Optional<number>): $type.Optional<number>;\r\nexport function max(left: any, right: any): any {\r\n\tif ($type.isNumber(left)) {\r\n\t\tif ($type.isNumber(right)) {\r\n\t\t\tif (right > left) {\r\n\t\t\t\treturn right;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn left;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn left;\r\n\t\t}\r\n\r\n\t} else if ($type.isNumber(right)) {\r\n\t\treturn right;\r\n\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns smallest value out of passed in numeric values.\r\n *\r\n * @param left   Numeric value\r\n * @param right  Numeric value\r\n * @return Smallest value\r\n */\r\nexport function min(left: number, right: number): number;\r\nexport function min(left: number, right: $type.Optional<number>): number;\r\nexport function min(left: $type.Optional<number>, right: number): number;\r\nexport function min(left: $type.Optional<number>, right: $type.Optional<number>): $type.Optional<number>;\r\nexport function min(left: any, right: any): any {\r\n\tif ($type.isNumber(left)) {\r\n\t\tif ($type.isNumber(right)) {\r\n\t\t\tif (right < left) {\r\n\t\t\t\treturn right;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn left;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn left;\r\n\t\t}\r\n\r\n\t} else if ($type.isNumber(right)) {\r\n\t\treturn right;\r\n\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns the closest value from the array of values to the reference value.\r\n *\r\n * @param values  Array of values\r\n * @param value   Reference value\r\n * @return Closes value from the array\r\n */\r\nexport function closest(values: number[], referenceValue: number): number {\r\n\treturn values.reduce(function(prev, curr) {\r\n\t\treturn (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);\r\n\t});\r\n}\r\n\r\n/**\r\n * Checks whether two ranges of values intersect.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Any intersecting numbers?\r\n */\r\nexport function intersect(range1: IRange, range2: IRange): boolean {\r\n\tlet start1: number = $type.getValue(range1.start);\r\n\tlet start2: number = $type.getValue(range2.start);\r\n\tlet end1: number = $type.getValue(range1.end);\r\n\tlet end2: number = $type.getValue(range2.end);\r\n\r\n\treturn Math.max(start1, start2) <= Math.min(end1, end2);\r\n}\r\n\r\n/**\r\n * Inverts the range of values.\r\n *\r\n * @param range  Range\r\n */\r\nexport function invertRange(range: IRange) {\r\n\tlet start: number = $type.getValue(range.start);\r\n\tlet end: number = $type.getValue(range.end);\r\n\treturn { start: 1 - end, end: 1 - start };\r\n}\r\n\r\n/**\r\n * Returns an intersection range between two ranges of values.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Intersecting value range\r\n */\r\nexport function intersection(range1: IRange, range2: IRange): $type.Optional<IRange> {\r\n\tlet start1: number = $type.getValue(range1.start);\r\n\tlet start2: number = $type.getValue(range2.start);\r\n\tlet end1: number = $type.getValue(range1.end);\r\n\tlet end2: number = $type.getValue(range2.end);\r\n\tlet startMax: number = Math.max(start1, start2);\r\n\tlet endMin: number = Math.min(end1, end2);\r\n\r\n\tif (endMin < startMax) {\r\n\t\treturn undefined;\r\n\t}\r\n\telse {\r\n\t\treturn { start: startMax, end: endMin };\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns pixel \"distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getDistance(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\treturn Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));\r\n}\r\n\r\n/**\r\n * Returns pixel \"horizontal distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getHorizontalDistance(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\treturn Math.abs(point1.x - point2.x);\r\n}\r\n\r\n/**\r\n * Returns pixel \"vertical distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getVerticalDistance(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\treturn Math.abs(point1.y - point2.y);\r\n}\r\n\r\n/**\r\n * Returns approximate pixel \"distance\" between two points of cubic curve\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @param controlPointA  Control Point 1\r\n * @param controlPointB  Control Point 2\r\n * @param stepCount  number of steps (the more, the more accurate result)\r\n * @return Distance in relative pixels\r\n */\r\nexport function getCubicCurveDistance(point1: IPoint, point2: IPoint, controlPointA: IPoint, controlPointB: IPoint, stepCount:number): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\r\n\tlet distance = 0;\r\n\tlet prevPoint: IPoint = point1;\r\n\tif (stepCount > 0) {\r\n\t\tfor (let s = 0; s <= stepCount; s++) {\r\n\t\t\tlet point = getPointOnCubicCurve(point1, point2, controlPointA, controlPointB, s / stepCount);\r\n\t\t\tdistance += getDistance(prevPoint, point);\r\n\t\t\tprevPoint = point;\r\n\t\t}\r\n\t}\r\n\treturn distance;\r\n}\r\n\r\n/**\r\n * Returns scale based on original and end position of the two points.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Scale        Calculated scale\r\n */\r\nexport function getScale(point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): number {\r\n\tlet initialDistance: number = getDistance(startPoint1, startPoint2);\r\n\tlet currentDistance: number = getDistance(point1, point2);\r\n\r\n\treturn Math.abs(currentDistance / initialDistance);\r\n}\r\n\r\n/**\r\n * Returns an exact mid point between two points.\r\n *\r\n * @param point1     Position of point 1\r\n * @param point2     Position of point 2\r\n * @return Mid point  Position of mid-point\r\n */\r\nexport function getMidPoint(point1: IPoint, point2: IPoint, position?: number): IPoint {\r\n\tif (!$type.isNumber(position)) {\r\n\t\tposition = 0.5;\r\n\t}\r\n\r\n\treturn {\r\n\t\t\"x\": (point1.x + (point2.x - point1.x) * position),\r\n\t\t\"y\": (point1.y + (point2.y - point1.y) * position)\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns difference in angles between starting and ending position of two\r\n * vectors.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Angle difference in degrees\r\n */\r\nexport function getRotation(point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): number {\r\n\r\n\t// Get start and end angles\r\n\tlet startAngle: number = getAngle(startPoint1, startPoint2);\r\n\tlet angle: number = getAngle(point1, point2);\r\n\r\n\t// Calculate angle\r\n\tlet diff: number = startAngle - angle;\r\n\tif (diff < 0) {\r\n\t\tdiff += 360;\r\n\t}\r\n\r\n\treturn diff;\r\n}\r\n\r\n/**\r\n * Calculates angle of the vector based on two or one point.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Angle in degrees\r\n */\r\nexport function getAngle(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: point1.x * 2, y: point1.y * 2 };\r\n\t}\r\n\tlet diffX: number = point2.x - point1.x;\r\n\tlet diffY: number = point2.y - point1.y;\r\n\tlet angle: number = Math.atan2(diffY, diffX) * DEGREES;\r\n\tif (angle < 0) {\r\n\t\tangle += 360;\r\n\t}\r\n\treturn normalizeAngle(angle);\r\n}\r\n\r\n/**\r\n * Returns the shift in coordinates of the center when item is rotated, moved\r\n * and scaled at the same time.\r\n *\r\n * @param center       Current center\r\n * @param point1       Frst reference point\r\n * @param startPoint1  Original position of the first reference point\r\n * @param point2       Second reference point\r\n * @param startPoint2  Original position of the first reference point\r\n * @return Shift in center point coordinates\r\n */\r\nexport function getCenterShift(center: IPoint, point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): IPoint {\r\n\r\n\t// Get angle\r\n\tlet angle: number = getRotation(point1, startPoint1, point2, startPoint2) - 90;\r\n\tif (angle < 0) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\t// Get distance between new position\r\n\tlet distance: number = getDistance(point1, point2);\r\n\r\n\t// Calculate new X\r\n\tlet x: number = Math.cos(angle) / distance + point1.x;\r\n\tlet y: number = Math.cos(angle) / distance + point1.y;\r\n\r\n\tlet shift: IPoint = {\r\n\t\t\"x\": x - center.x,\r\n\t\t\"y\": y - center.y\r\n\t}\r\n\treturn shift;\r\n}\r\n\r\n/**\r\n * Converts an array of points into a bounding box rectangle.\r\n *\r\n * Array can contain any number of points.\r\n *\r\n * @param points  Points\r\n * @return Bounding box rectangle\r\n */\r\nexport function getBBox(points: IPoint[]): $type.Optional<IRectangle> {\r\n\tif (points) {\r\n\t\tlet length = points.length;\r\n\r\n\t\tif (length !== 0) {\r\n\t\t\tlet left!: number;\r\n\t\t\tlet right!: number;\r\n\t\t\tlet top!: number;\r\n\t\t\tlet bottom!: number;\r\n\r\n\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\tlet point: IPoint = points[i];\r\n\r\n\t\t\t\tif (!$type.isNumber(right) || (point.x > right)) {\r\n\t\t\t\t\tright = point.x;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(left) || (point.x < left)) {\r\n\t\t\t\t\tleft = point.x;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.isNumber(top) || (point.y < top)) {\r\n\t\t\t\t\ttop = point.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(bottom) || (point.y > bottom)) {\r\n\t\t\t\t\tbottom = point.y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn { x: left, y: top, width: right - left, height: bottom - top };\r\n\t\t}\r\n\t}\r\n\r\n\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n}\r\n\r\n/**\r\n * Returns a [[IRectangle]] object representing a common rectangle that fits\r\n * all passed in rectangles in it.\r\n *\r\n * @param rectangles  An array of rectangles\r\n * @return Common rectangle\r\n */\r\nexport function getCommonRectangle(rectangles: IRectangle[]): $type.Optional<IRectangle> {\r\n\tlet length = rectangles.length;\r\n\r\n\tif (length !== 0) {\r\n\t\tlet minX!: number;\r\n\t\tlet minY!: number;\r\n\t\tlet maxX!: number;\r\n\t\tlet maxY!: number;\r\n\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tlet rectangle = rectangles[i];\r\n\t\t\tminX = min(rectangle.x, minX);\r\n\t\t\tminY = min(rectangle.y, minY);\r\n\t\t\tmaxX = max(rectangle.x + rectangle.width, maxX);\r\n\t\t\tmaxY = max(rectangle.y + rectangle.height, maxY);\r\n\t\t}\r\n\r\n\t\treturn { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\r\n\t}\r\n}\r\n\r\n/**\r\n * [getPointOnQuadraticCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA        [description]\r\n * @param pointB        [description]\r\n * @param controlPoint  [description]\r\n * @param position      [description]\r\n * @return [description]\r\n */\r\nexport function getPointOnQuadraticCurve(pointA: IPoint, pointB: IPoint, controlPoint: IPoint, position: number): IPoint {\r\n\tlet x: number = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;\r\n\tlet y: number = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n/**\r\n * [getPointOnCubicCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA         [description]\r\n * @param pointB         [description]\r\n * @param controlPointA  [description]\r\n * @param controlPointB  [description]\r\n * @param position       [description]\r\n * @return [description]\r\n */\r\nexport function getPointOnCubicCurve(pointA: IPoint, pointB: IPoint, controlPointA: IPoint, controlPointB: IPoint, position: number): IPoint {\r\n\tlet point: IPoint = { x: 0, y: 0 };\r\n\tlet mt1: number = 1 - position;\r\n\tlet mt2: number = mt1 * mt1;\r\n\tlet mt3: number = mt2 * mt1;\r\n\r\n\tpoint.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;\r\n\tpoint.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;\r\n\r\n\treturn point;\r\n}\r\n\r\n/**\r\n * [getCubicControlPointA description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\r\nexport function getCubicControlPointA(p0: IPoint, p1: IPoint, p2: IPoint, p3: IPoint, tensionX: number, tensionY: number): IPoint {\r\n\ttensionX = adjustTension(tensionX);\r\n\ttensionY = adjustTension(tensionY);\r\n\treturn { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };\r\n}\r\n\r\n/**\r\n * [getCubicControlPointB description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\r\nexport function getCubicControlPointB(p0: IPoint, p1: IPoint, p2: IPoint, p3: IPoint, tensionX: number, tensionY: number): IPoint {\r\n\ttensionX = adjustTension(tensionX);\r\n\ttensionY = adjustTension(tensionY);\r\n\treturn { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };\r\n}\r\n\r\n/**\r\n * [adjustTension description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param tension  [description]\r\n * @return [description]\r\n */\r\nexport function adjustTension(tension: number): number {\r\n\treturn 1 - tension + 0.00001;\r\n}\r\n\r\n/**\r\n * [normalizeAngle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @return [description]\r\n */\r\nexport function normalizeAngle(value: number): number {\r\n\tif (value == 360) {\r\n\t\treturn 360;\r\n\t}\r\n\treturn value % 360;\r\n}\r\n\r\n\r\n\r\n/**\r\n * [normalizeAngleToRange description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo review this with various angles, can be tested on radar chart with custom start/end angles\r\n * @param value       [description]\r\n * @param startAngle  [description]\r\n * @param endAngle    [description]\r\n * @return [description]\r\n */\r\nexport function fitAngleToRange(value: number, startAngle: number, endAngle: number): number {\r\n\r\n\tif (startAngle > endAngle) {\r\n\t\tlet temp: number = startAngle;\r\n\t\tstartAngle = endAngle;\r\n\t\tendAngle = temp;\r\n\t}\r\n\r\n\tvalue = normalizeAngle(value);\r\n\r\n\tlet count = (startAngle - normalizeAngle(startAngle)) / 360;\r\n\r\n\tif (value < startAngle) {\r\n\t\tvalue += 360 * (count + 1);\r\n\t}\r\n\r\n\tlet maxEnd: number = startAngle + (endAngle - startAngle) / 2 + 180;\r\n\tlet maxStart: number = startAngle + (endAngle - startAngle) / 2 - 180;\r\n\r\n\tif (value > endAngle) {\r\n\r\n\t\tif (value - 360 > startAngle) {\r\n\t\t\tvalue -= 360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (value < maxEnd) {\r\n\t\t\t\tvalue = endAngle;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (value < startAngle) {\r\n\t\tif (value > maxStart) {\r\n\t\t\tvalue = startAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalue = endAngle;\r\n\t\t}\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n\r\n/**\r\n * Returns [[IRectangle]] of an arc in relative values, assuming that the\r\n * center is at the circle center.\r\n *\r\n * Used to find out max radius of an arc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param startAngle  Start angle\r\n * @param endAngle    End angle\r\n * @param radius    \t Relative radius\r\n * @return Rectangle\r\n */\r\nexport function getArcRect(startAngle: number, endAngle: number, radius?: number): IRectangle {\r\n\r\n\tlet minX = Number.MAX_VALUE;\r\n\tlet minY = Number.MAX_VALUE;\r\n\tlet maxX = -Number.MAX_VALUE;\r\n\tlet maxY = -Number.MAX_VALUE;\r\n\r\n\tlet bpoints = [];\r\n\r\n\tif (!$type.isNumber(radius)) {\r\n\t\tradius = 1;\r\n\t}\r\n\r\n\tbpoints.push(getArcPoint(radius, startAngle));\r\n\tbpoints.push(getArcPoint(radius, endAngle));\r\n\r\n\tlet fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);\r\n\tlet toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);\r\n\r\n\tfor (let angle = fromAngle; angle <= toAngle; angle += 90) {\r\n\t\tif (angle >= startAngle && angle <= endAngle) {\r\n\t\t\tbpoints.push(getArcPoint(radius, angle));\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let i = 0; i < bpoints.length; i++) {\r\n\t\tlet pt = bpoints[i];\r\n\t\tif (pt.x < minX) { minX = pt.x; }\r\n\t\tif (pt.y < minY) { minY = pt.y; }\r\n\t\tif (pt.x > maxX) { maxX = pt.x; }\r\n\t\tif (pt.y > maxY) { maxY = pt.y; }\r\n\t}\r\n\r\n\treturn ({ x: minX, y: minY, width: maxX - minX, height: maxY - minY });\r\n}\r\n\r\n/**\r\n * Returns point on arc\r\n *\r\n * @param center point\r\n * @param radius\r\n * @param arc\r\n * @return {boolean}\r\n */\r\nexport function getArcPoint(radius: number, arc: number) {\r\n\treturn ({ x: radius * cos(arc), y: radius * sin(arc) });\r\n}\r\n\r\n/**\r\n * Returns true if a point is within rectangle\r\n *\r\n * @param point\r\n * @param rectangle\r\n * @return {boolean}\r\n */\r\nexport function isInRectangle(point: IPoint, rectangle: IRectangle): boolean {\r\n\tif (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y >= rectangle.y && point.y <= rectangle.y + rectangle.height) {\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\nexport function getLineIntersection(pointA1: IPoint, pointA2: IPoint, pointB1: IPoint, pointB2: IPoint) {\r\n\tlet x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n\tlet y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n\treturn { x: x, y: y };\r\n}\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Ordering } from \"./Order\";\r\nimport { Optional } from \"./Type\";\r\nimport * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\r\nexport function indexOf<A>(array: ArrayLike<A>, value: A): number {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\t// TODO handle NaN\r\n\t\tif (array[i] === value) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\r\nexport function any<A>(array: ArrayLike<A>, test: (value: A) => boolean): boolean {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tif (test(array[i])) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\r\nexport function map<A, B>(array: ArrayLike<A>, fn: (value: A, index: number) => B): Array<B> {\r\n\tconst length = array.length;\r\n\tconst output = new Array(length);\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\toutput[i] = fn(array[i], i);\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function each<A>(array: ArrayLike<A>, fn: (value: A, index: number) => void): void {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tfn(array[i], i);\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachReverse<A>(array: ArrayLike<A>, fn: (value: A, index: number) => void): void {\r\n\tlet i = array.length;\r\n\r\n\twhile (i--) {\r\n\t\tfn(array[i], i);\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachContinue<A>(array: ArrayLike<A>, fn: (value: A, index: number) => boolean): void {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tif (!fn(array[i], i)) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\r\nexport function shiftLeft<A>(array: Array<A>, index: number): void {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = index; i < length; ++i) {\r\n\t\tarray[i - index] = array[i];\r\n\t}\r\n\r\n\tarray.length = length - index;\r\n}\r\n\r\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function last<A>(array: Array<A>): Optional<A> {\r\n\tconst length = array.length;\r\n\treturn length ? array[length - 1] : undefined;\r\n}\r\n\r\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function first<A>(array: Array<A>): Optional<A> {\r\n\treturn array[0];\r\n}\r\n\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\r\nexport function insert<A>(array: Array<A>, element: A, index: number): void {\r\n\t//if (array) {\r\n\tindex = $math.fitToRange(index, 0, array.length);\r\n\tarray.splice(index, 0, element);\r\n\t//}\r\n}\r\n\r\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\r\nexport function setIndex<A>(array: Array<A>, element: A, index: number): void {\r\n\tremove(array, element);\r\n\tinsert(array, element, index);\r\n}\r\n\r\n\r\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\r\nexport function pushAll<A>(array: Array<A>, input: Array<A>) {\r\n\tconst length = input.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tarray.push(input[i]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\r\nexport function remove<A>(array: Array<A>, element: A): boolean {\r\n\tlet found: boolean = false;\r\n\tlet index: number = array.indexOf(element);\r\n\r\n\tif (index !== -1) {\r\n\t\tfound = true;\r\n\t\tarray.splice(index, 1);\r\n\r\n\t\tlet length: number = array.length;\r\n\r\n\t\twhile (index < length) {\r\n\t\t\t// TODO handle NaN\r\n\t\t\tif (array[index] === element) {\r\n\t\t\t\tarray.splice(index, 1);\r\n\t\t\t\t--length;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t++index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn found;\r\n}\r\n\r\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\r\nexport function move<A>(array: Array<A>, element: A, toIndex?: number): void {\r\n\t// @todo this implementation must be the same as the List.moveValue method\r\n\t// @todo don't do anything if the desired index is the same as the current index\r\n\tlet index = indexOf(array, element);\r\n\r\n\t// @todo remove all old values rather than only the first ?\r\n\tif (index !== -1) {\r\n\t\tremoveIndex(array, index);\r\n\t}\r\n\r\n\tif (toIndex == null) {\r\n\t\tarray.push(element);\r\n\t} else {\r\n\t\tinsertIndex(array, toIndex, element);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\r\nexport function add<A>(array: Array<A>, element: A, index?: number): void {\r\n\t// Append to the end if index is not set\r\n\tif (!$type.isNumber(index)) {\r\n\t\tarray.push(element);\r\n\t}\r\n\r\n\t// Add to the beginning of array if index is 0\r\n\telse if (index === 0) {\r\n\t\tarray.unshift(element);\r\n\t}\r\n\t// Add to indicated place if index is set\r\n\telse {\r\n\t\tarray.splice(index, 0, element);\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\r\nexport function replace<A>(array: Array<A>, element: A, index?: number): void {\r\n\t// check if exists\r\n\tlet ind: number = array.indexOf(element);\r\n\r\n\t// remove if exists\r\n\tif (ind !== -1) {\r\n\t\tarray.splice(ind, 1);\r\n\t}\r\n\r\n\t// add to end if index is not set\r\n\tif (!$type.isNumber(index)) {\r\n\t\tarray.push(element);\r\n\t}\r\n\t// add to indicated place if index is set\r\n\telse {\r\n\t\tarray.splice(index, 0, element);\r\n\t}\r\n}\r\n\r\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\r\nexport function toArray<A>(input: Array<A> | A): Array<A> {\r\n\tif (Array.isArray(input)) {\r\n\t\treturn input;\r\n\t}\r\n\telse {\r\n\t\treturn [input];\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\r\nexport function has<A>(array: ArrayLike<A>, element: A): boolean {\r\n\treturn indexOf(array, element) !== -1;\r\n}\r\n\r\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\r\nexport function copy<A>(array: ArrayLike<A>): Array<A> {\r\n\tconst length = array.length;\r\n\r\n\t// It's faster to create the array with a pre-defined length\r\n\tconst output = new Array(length);\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\t// Because the array has a pre-defined length, we have to assign rather than push\r\n\t\t// This is also faster than pushing\r\n\t\toutput[i] = array[i];\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n\r\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\r\nexport function slice<A>(array: ArrayLike<A>, start: number, end: number = array.length): Array<A> {\r\n\tconst output = new Array(end - start);\r\n\r\n\tfor (let i = start; i < end; ++i) {\r\n\t\toutput[i - start] = array[i];\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\r\nexport function insertIndex<A>(array: Array<A>, index: number, value: A): void {\r\n\tarray.splice(index, 0, value);\r\n}\r\n\r\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\r\nexport function removeIndex<A>(array: Array<A>, index: number): void {\r\n\tarray.splice(index, 1);\r\n}\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport interface SortResult {\r\n\tfound: boolean;\r\n\tindex: number\r\n}\r\n\r\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\r\nexport function getSortedIndex<A>(array: ArrayLike<A>, ordering: (left: A, right: A) => Ordering, value: A): SortResult {\r\n\tlet start = 0;\r\n\tlet end   = array.length;\r\n\tlet found = false;\r\n\r\n\twhile (start < end) {\r\n\t\t// TODO is this faster/slower than using Math.floor ?\r\n\t\tconst pivot = (start + end) >> 1;\r\n\r\n\t\tconst order = ordering(value, array[pivot]);\r\n\r\n\t\t// less\r\n\t\tif (order < 0) {\r\n\t\t\tend = pivot;\r\n\r\n\t\t// equal\r\n\t\t} else if (order === 0) {\r\n\t\t\tfound = true;\r\n\t\t\tstart = pivot + 1;\r\n\r\n\t\t// more\r\n\t\t} else {\r\n\t\t\tstart = pivot + 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tfound: found,\r\n\t\tindex: (found ? start - 1 : start)\r\n\t};\r\n}\r\n\r\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\r\nexport function findIndex<A>(array: ArrayLike<A>, matches: (value: A, index: number) => boolean): number {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tif (matches(array[i], i)) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\r\nexport function find<A>(array: ArrayLike<A>, matches: (value: A, index: number) => boolean): A | undefined {\r\n\tconst index = findIndex(array, matches);\r\n\r\n\tif (index !== -1) {\r\n\t\treturn array[index];\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function shuffle<A>(array: Array<A>) {\r\n\t// https://stackoverflow.com/a/2450976/449477\r\n\tlet currentIndex = array.length,\r\n\t\ttemporaryValue,\r\n\t\trandomIndex;\r\n\r\n\t// While there remain elements to shuffle...\r\n\twhile (0 !== currentIndex) {\r\n\t\t// Pick a remaining element...\r\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\r\n\t\tcurrentIndex -= 1;\r\n\r\n\t\t// And swap it with the current element.\r\n\t\ttemporaryValue = array[currentIndex];\r\n\t\tarray[currentIndex] = array[randomIndex];\r\n\t\tarray[randomIndex] = temporaryValue;\r\n\t}\r\n}\r\n\r\n\r\nexport function keepIf<A>(array: Array<A>, keep: (value: A) => boolean): void {\r\n\tlet length = array.length;\r\n\tlet i = 0;\r\n\r\n\twhile (i < length) {\r\n\t\tif (keep(array[i])) {\r\n\t\t\t++i;\r\n\r\n\t\t} else {\r\n\t\t\tarray.splice(i, 1);\r\n\t\t\t--length;\r\n\t\t}\r\n\t}\r\n}\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport { Optional } from \"./Type\";\r\n\r\n/**\r\n * Defines interface for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IDisposer {\r\n\tisDisposed(): boolean;\r\n\tdispose(): void;\r\n}\r\n\r\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class Disposer implements IDisposer {\r\n\r\n\t/**\r\n\t * Is object disposed?\r\n\t */\r\n\tprivate _disposed: boolean;\r\n\r\n\t/**\r\n\t * Method that disposes the object.\r\n\t */\r\n\tprivate _dispose: () => void;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param dispose  Function that disposes object\r\n\t */\r\n\tconstructor(dispose: () => void) {\r\n\t\tthis._disposed = false;\r\n\t\tthis._dispose = dispose;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if object is disposed.\r\n\t *\r\n\t * @return Disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes the object.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\t\t\tthis._dispose();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class MultiDisposer extends Disposer {\r\n\tconstructor(disposers: Array<IDisposer>) {\r\n\t\tsuper(() => {\r\n\t\t\t$array.each(disposers, (x) => {\r\n\t\t\t\tx.dispose();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport class MutableValueDisposer<T extends IDisposer> extends Disposer {\r\n\r\n\t/**\r\n\t * Current disposer.\r\n\t */\r\n\tprivate _disposer: Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Current value.\r\n\t */\r\n\tprivate _value: Optional<T>;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(() => {\r\n\t\t\tif ($type.hasValue(this._disposer)) {\r\n\t\t\t\tthis._disposer.dispose();\r\n\t\t\t\tthis._disposer = undefined;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current value.\r\n\t *\r\n\t * @return Value\r\n\t */\r\n\tpublic get(): Optional<T> {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets value and disposes previous disposer if it was set.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param disposer  Disposer\r\n\t */\r\n\tpublic set(value: Optional<T>, disposer: Optional<IDisposer>): void {\r\n\t\tif ($type.hasValue(this._disposer)) {\r\n\t\t\tthis._disposer.dispose();\r\n\t\t}\r\n\r\n\t\tthis._disposer = disposer;\r\n\t\tthis._value = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the disposer value.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis.set(undefined, undefined);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport class CounterDisposer extends Disposer {\r\n\r\n\t/**\r\n\t * [_counter description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprivate _counter: number = 0;\r\n\r\n\t/**\r\n\t * [increment description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic increment() {\r\n\t\t// TODO throw an error if it is disposed\r\n\t\t++this._counter;\r\n\r\n\t\t// TODO make this more efficient\r\n\t\treturn new Disposer(() => {\r\n\t\t\t--this._counter;\r\n\r\n\t\t\tif (this._counter === 0) {\r\n\t\t\t\tthis.dispose();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n", "/**\r\n * A collection of low-level async operation stuff.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\n\r\n/**\r\n * [Listener description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport type Listener = (now: number) => void;\r\n\r\nlet pendingFrame = false;\r\n\r\nconst nextQueue: Array<Listener> = [];\r\nconst readQueue: Array<Listener> = [];\r\nconst writeQueue: Array<Listener> = [];\r\nconst idleQueue: Array<Listener> = [];\r\n\r\n\r\nconst fps = 1000 / 60;\r\n\r\n/**\r\n * [raf description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport const raf =\r\n\t(typeof requestAnimationFrame === \"function\"\r\n\t\t? function(fn: () => void): void {\r\n\t\t\trequestAnimationFrame(fn);\r\n\t\t}\r\n\t\t: function(fn: () => void): void {\r\n\t\t\tsetTimeout(fn, fps);\r\n\t\t});\r\n\r\n/**\r\n * [frameLoop description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nfunction frameLoop(): void {\r\n\tconst now = Date.now();\r\n\r\n\r\n\tconst length = nextQueue.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tnextQueue[i](now);\r\n\t}\r\n\r\n\t$array.shiftLeft(nextQueue, length);\r\n\r\n\r\n\tfor (let i = 0; i < readQueue.length; ++i) {\r\n\t\treadQueue[i](now);\r\n\t}\r\n\r\n\treadQueue.length = 0;\r\n\r\n\r\n\tfor (let i = 0; i < writeQueue.length; ++i) {\r\n\t\twriteQueue[i](now);\r\n\t}\r\n\r\n\twriteQueue.length = 0;\r\n\r\n\r\n\tif (nextQueue.length === 0 && readQueue.length === 0) {\r\n\t\tpendingFrame = false;\r\n\r\n\t} else {\r\n\t\traf(frameLoop);\r\n\t}\r\n}\r\n\r\n/**\r\n * [pendFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nfunction pendFrame(): void {\r\n\tif (!pendingFrame) {\r\n\t\tpendingFrame = true;\r\n\r\n\t\traf(frameLoop);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * [nextFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\r\nexport function nextFrame(fn: Listener): void {\r\n\tnextQueue.push(fn);\r\n\tpendFrame();\r\n}\r\n\r\n/**\r\n * [readFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\r\nexport function readFrame(fn: Listener): void {\r\n\treadQueue.push(fn);\r\n\tpendFrame();\r\n}\r\n\r\n/**\r\n * [writeFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\r\nexport function writeFrame(fn: Listener): void {\r\n\twriteQueue.push(fn);\r\n\tpendFrame();\r\n}\r\n\r\n/**\r\n * [whenIdle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param fn [description]\r\n */\r\nexport function whenIdle(fn: Listener): void {\r\n\tidleQueue.push(fn);\r\n}\r\n\r\n/**\r\n * [triggerIdle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo Maybe don't trigger a callback which was added while in the middle of triggering?\r\n */\r\nexport function triggerIdle(): void {\r\n\tconst now = Date.now();\r\n\r\n\tconst length = idleQueue.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\t(<any>idleQueue.shift())(now);\r\n\t}\r\n}\r\n", "/**\r\n * Event Dispatcher module is used for registering listeners and dispatching\r\n * events across amCharts system.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Disposer, IDisposer } from \"./Disposer\";\r\nimport * as $array from \"./Array\";\r\nimport * as $async from \"./AsyncPending\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Defines a universal type for the event object.\r\n */\r\nexport type AMEvent<Target, T> = {\r\n\t[K in keyof T]: { type: K, target: Target } & T[K];\r\n};\r\n\r\n/**\r\n * A universal interface for event listeners.\r\n */\r\nexport interface EventListener<T> {\r\n\tkilled: boolean;\r\n\tonce: boolean;\r\n\ttype: any;\r\n\tcallback: any;\r\n\tcontext: any;\r\n\tshouldClone: boolean;\r\n\tdispatch: any;\r\n\tdisposer: IDisposer;\r\n}\r\n\r\n/*export interface IEventDispatcher<T> {\r\n\tisDisposed(): boolean;\r\n\tdispose(): void;\r\n\thasListeners(): boolean;\r\n\tenable(): void;\r\n\tdisable(): void;\r\n\tenableType<Key extends keyof T>(type: Key): void;\r\n\tdisableType<Key extends keyof T>(type: Key, amount?: number): void;\r\n\tisEnabled<Key extends keyof T>(type: Key): boolean;\r\n\thas<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean;\r\n\tdispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n\tdispatch<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n\tonAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C): IDisposer;\r\n\ton<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n\tonce<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n\toff<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n\toff<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n\tcopyFrom(source: this): void;\r\n}*/\r\n\r\n/**\r\n * Universal Event Dispatcher.\r\n *\r\n * @important\r\n */\r\nexport class EventDispatcher<T> implements IDisposer {\r\n\r\n\tprotected _listeners: Array<EventListener<T>>;\r\n\tprotected _killed: Array<EventListener<T>>;\r\n\tprotected _disabled: { [key in keyof T]?: number };\r\n\tprotected _iterating: number;\r\n\tprotected _enabled: boolean;\r\n\tprotected _disposed: boolean;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._listeners = [];\r\n\t\tthis._killed = [];\r\n\t\tthis._disabled = {};\r\n\t\tthis._iterating = 0;\r\n\t\tthis._enabled = true;\r\n\t\tthis._disposed = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already disposed.\r\n\t *\r\n\t * @return Disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispose (destroy) this object.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._listeners;\r\n\r\n\t\t\tthis._iterating = 1;\r\n\t\t\tthis._listeners = <any>null;\r\n\t\t\tthis._disabled = <any>null;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t$array.each(a, (x) => {\r\n\t\t\t\t\tx.disposer.dispose();\r\n\t\t\t\t});\r\n\r\n\t\t\t} finally {\r\n\t\t\t\tthis._killed = <any>null;\r\n\t\t\t\tthis._iterating = <any>null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if this particular event dispatcher has any listeners set.\r\n\t *\r\n\t * @return Has listeners?\r\n\t */\r\n\tpublic hasListeners(): boolean {\r\n\t\treturn this._listeners.length !== 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if this particular event dispatcher has any particular listeners set.\r\n\t *\r\n\t * @return Has particular event listeners?\r\n\t */\r\n\tpublic hasListenersByType<Key extends keyof T>(type: Key): boolean {\r\n\t\treturn $array.any(this._listeners, (x) => (x.type === null || x.type === type) && !x.killed);\r\n\t}\r\n\r\n\t/**\r\n\t * Enable dispatching of events if they were previously disabled by\r\n\t * `disable()`.\r\n\t */\r\n\tpublic enable(): void {\r\n\t\tthis._enabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Disable dispatching of events until re-enabled by `enable()`.\r\n\t */\r\n\tpublic disable(): void {\r\n\t\tthis._enabled = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Enable dispatching particular event, if it was disabled before by\r\n\t * `disableType()`.\r\n\t *\r\n\t * @param type Event type\r\n\t */\r\n\tpublic enableType<Key extends keyof T>(type: Key): void {\r\n\t\tdelete this._disabled[type];\r\n\t}\r\n\r\n\t/**\r\n\t * Disable dispatching of events for a certain event type.\r\n\t *\r\n\t * Optionally, can set how many dispatches to skip before automatically\r\n\t * re-enabling the dispatching.\r\n\t *\r\n\t * @param type    Event type\r\n\t * @param amount  Number of event dispatches to skip\r\n\t */\r\n\tpublic disableType<Key extends keyof T>(type: Key, amount: number = Infinity): void {\r\n\t\tthis._disabled[type] = amount;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes listener from dispatcher.\r\n\t *\r\n\t * Will throw an exception if such listener does not exists.\r\n\t *\r\n\t * @param listener Listener to remove\r\n\t */\r\n\tprotected _removeListener(listener: EventListener<T>): void {\r\n\t\tif (this._iterating === 0) {\r\n\t\t\tconst index = this._listeners.indexOf(listener);\r\n\r\n\t\t\tif (index === -1) {\r\n\t\t\t\tthrow new Error(\"Invalid state: could not remove listener\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._listeners.splice(index, 1);\r\n\r\n\t\t} else {\r\n\t\t\tthis._killed.push(listener);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes existing listener by certain parameters.\r\n\t *\r\n\t * @param once         Listener's once setting\r\n\t * @param type         Listener's type\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t */\r\n\tprotected _removeExistingListener<A, B, Key extends keyof T>(once: boolean, type: Key | null, callback?: A, context?: B): void {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\tthis._eachListener((info) => {\r\n\t\t\tif (info.once === once && // TODO is this correct ?\r\n\t\t\t\tinfo.type === type &&\r\n\t\t\t\t(callback == null || info.callback === callback) &&\r\n\t\t\t\tinfo.context === context) {\r\n\t\t\t\tinfo.disposer.dispose();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if dispatching for particular event type is enabled.\r\n\t *\r\n\t * @param type  Event type\r\n\t * @return Enabled?\r\n\t */\r\n\tpublic isEnabled<Key extends keyof T>(type: Key): boolean {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\t// TODO is this check correct ?\r\n\t\treturn this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] == null;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's already a listener with specific parameters.\r\n\t *\r\n\t * @param type      Listener's type\r\n\t * @param callback  Callback function\r\n\t * @param context   Callback context\r\n\t * @return Has listener?\r\n\t */\r\n\tpublic has<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean {\r\n\t\tconst index = $array.findIndex(this._listeners, (info) => {\r\n\t\t\treturn info.once !== true && // Ignoring \"once\" listeners\r\n\t\t\t\tinfo.type === type &&\r\n\t\t\t\t(callback == null || info.callback === callback) &&\r\n\t\t\t\tinfo.context === context;\r\n\t\t});\r\n\r\n\t\treturn index !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether event of the particular type should be dispatched.\r\n\t *\r\n\t * @param type  Event type\r\n\t * @return Dispatch?\r\n\t */\r\n\tprotected _shouldDispatch<Key extends keyof T>(type: Key): boolean {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\tconst count = this._disabled[type];\r\n\r\n\t\tif (!$type.isNumber(count)) {\r\n\t\t\treturn this._enabled;\r\n\r\n\t\t} else {\r\n\t\t\tif (count <= 1) {\r\n\t\t\t\tdelete this._disabled[type];\r\n\r\n\t\t\t} else {\r\n\t\t\t\t--this._disabled[type];\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [_eachListener description]\r\n\t *\r\n\t * All of this extra code is needed when a listener is removed while iterating\r\n\t *\r\n\t * @todo Description\r\n\t * @param fn [description]\r\n\t */\r\n\tprotected _eachListener(fn: (listener: EventListener<T>) => void): void {\r\n\t\t++this._iterating;\r\n\r\n\t\ttry {\r\n\t\t\t$array.each(this._listeners, fn);\r\n\r\n\t\t} finally {\r\n\t\t\t--this._iterating;\r\n\r\n\t\t\t// TODO should this be inside or outside the finally ?\r\n\t\t\tif (this._iterating === 0 && this._killed.length !== 0) {\r\n\t\t\t\t// Remove killed listeners\r\n\t\t\t\t$array.each(this._killed, (killed) => {\r\n\t\t\t\t\tthis._removeListener(killed);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._killed.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches an event immediately without waiting for next cycle.\r\n\t *\r\n\t * @param type   Event type\r\n\t * @param event  Event object\r\n\t * @todo automatically add in type and target properties if they are missing\r\n\t */\r\n\tpublic dispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void {\r\n\t\tif (this._shouldDispatch(type)) {\r\n\t\t\t// TODO check if it's faster to use an object of listeners rather than a single big array\r\n\t\t\t// TODO if the function throws, maybe it should keep going ?\r\n\t\t\tthis._eachListener((listener) => {\r\n\t\t\t\tif (!listener.killed && (listener.type === null || listener.type === type)) {\r\n\t\t\t\t\tlistener.dispatch(type, event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shelves the event to be dispatched within next update cycle.\r\n\t *\r\n\t * @param type   Event type\r\n\t * @param event  Event object\r\n\t * @todo automatically add in type and target properties if they are missing\r\n\t */\r\n\tpublic dispatch<Key extends keyof T>(type: Key, event: T[Key]): void {\r\n\t\tif (this._shouldDispatch(type)) {\r\n\t\t\tthis._eachListener((listener) => {\r\n\t\t\t\t// TODO check if it's faster to use an object of listeners rather than a single big array\r\n\t\t\t\tif (!listener.killed && (listener.type === null || listener.type === type)) {\r\n\t\t\t\t\t// TODO if the function throws, maybe it should keep going ?\r\n\t\t\t\t\t// TODO dispatch during the update cycle, rather than using whenIdle\r\n\t\t\t\t\t$async.whenIdle(() => {\r\n\t\t\t\t\t\tif (!listener.killed) {\r\n\t\t\t\t\t\t\tlistener.dispatch(type, event);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates, catalogs and returns an [[EventListener]].\r\n\t *\r\n\t * Event listener can be disposed.\r\n\t *\r\n\t * @param once         Listener's once setting\r\n\t * @param type         Listener's type\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n\t * @param dispatch\r\n\t * @returns An event listener\r\n\t */\r\n\tprotected _on<A, B, Key extends keyof T>(once: boolean, type: Key | null, callback: A, context: B, shouldClone: boolean, dispatch: (type: Key, event: T[Key]) => void): EventListener<T> {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\tthis._removeExistingListener(once, type, callback, context);\r\n\r\n\t\tconst info: EventListener<T> = {\r\n\t\t\ttype: type,\r\n\t\t\tcallback: callback,\r\n\t\t\tcontext: context,\r\n\t\t\tshouldClone: shouldClone,\r\n\t\t\tdispatch: <any>dispatch,\r\n\t\t\tkilled: false,\r\n\t\t\tonce: once,\r\n\t\t\tdisposer: new Disposer(() => {\r\n\t\t\t\tinfo.killed = true;\r\n\t\t\t\tthis._removeListener(info);\r\n\t\t\t})\r\n\t\t};\r\n\r\n\t\tthis._listeners.push(info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an event listener to be invoked on **any** event.\r\n\t *\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n\t * @returns A disposable event listener\r\n\t * @todo what if `listen` is called on the same function twice ?\r\n\t */\r\n\tpublic onAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C, shouldClone: boolean = true): IDisposer {\r\n\t\treturn this._on(false, null, callback, context, shouldClone, (type, event) => callback.call(context, type, event)).disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an event listener to be invoked on a specific event type.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.events.on(\"hidden\", (ev) => {\r\n\t *   console.log(\"Series hidden: \" + ev.target.name);\r\n\t * }, this);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.events.on(\"hidden\", function(ev) {\r\n\t *   console.log(\"Series hidden: \" + ev.target.name);\r\n\t * }, this);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"events\": {\r\n\t *     \t\"hidden\": function(ev) {\r\n\t *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n\t *     \t}\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will invoke our custom event handler whenever series we put\r\n\t * event on is hidden.\r\n\t *\r\n\t * @param type         Listener's type\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n\t * @returns A disposable event listener\r\n\t * @todo what if `listen` is called on the same function twice ?\r\n\t */\r\n\tpublic on<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C, shouldClone: boolean = true): IDisposer {\r\n\t\treturn this._on(false, type, callback, context, shouldClone, (type, event) => callback.call(context, event)).disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an event listener to be invoked on a specific event type once.\r\n\t *\r\n\t * Once the event listener is invoked, it is automatically disposed.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.events.on(\"hidden\", (ev) => {\r\n\t *   console.log(\"Series hidden: \" + ev.target.name);\r\n\t * }, this);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.events.on(\"hidden\", function(ev) {\r\n\t *   console.log(\"Series hidden: \" + ev.target.name);\r\n\t * }, this);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"events\": {\r\n\t *     \t\"hidden\": function(ev) {\r\n\t *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n\t *     \t}\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will invoke our custom event handler the first time series we\r\n\t * put event on is hidden.\r\n\t *\r\n\t * @param type         Listener's type\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n\t * @returns A disposable event listener\r\n\t * @todo what if `listen` is called on the same function twice ?\r\n\t */\r\n\tpublic once<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C, shouldClone: boolean = true): IDisposer {\r\n\t\tconst x = this._on(true, type, callback, context, shouldClone, (type, event) => {\r\n\t\t\tx.disposer.dispose();\r\n\t\t\tcallback.call(context, event)\r\n\t\t});\r\n\r\n\t\t// TODO maybe this should return a different Disposer ?\r\n\t\treturn x.disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the event listener with specific parameters.\r\n\t *\r\n\t * @param type         Listener's type\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t */\r\n\tpublic off<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): void {\r\n\t\tthis._removeExistingListener(false, type, callback, context);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all dispatcher parameters, including listeners, from another event\r\n\t * dispatcher.\r\n\t *\r\n\t * @param source Source event dispatcher\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\tif (source === this) {\r\n\t\t\tthrow new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\r\n\t\t}\r\n\r\n\t\t$array.each(source._listeners, (x) => {\r\n\t\t\t// TODO is this correct ?\r\n\t\t\tif (!x.killed && x.shouldClone) {\r\n\t\t\t\tif (x.type === null) {\r\n\t\t\t\t\tthis.onAll(x.callback, x.context);\r\n\r\n\t\t\t\t} else if (x.once) {\r\n\t\t\t\t\tthis.once(x.type, x.callback, x.context);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.on(x.type, x.callback, x.context);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A version of the [[EventDispatcher]] that dispatches events for a specific\r\n * target object.\r\n *\r\n * @important\r\n */\r\nexport class TargetedEventDispatcher<Target, T> extends EventDispatcher<T> {\r\n\r\n\t/**\r\n\t * A target object which is originating events using this dispatcher.\r\n\t */\r\n\tpublic target: Target;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param target Event dispatcher target\r\n\t */\r\n\tconstructor(target: Target) {\r\n\t\tsuper();\r\n\t\tthis.target = target;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all dispatcher parameters, including listeners, from another event\r\n\t * dispatcher.\r\n\t *\r\n\t * @param source Source event dispatcher\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\tif (source === this) {\r\n\t\t\tthrow new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\r\n\t\t}\r\n\r\n\t\t$array.each(source._listeners, (x) => {\r\n\t\t\t// TODO very hacky\r\n\t\t\tif (x.context === source.target) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// TODO is this correct ?\r\n\t\t\tif (!x.killed && x.shouldClone) {\r\n\t\t\t\tif (x.type === null) {\r\n\t\t\t\t\tthis.onAll(x.callback, x.context);\r\n\r\n\t\t\t\t} else if (x.once) {\r\n\t\t\t\t\tthis.once(x.type, x.callback, x.context);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.on(x.type, x.callback, x.context);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\nimport { Ordering } from \"./Order\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\r\nexport function entries<Object>(object: Object): $iter.Iterator<[$type.Keyof<Object>, Object[$type.Keyof<Object>]]> {\r\n\treturn (push) => {\r\n\t\t// TODO make this more efficient ?\r\n\t\tfor (let key in object) {\r\n\t\t\tif (hasKey(object, key)) {\r\n\t\t\t\tif (!push([key as $type.Keyof<Object>, object[key] as Object[$type.Keyof<Object>]])) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\r\nexport function keys<Object>(object: Object): Array<$type.Keyof<Object>> {\r\n\tconst output = [];\r\n\r\n\tfor (let key in object) {\r\n\t\tif (hasKey(object, key)) {\r\n\t\t\toutput.push(key as $type.Keyof<Object>);\r\n\t\t}\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\r\nexport function keysOrdered<Object>(object: Object, order: (a: $type.Keyof<Object>, b: $type.Keyof<Object>) => Ordering): Array<$type.Keyof<Object>> {\r\n\treturn keys(object).sort(order);\r\n}\r\n\r\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\r\nexport function hasKey<Object, Key extends keyof Object>(object: Object, key: Key): boolean {\r\n\treturn {}.hasOwnProperty.call(object, key);\r\n}\r\n\r\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\r\nexport function getKey<Object, Key extends keyof Object>(object: Object, key: Key): Object[Key] {\r\n\treturn object[key];\r\n}\r\n\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function eachContinue<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => boolean): void {\r\n\tfor (let key in object) {\r\n\t\tif (hasKey(object, key)) {\r\n\t\t\tif (!fn(key as $type.Keyof<Object>, object[key] as Object[$type.Keyof<Object>])) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function each<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => void): void {\r\n\teachContinue(object, (key, value) => {\r\n\t\tfn(key, value);\r\n\t\treturn true;\r\n\t});\r\n}\r\n\r\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\r\nexport function eachOrdered<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => void, ord: (a: $type.Keyof<Object>, b: $type.Keyof<Object>) => Ordering): void {\r\n\t$array.each(keysOrdered(object, ord), (key) => {\r\n\t\tfn(key, object[key]);\r\n\t});\r\n}\r\n\r\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\r\nexport function copy<Object>(object: Object): Object {\r\n\treturn Object.assign({}, object);\r\n}\r\n\r\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\r\nexport function merge<Object1, Object2>(object1: Object1, object2: Object2): Object1 & Object2 {\r\n\treturn Object.assign({}, object1, object2);\r\n}\r\n\r\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\r\nexport function clone<Object>(object: Object): Object {\r\n\treturn JSON.parse(JSON.stringify(object));\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function copyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\tif ($type.hasValue(source[key])) {\r\n\t\t\ttarget[key] = source[key];\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function softCopyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\tif ($type.hasValue(source[key]) && !($type.hasValue((<any>target)[key]))) {\r\n\t\t\ttarget[key] = source[key];\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function forceCopyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\ttarget[key] = source[key];\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\r\nexport function copyAllProperties(from: { [key: string]: any }, to: { [key: string]: any }): void {\r\n\tcopyProperties(from, to, keys(from));\r\n}\r\n", "/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { IClone } from \"./Clone\";\nimport { Ordering } from \"./Order\";\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n\n\n/**\n * ============================================================================\n * UTILITY FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface Iterator<A> {\n\t(push: (value: A) => boolean): void;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface Iterable<A> {\n\titerator(): Iterator<A>;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function fromArray<A>(array: Array<A>): Iterator<A> {\n\treturn (push) => {\n\t\tconst length = array.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\tif (!push(array[i])) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function length<A>(iter: Iterator<A>): number {\n\tlet sum = 0;\n\n\titer((_) => {\n\t\t++sum;\n\t\treturn true;\n\t});\n\n\treturn sum;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function toArray<A>(iter: Iterator<A>): Array<A> {\n\tconst output: Array<A> = [];\n\n\titer((value) => {\n\t\toutput.push(value);\n\t\treturn true;\n\t});\n\n\treturn output;\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function eachContinue<A>(iter: Iterator<A>, fn: (value: A) => boolean): void {\n\titer(fn);\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function each<A>(iter: Iterator<A>, fn: (value: A) => void): void {\n\titer((value) => {\n\t\tfn(value);\n\t\treturn true;\n\t});\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function sort<A>(iter: Iterator<A>, fn: (left: A, right: A) => Ordering): Iterator<A> {\n\treturn fromArray(toArray(iter).sort(fn));\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function map<A, B>(iter: Iterator<A>, fn: (value: A) => B): Iterator<B> {\n\treturn (push) => iter((value) => push(fn(value)));\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function filter<A>(iter: Iterator<A>, fn: (value: A) => boolean): Iterator<A> {\n\treturn (push) => iter((value) => {\n\t\tif (fn(value)) {\n\t\t\treturn push(value);\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function concat<A>(...args: Array<Iterator<A>>): Iterator<A> {\n\treturn (push) => {\n\t\tlet go = true;\n\n\t\tconst push2 = (value: A) => (go = push(value));\n\n\t\tconst length = args.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\targs[i](push2);\n\n\t\t\tif (!go) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function flatten<A>(iter: Iterator<Iterator<A>>): Iterator<A> {\n\treturn (push) => {\n\t\tlet go = true;\n\n\t\tconst push2 = (value: A) => (go = push(value));\n\n\t\titer((value) => {\n\t\t\tvalue(push2);\n\t\t\treturn go;\n\t\t});\n\t};\n}\n\n/**\n * [number description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function indexed<A>(iter: Iterator<A>): Iterator<[number, A]> {\n\treturn (push) => {\n\t\tlet index = 0;\n\n\t\titer((value) => push([index++, value]));\n\t};\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function findIndex<A>(iter: Iterator<A>, matches: (value: A) => boolean): number {\n\tlet found = false;\n\tlet i = 0;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\tfound = true;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\t++i;\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn (found ? i : -1);\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function find<A>(iter: Iterator<A>, matches: (value: A) => boolean): A | undefined {\n\tlet output;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\toutput = value;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function findMap<A, B>(iter: Iterator<A>, matches: (value: A) => B | null): B | undefined {\n\tlet output;\n\n\titer((value) => {\n\t\tconst v = matches(value);\n\n\t\tif (v !== null) {\n\t\t\toutput = v;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function contains<A>(iter: Iterator<A>, matches: (value: A) => boolean): boolean {\n\tlet output = false;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\toutput = true;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function foldl<A, B>(iter: Iterator<A>, init: B, fn: (state: B, value: A) => B): B {\n\titer((value) => {\n\t\tinit = fn(init, value);\n\t\treturn true;\n\t});\n\n\treturn init;\n}\n\n/**\n * [min2 description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param left [description]\n * @param right [description]\n * @return [description]\n */\nfunction min2(left: number | null, right: number): number {\n\tif (left == null || right < left) {\n\t\treturn right;\n\n\t} else {\n\t\treturn left;\n\t}\n}\n\n/**\n * [min description]\n *\n * @ignore Exclude from docs\n * @todo Verify that this works correctly\n * @todo Description\n * @param a [description]\n * @return [description]\n */\nexport function min(a: Iterator<number>): number | null {\n\treturn foldl(a, null, min2);\n}\n\n/**\n * [max2 description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param left [description]\n * @param right [description]\n * @return [description]\n */\nfunction max2(left: number | null, right: number): number {\n\tif (left == null || right > left) {\n\t\treturn right;\n\n\t} else {\n\t\treturn left;\n\t}\n}\n\n/**\n * [max description]\n *\n * @ignore Exclude from docs\n * @todo Verify that this works correctly\n * @todo Description\n * @param a [description]\n * @return [description]\n */\nexport function max(a: Iterator<number>): number | null {\n\treturn foldl(a, null, max2);\n}\n\n\n/**\n * [join description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param iter [description]\n * @param separator [description]\n * @return [description]\n */\nexport function join(iter: Iterator<string>, separator: string = \"\"): string {\n\tlet first = true;\n\tlet init = \"\";\n\n\titer((value) => {\n\t\tif (first) {\n\t\t\tfirst = false;\n\n\t\t} else {\n\t\t\tinit += separator;\n\t\t}\n\n\t\tinit += value;\n\n\t\treturn true;\n\t});\n\n\treturn init;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class ListIterator<T extends IClone<T>> {\n\tprivate _listCopy!: Array<T>;\n\tprivate _create: () => T;\n\n\tpublic list: Iterable<T>;\n\n\t// flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list\n\tpublic createNewItems: boolean = false;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param list [description]\n\t * @param create [description]\n\t */\n\tconstructor(list: Iterable<T>, create: () => T) {\n\t\tthis.list = list;\n\t\tthis._create = create;\n\t\tthis.reset();\n\t}\n\n\treset() {\n\t\tthis._listCopy = toArray(this.list.iterator());\n\t}\n\n\tclear() {\n\t\tthis._listCopy.length = 0;\n\t}\n\n\tgetFirst(): $type.Optional<T> {\n\t\treturn this.returnItem(0);\n\t}\n\n\tgetLast(): $type.Optional<T> {\n\t\treturn this.returnItem(this._listCopy.length - 1);\n\t}\n\n\tfind(fn: (value: T) => boolean): $type.Optional<T> {\n\t\tlet index: number = $array.findIndex(this._listCopy, fn);\n\n\t\tif (index !== -1) {\n\t\t\tlet item = this._listCopy[index];\n\t\t\t// TODO use removeIndex instead ?\n\t\t\t$array.remove(this._listCopy, item);\n\t\t\treturn item;\n\n\t\t} else {\n\t\t\treturn this.getLast();\n\t\t}\n\t}\n\n\tremoveItem(item: T): boolean {\n\t\treturn $array.remove(this._listCopy, item);\n\t}\n\n\tprotected returnItem(index: number): $type.Optional<T> {\n\t\tif (index >= 0 && index < this._listCopy.length) {\n\t\t\tlet item = this._listCopy[index];\n\t\t\t// TODO use removeIndex instead ?\n\t\t\t$array.remove(this._listCopy, item);\n\t\t\treturn item;\n\n\t\t} else if (this.createNewItems) {\n\t\t\treturn this._create();\n\t\t}\n\t}\n\n\titerator() {\n\t\treturn fromArray(this._listCopy);\n\t}\n}\n", "/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Ordering } from \"./Order\";\n\n\n/**\n * ============================================================================\n * COMPARING FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Comparing function used for ordering.\n *\n * @ignore Exclude from docs\n * @todo Use localeCompare\n * @param a  Item 1\n * @param b  Item 2\n * @return Result\n */\nexport function order(a: string, b: string): Ordering {\n\tif (a === b) {\n\t\treturn 0;\n\n\t} else if (a < b) {\n\t\treturn -1;\n\n\t} else {\n\t\treturn 1;\n\t}\n}\n\n\n/**\n * ============================================================================\n * OTHER FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Repeats a `string` number of times as set in `amount`.\n *\n * @ignore Exclude from docs\n * @todo Make this faster\n * @param string  Source string\n * @param amount  Number of times to repeat string\n * @return New string\n */\nexport function repeat(string: string, amount: number): string {\n\treturn new Array(amount + 1).join(string);\n}\n\n/**\n * Generates a random string `characters` length.\n *\n * @param chars  Number of characters\n * @return Random string\n */\nexport function random(chars: number): string {\n\tlet res = \"\";\n\tlet choice = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\tfor (let i = 0; i < chars; i++) {\n\t\tres += choice.charAt(Math.floor(Math.random() * choice.length));\n\t}\n\treturn res;\n}\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IDisposer, Disposer } from \"./Disposer\";\r\nimport { EventDispatcher, AMEvent } from \"./EventDispatcher\";\r\nimport { Optional } from \"./Type\";\r\nimport { IClone } from \"./Clone\";\r\nimport * as $object from \"./Object\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $string from \"./String\";\r\n\r\n/**\r\n * Defines events from [[Dictionary]].\r\n */\r\nexport interface IDictionaryEvents<Key, Value> {\r\n\r\n\t/**\r\n\t * Invoked when an item is removed from the dictionary.\r\n\t */\r\n\tremoved: {\r\n\r\n\t\t/**\r\n\t\t * Removed value.\r\n\t\t */\r\n\t\toldValue: Value;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when dictionary is cleared.\r\n\t */\r\n\tcleared: {};\r\n\r\n\t/**\r\n\t * Invoked when `insertKey()` method is called.\r\n\t */\r\n\tinsertKey: {\r\n\r\n\t\t/**\r\n\t\t * Key.\r\n\t\t */\r\n\t\tkey: Key;\r\n\r\n\t\t/**\r\n\t\t * Added value.\r\n\t\t */\r\n\t\tnewValue: Value;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `setKey()` method is called.\r\n\t */\r\n\tsetKey: {\r\n\r\n\t\t/**\r\n\t\t * Key.\r\n\t\t */\r\n\t\tkey: Key;\r\n\r\n\t\t/**\r\n\t\t * Removed value. (if overwriting)\r\n\t\t */\r\n\t\toldValue: Value;\r\n\r\n\t\t/**\r\n\t\t * Added value.\r\n\t\t */\r\n\t\tnewValue: Value;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `removeKey()` method is called.\r\n\t */\r\n\tremoveKey: {\r\n\r\n\t\t/**\r\n\t\t * Key.\r\n\t\t */\r\n\t\tkey: Key;\r\n\r\n\t\t/**\r\n\t\t * Removed value.\r\n\t\t */\r\n\t\toldValue: Value;\r\n\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * [K description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Descirption\r\n */\r\nexport type DictionaryLike<K, A> = $iter.Iterable<[K, A]> & {\r\n\tevents: EventDispatcher<{ removed: { oldValue: A } }>;\r\n};\r\n\r\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\r\nexport class DictionaryDisposer<K, A extends IDisposer> extends Disposer {\r\n\tconstructor(dict: DictionaryLike<K, A>) {\r\n\t\tconst disposer = dict.events.on(\"removed\", (x) => {\r\n\t\t\tx.oldValue.dispose();\r\n\t\t}, undefined, false);\r\n\r\n\t\tsuper(() => {\r\n\t\t\tdisposer.dispose();\r\n\r\n\t\t\t// TODO clear the dictionary ?\r\n\t\t\t$iter.each(dict.iterator(), (a) => {\r\n\t\t\t\tconst v = a[1];\r\n\t\t\t\tv.dispose();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\r\nexport class Dictionary<Key extends string, T> {\r\n\r\n\t/**\r\n\t * Key/value pairs\r\n\t */\r\n\tprivate _dictionary: { [key in Key]?: T };\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<Dictionary<Key, T>, IDictionaryEvents<Key, T>>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._dictionary = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if key exists in Dictionary.\r\n\t *\r\n\t * @param key  The key to search for\r\n\t * @return `true` if key exists, `false` if it doesn't\r\n\t */\r\n\tpublic hasKey(key: Key): boolean {\r\n\t\treturn $object.hasKey(this._dictionary, key);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value for a specific key.\r\n\t *\r\n\t * @param key  The key to search for\r\n\t * @return Value for the key, or `undefined` if it doesn't exist\r\n\t */\r\n\tpublic getKey(key: Key): Optional<T> {\r\n\t\treturn this._dictionary[key];\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts value at specific key.\r\n\t *\r\n\t * Will thrown an exception if the key already exists in the dictionary.\r\n\t *\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t */\r\n\tpublic insertKey(key: Key, value: T): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tthrow new Error(\"Key \" + key + \" already exists in dictionary\");\r\n\r\n\t\t} else {\r\n\t\t\tthis._dictionary[key] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"insertKey\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"insertKey\", {\r\n\t\t\t\t\ttype: \"insertKey\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds or updates key/value into dictionary.\r\n\t *\r\n\t * If the key already exists, the old value will be overwritten.\r\n\t *\r\n\t * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n\t *\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t */\r\n\tpublic setKey(key: Key, value: T): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tconst oldValue = this._dictionary[key];\r\n\r\n\t\t\tif (oldValue !== value) {\r\n\t\t\t\tthis._dictionary[key] = value;\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"setKey\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"setKey\", {\r\n\t\t\t\t\t\ttype: \"setKey\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tkey: key,\r\n\t\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t\t\tnewValue: value\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tthis._dictionary[key] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"insertKey\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"insertKey\", {\r\n\t\t\t\t\ttype: \"insertKey\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the value at specific `key` using custom function.\r\n\t *\r\n\t * Passes in current value into the function, and uses its output as a new\r\n\t * value.\r\n\t *\r\n\t * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key  Key\r\n\t * @param fn   Function to transform the value\r\n\t */\r\n\tpublic updateKey(key: Key, fn: (value: T) => T): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tconst oldValue = this._dictionary[key];\r\n\t\t\tconst newValue = fn(oldValue);\r\n\r\n\t\t\tif (oldValue !== newValue) {\r\n\t\t\t\tthis._dictionary[key] = newValue;\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"setKey\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"setKey\", {\r\n\t\t\t\t\t\ttype: \"setKey\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tkey: key,\r\n\t\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t\t\tnewValue: newValue\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Key \" + key + \" doesn't exist in dictionary\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes value at specific `key` from dictionary.\r\n\t *\r\n\t * @param key  Key to remove\r\n\t */\r\n\tpublic removeKey(key: Key): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tconst oldValue = this._dictionary[key];\r\n\r\n\t\t\tdelete this._dictionary[key];\r\n\r\n\t\t\tif (this.events.isEnabled(\"removeKey\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removeKey\", {\r\n\t\t\t\t\ttype: \"removeKey\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [insertKeyIfEmpty description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo description\r\n\t * @param key      [description]\r\n\t * @param ifEmpty  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic insertKeyIfEmpty(key: Key, ifEmpty: () => T): T {\r\n\t\tif (!this.hasKey(key)) {\r\n\t\t\tthis.insertKey(key, ifEmpty());\r\n\t\t}\r\n\r\n\t\treturn <T>this.getKey(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all items from the dictionary.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\t// TODO dispatch this after clear\r\n\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t$object.each(this._dictionary, (key, value) => {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: value\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis._dictionary = {};\r\n\r\n\t\tif (this.events.isEnabled(\"cleared\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"cleared\", {\r\n\t\t\t\ttype: \"cleared\",\r\n\t\t\t\ttarget: this\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies items from another Dictionary.\r\n\t *\r\n\t * @param source  A Dictionary to copy items from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (a) => {\r\n\t\t\t// TODO fix this type cast\r\n\t\t\tthis.setKey(<Key>a[0], a[1]);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an interator that can be used to iterate through all items in\r\n\t * the dictionary.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<[Key, T]> {\r\n\t\t// @todo fix this type after the Iterator bug is fixed\r\n\t\t// https://github.com/Microsoft/TypeScript/issues/16730\r\n\t\treturn <$iter.Iterator<[Key, T]>>$object.entries(this._dictionary);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an ES6 iterator for the keys/values of the dictionary.\r\n\t */\r\n\tpublic *[Symbol.iterator](): Iterator<[Key, T]> {\r\n\t\t// TODO make this more efficient ?\r\n\t\tfor (let key in this._dictionary) {\r\n\t\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\t\tyield [<Key>key, this._dictionary[key]];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calls `f` for each key/value in the dictionary.\r\n\t */\r\n\tpublic each(f: (key: Key, value: T) => void): void {\r\n\t\t$iter.each(this.iterator(), ([key, value]) => f(key, value));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an iterator that can be used to iterate through all items in\r\n\t * the dictionary, ordered by key.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Iterator\r\n\t */\r\n\tpublic sortedIterator(): $iter.Iterator<[Key, T]> {\r\n\t\treturn $iter.sort(this.iterator(), (x, y) => $string.order(x[0], y[0]));\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class DictionaryTemplate<Key extends string, T extends IClone<T> & { isTemplate: boolean }> extends Dictionary<Key, T> {\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t Template object\r\n\t */\r\n\tpublic constructor(t: T) {\r\n\t\tsuper();\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other dictionary.\r\n\t *\r\n\t * @param source  Source dictionary\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (a) => {\r\n\t\t\t// TODO fix this type cast\r\n\t\t\t// TODO why does this need to clone ?\r\n\t\t\tthis.setKey(<Key>a[0], a[1].clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to specified\r\n\t * `key` in the dictionary, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create(key: Key): T {\r\n\t\treturn this.insertKeyIfEmpty(key, () => this.template.clone());\r\n\t}\r\n\r\n}\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Dictionary } from \"./Dictionary\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an interface for cache items.\r\n */\r\ninterface CacheItem<A> {\r\n\r\n\t/**\r\n\t * A timestamp of when the item was created/updated.\r\n\t */\r\n\t\"touched\": number,\r\n\r\n\t/**\r\n\t * TTL (time to live) in milliseconds.\r\n\t */\r\n\t\"ttl\"?: number,\r\n\r\n\t/**\r\n\t * Cached value.\r\n\t */\r\n\t\"value\": A,\r\n\r\n\t/**\r\n\t * Is this item expired?\r\n\t *\r\n\t * @todo a system process that would check chace element TTLs and expire them\r\n\t */\r\n\t\"expired\"?: boolean\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents object cache.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better storage\r\n * @todo TTL logging\r\n * @todo Garbage collector\r\n */\r\nexport class Cache<A> {\r\n\r\n\t/**\r\n\t * Storage for cache items.\r\n\t */\r\n\tprivate _storage = new Dictionary<string, Dictionary<string, CacheItem<A>>>();\r\n\r\n\t/**\r\n\t * Default TTL in milliseconds.\r\n\t */\r\n\tpublic ttl: number = 1000;\r\n\r\n\t/**\r\n\t * Caches or updates cached value, resets TTL.\r\n\t *\r\n\t * If `ttl` is set to zero, item will never expire.\r\n\t *\r\n\t * @param owner  An id of the object that owns this cache\r\n\t * @param key    Index key\r\n\t * @param value  Value\r\n\t * @param ttl    TTL of the cache to live in milliseconds\r\n\t */\r\n\tpublic set(owner: string, key: string, value: A, ttl?: number): void {\r\n\r\n\t\t// Create if storage does not exist for this owner\r\n\t\tlet ownerStorage = this._storage.insertKeyIfEmpty(owner, () => new Dictionary<string, CacheItem<A>>());\r\n\r\n\t\t// Create cache item\r\n\t\tlet item: CacheItem<A> = {\r\n\t\t\t\"touched\": new Date().getTime(),\r\n\t\t\t\"ttl\": $type.isNumber(ttl) ? ttl : this.ttl,\r\n\t\t\t\"value\": value\r\n\t\t};\r\n\r\n\t\t// Set\r\n\t\townerStorage.setKey(key, item);\r\n\t}\r\n\r\n\t/**\r\n\t * Rerturns cached item, respecting TTL.\r\n\t *\r\n\t * @param owner  An id of the object that owns this cache\r\n\t * @param key    Index key\r\n\t * @param value  Value to return if cache not available\r\n\t * @return Value, or `undefined` if not set\r\n\t */\r\n\tpublic get(owner: string, key: string, value: any = undefined): $type.Optional<A> {\r\n\t\t// \t\t || ypeof this._storage[owner][key] === \"undefined\" || this._storage[owner][key].expired === true) {\r\n\t\tif (this._storage.hasKey(owner)) {\r\n\t\t\tlet ownerStorage = <Dictionary<string, CacheItem<A>>>this._storage.getKey(owner);\r\n\r\n\t\t\tif (ownerStorage.hasKey(key)) {\r\n\t\t\t\tlet cacheItem: CacheItem<A> = <CacheItem<A>>ownerStorage.getKey(key);\r\n\t\t\t\tif (cacheItem.ttl && ((cacheItem.touched + cacheItem.ttl) < new Date().getTime())) {\r\n\t\t\t\t\tcacheItem.expired = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (cacheItem.expired) {\r\n\t\t\t\t\townerStorage.removeKey(key);\r\n\t\t\t\t\treturn value;\r\n\t\t\t\t}\r\n\t\t\t\treturn cacheItem.value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clears cache for specific owner or everything.\r\n\t *\r\n\t * @param owner Owner to clear cache for\r\n\t */\r\n\tpublic clear(owner?: string): void {\r\n\t\tif (owner) {\r\n\t\t\tthis._storage.removeKey(owner);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._storage.clear();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * GLOBAL INSTANCE\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A global instance of cache. Use this instance to cache any values.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport let cache: Cache<any> = new Cache();\r\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ITheme } from \"../themes/ITheme\";\r\nimport { EventDispatcher, AMEvent } from \"./utils/EventDispatcher\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { Container } from \"./Container\";\r\nimport { Component } from \"./Component\";\r\nimport { cache } from \"./utils/Cache\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $string from \"./utils/String\";\r\nimport * as $array from \"./utils/Array\";\r\n\r\n\r\n/**\r\n * Define events available for [[Registry]]\r\n */\r\nexport interface IRegistryEvents {\r\n\r\n\t/**\r\n\t * Invoked when update cycle starts. Before invalid elements are re-validated.\r\n\t */\r\n\tenterframe: {};\r\n\r\n\t/**\r\n\t * Invoked when udpate cycle ends. After invalid elements have been\r\n\t * re-validated.\r\n\t */\r\n\texitframe: {};\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Registry is used to store miscellaneous system-wide information, like ids,\r\n * maps, themes, and registered classes.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class Registry {\r\n\r\n\t/**\r\n\t * Unique ID of the object.\r\n\t */\r\n\tpublic uid: string;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<Registry, IRegistryEvents>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Holds a universal mapping collection, so that elements and their children\r\n\t * can create and look up all kinds of relations between id and object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _map: $type.Optional<Dictionary<string, any>>;\r\n\r\n\t/**\r\n\t * All currently applied themes. All new chart instances created will\r\n\t * automatically inherit and retain System's themes.\r\n\t */\r\n\tpublic themes: ITheme[] = [];\r\n\r\n\t/**\r\n\t * List of all loaded available themes.\r\n\t *\r\n\t * Whenever a theme loads, it registers itself in System's `loadedThemes`\r\n\t * collection.\r\n\t */\r\n\tpublic loadedThemes: { [index: string]: ITheme } = {};\r\n\r\n\t/**\r\n\t * An indeternal counter used to generate unique IDs.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _uidCount: number = 0;\r\n\r\n\t/**\r\n\t * Keeps register of class references so that they can be instnatiated using\r\n\t * string key.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic registeredClasses: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * Holds all generated placeholders.\r\n\t */\r\n\tprotected _placeholders: { [index: string]: string } = {};\r\n\r\n\t/**\r\n\t * A list of invalid(ated) [[Sprite]] objects that need to be re-validated\r\n\t * during next cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidSprites: { [index: string]: Array<Sprite> } = {};\r\n\r\n\t/**\r\n\t * Components are added to this list when their data provider changes to\r\n\t * a new one or data is added/removed from their data provider.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidDatas: { [index: string]: Array<Component> } = {};\r\n\r\n\t/**\r\n\t * Components are added to this list when values of their raw data change.\r\n\t * Used when we want a smooth animation from one set of values to another.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidRawDatas: Array<Component> = [];\r\n\r\n\t/**\r\n\t * Components are added to this list when values of their data changes\r\n\t * (but not data provider itself).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidDataItems: Array<Component> = [];\r\n\r\n\t/**\r\n\t * Components are added to this list when their data range (selection) is\r\n\t * changed, e.g. zoomed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidDataRange: Array<Component> = [];\r\n\r\n\t/**\r\n\t * A list of [[Sprite]] objects that have invalid(ated) positions, that need\r\n\t * to be recalculated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidPositions: { [index: string]: Array<Sprite> } = {};\r\n\r\n\t/**\r\n\t * A list of [[Container]] objects with invalid(ated) layouts.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidLayouts: { [index: string]: Array<Container> } = {};\r\n\r\n\t/**\r\n\t * An array holding all active (non-disposed) top level elemens.\r\n\t *\r\n\t * When, for example, a new chart is created, its instance will be added to\r\n\t * this array, and will be removed when the chart is disposed.\r\n\t */\r\n\tpublic baseSprites: Array<Sprite> = [];\r\n\r\n\t/**\r\n\t * An UID-based map of base sprites (top-level charts).\r\n\t */\r\n\tpublic baseSpritesByUid: { [index: string]: Sprite } = {};\r\n\r\n\t/**\r\n\t * Queued charts (waiting for their turn) to initialize.\r\n\t * \r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Daisy_chaining_multiple_charts} for more information\r\n\t */\r\n\tpublic queue: Array<Sprite> = [];\r\n\r\n\t/**\r\n\t * An array of deferred charts that haven't been created yet.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Deferred_daisy_chained_instantiation} for more information\r\n\t * @since 4.10.0\r\n\t */\r\n\tpublic deferred: Array<{\r\n\t\tcallback: (...args: Array<any>) => Sprite,\r\n\t\tscope?: any,\r\n\t\targs?: Array<any>,\r\n\t\tresolve: any\r\n\t}> = [];\r\n\r\n\tconstructor() {\r\n\t\tthis.uid = this.getUniqueId();\r\n\r\n\t\tthis.invalidSprites.noBase = [];\r\n\t\tthis.invalidDatas.noBase = [];\r\n\t\tthis.invalidLayouts.noBase = [];\r\n\t\tthis.invalidPositions.noBase = [];\r\n\r\n\t\t// This is needed for Angular Universal SSR\r\n\t\tif (typeof addEventListener !== \"undefined\") {\r\n\t\t\t// This is needed to prevent charts from being cut off when printing\r\n\t\t\taddEventListener(\"beforeprint\", () => {\r\n\t\t\t\t$array.each(this.baseSprites, (sprite) => {\r\n\t\t\t\t\tconst svg = sprite.paper.svg;\r\n\t\t\t\t\tsvg.setAttribute(\"viewBox\", \"0 0 \" + svg.clientWidth + \" \" + svg.clientHeight);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\taddEventListener(\"afterprint\", () => {\r\n\t\t\t\t$array.each(this.baseSprites, (sprite) => {\r\n\t\t\t\t\tconst svg = sprite.paper.svg;\r\n\t\t\t\t\tsvg.removeAttribute(\"viewBox\");\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a unique chart system-wide ID.\r\n\t *\r\n\t * @return Generated ID\r\n\t */\r\n\tpublic getUniqueId(): string {\r\n\t\tlet uid = this._uidCount;\r\n\t\tthis._uidCount += 1;\r\n\t\treturn \"id-\" + uid;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a universal collection for mapping ids with objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get map(): Dictionary<string, any> {\r\n\t\tif (!this._map) {\r\n\t\t\tthis._map = new Dictionary<string, any>();\r\n\t\t}\r\n\t\treturn this._map;\r\n\t}\r\n\r\n\t/**\r\n\t * Caches value in object's cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t * @param ttl    TTL in seconds\r\n\t */\r\n\tpublic setCache(key: string, value: any, ttl?: number): void {\r\n\t\tcache.set(this.uid, key, value, ttl);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves cached value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key    Key\r\n\t * @param value  Value to return if cache is not available\r\n\t * @return Value\r\n\t */\r\n\tpublic getCache(key: string, value: any = undefined): any {\r\n\t\treturn cache.get(this.uid, key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches an event using own event dispatcher. Will automatically\r\n\t * populate event data object with event type and target (this element).\r\n\t * It also checks if there are any handlers registered for this sepecific\r\n\t * event.\r\n\t *\r\n\t * @param eventType Event type (name)\r\n\t * @param data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatch<Key extends keyof IRegistryEvents>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\tif (data) {\r\n\t\t\t\tdata.type = eventType;\r\n\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Works like `dispatch`, except event is triggered immediately, without\r\n\t * waiting for the next frame cycle.\r\n\t *\r\n\t * @param eventType Event type (name)\r\n\t * @param data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatchImmediately<Key extends keyof IRegistryEvents>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\tif (data) {\r\n\t\t\t\tdata.type = eventType;\r\n\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t(<any>this.events).dispatchImmediately(eventType, data);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.events).dispatchImmediately(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a unique placeholder suitable for the key.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Random string to be used as placeholder\r\n\t */\r\n\tpublic getPlaceholder(key: string): string {\r\n\t\tif ($type.hasValue(this._placeholders[key])) {\r\n\t\t\treturn this._placeholders[key];\r\n\t\t}\r\n\t\tthis._placeholders[key] = \"__amcharts_\" + key + \"_\" + $string.random(8) + \"__\";\r\n\t\treturn this._placeholders[key];\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidComponents(component: Component) {\r\n\t\tif (component.baseId) {\r\n\t\t\t$array.move(this.invalidDatas[component.baseId], component);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.move(this.invalidDatas[\"noBase\"], component);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidComponents(component: Component) {\r\n\t\tif (component.baseId) {\r\n\t\t\t$array.remove(this.invalidDatas[component.baseId], component);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidDatas[\"noBase\"], component);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidSprites(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.add(this.invalidSprites[sprite.baseId], sprite);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.add(this.invalidSprites[\"noBase\"], sprite);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidSprites(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.remove(this.invalidSprites[sprite.baseId], sprite);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidSprites[\"noBase\"], sprite);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidPositions(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.add(this.invalidPositions[sprite.baseId], sprite);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.add(this.invalidPositions[\"noBase\"], sprite);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidPositions(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.remove(this.invalidPositions[sprite.baseId], sprite);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidPositions[\"noBase\"], sprite);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidLayouts(sprite: Container) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.add(this.invalidLayouts[sprite.baseId], sprite);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.add(this.invalidLayouts[\"noBase\"], sprite);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidLayouts(sprite: Container) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.remove(this.invalidLayouts[sprite.baseId], sprite);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidLayouts[\"noBase\"], sprite);\r\n\t}\r\n}\r\n\r\n/**\r\n * A singleton global instance of [[Registry]].\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport let registry = new Registry();\r\n\r\n\r\n/**\r\n * Returns `true` if object is an instance of the class. It's the same as `instanceof` except it doesn't need to import the class.\r\n *\r\n * @param object Object\r\n * @param name Class name\r\n * @return Is instance of class\r\n */\r\nexport function is<A>(object: any, name: string): object is A {\r\n\tconst x = registry.registeredClasses[name];\r\n\treturn x != null && object instanceof x;\r\n}\r\n"],
  "mappings": ";;;;;;;;;;AAmCA,IAAA;;EAAA,WAAA;AAYC,aAAAA,SAAYC,UAAe;AAC1B,WAAK,SAASA;IACf;AAoCA,WAAA,eAAWD,SAAA,WAAA,SAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAhB,WAAA;AACC,eAAO,KAAK,SAAS;MACtB;;;;AAOA,WAAA,eAAWA,SAAA,WAAA,WAAO;;;;;;WAAlB,WAAA;AACC,eAAO,KAAK;MACb;;;;AAEO,IAAAA,SAAA,UAAA,WAAP,WAAA;AACC,aAAO,KAAK,KAAK,SAAS;IAC3B;AAMD,WAAAA;EAAA,EAvEA;;AAuFM,SAAU,QAAQ,OAAa;AACpC,SAAO,IAAI,QAAQ,KAAK;AACzB;AAUM,SAAU,UAAU,OAAU;AACnC,SAAO,iBAAiB;AACzB;;;ACxIA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CM,SAAU,MAAM,OAAa;AAClC,SAAO,OAAO,KAAK,MAAM;AAC1B;AAmBM,SAAU,QAAW,OAAQ;AAClC,SAAQ,CAAA,EAAI,SAAS,KAAK,KAAK;AAChC;AAUM,SAAU,WAAc,OAA6B,UAAW;AACrE,SAAO,SAAS;AACjB;AAUM,SAAU,YAAY,OAAU;AACrC,MAAI,OAAO,UAAU,UAAU;AAC9B,WAAO;SACD;AACN,UAAM,IAAI,MAAM,+BAA+B,QAAQ,KAAK,CAAC;;AAE/D;AAUM,SAAU,aAAa,OAAU;AACtC,MAAI,OAAO,UAAU,WAAW;AAC/B,WAAO;SACD;AACN,UAAM,IAAI,MAAM,gCAAgC,QAAQ,KAAK,CAAC;;AAEhE;AASM,SAAU,YAAY,OAAU;AACrC,MAAI,OAAO,UAAU,UAAU;AAC9B,QAAI,MAAM,KAAK,GAAG;AACjB,YAAM,IAAI,MAAM,+BAA+B;;SAE1C;AACN,UAAM,IAAI,MAAM,+BAA+B,QAAQ,KAAK,CAAC;;AAE9D,SAAO;AACR;AAWM,SAAU,YAAY,OAAS;AACpC,MAAM,IAAI,QAAQ,KAAK;AAEvB,MAAI,MAAM,mBAAmB;AAC5B,WAAO;SAED;AACN,UAAM,IAAI,MAAM,gCAAgC,CAAC;;AAEnD;AAUM,SAAU,WAAc,OAAe;AAC5C,MAAI,MAAM,QAAQ,KAAK,GAAG;AACzB,WAAO;SAED;AACN,UAAM,IAAI,MAAM,+BAA+B,QAAQ,KAAK,CAAC;;AAE/D;AAUM,SAAU,UAAU,OAAW;AACpC,MAAM,IAAI,QAAQ,KAAK;AAEvB,MAAI,MAAM,iBAAiB;AAC1B,WAAO;SAED;AACN,UAAM,IAAI,MAAM,6BAA6B,CAAC;;AAEhD;AAiBM,SAAU,WAAW,OAAsB;AAChD,MAAI,OAAO,UAAU,UAAU;AAC9B,WAAO;aAEG,OAAO,UAAU,UAAU;AACrC,WAAO,KAAK;SAEN;AACN,UAAM,IAAI,MAAM,yCAAyC,QAAQ,KAAK,CAAC;;AAEzE;AASM,SAAU,WAAW,OAA6B;AACvD,MAAI,OAAO,UAAU,UAAU;AAC9B,QAAM,SAAS,CAAC;AAEhB,QAAI,MAAM,MAAM,GAAG;AAClB,YAAM,IAAI,MAAM,wBAAwB,KAAK,UAAU,KAAK,IAAI,cAAc;WAExE;AACN,aAAO;;aAGE,OAAO,UAAU,UAAU;AACrC,QAAI,MAAM,KAAK,GAAG;AACjB,YAAM,IAAI,MAAM,+BAA+B;WAEzC;AACN,aAAO;;SAGF;AACN,QAAM,IAAI,QAAQ,KAAK;AAEvB,QAAI,MAAM,iBAAiB;AAC1B,aAAO,MAAM,QAAO;WAEd;AACN,YAAM,IAAI,MAAM,gDAAgD,CAAC;;;AAGpE;AAiDM,SAAU,UAAU,OAAU;AACnC,SAAO,QAAQ,OAAO;AACvB;AAQM,SAAU,SAAS,OAAU;AAClC,MAAI,SAAS,KAAK,KAAK,CAAC,SAAS,KAAK,GAAG;AACxC,QAAI,YAAY,OAAO,KAAK;AAC5B,QAAI,MAAM,SAAS,KAAK,SAAS,KAAK,KAAK,SAAS,IAAI;AACvD,aAAO,SAAS,MAAM,QAAQ,eAAe,EAAE,CAAC;;AAEjD,WAAO;;AAER,SAAO;AACR;AAQM,SAAU,OAAO,OAAU;AAChC,MAAI,SAAS,KAAK,KAAK,CAAC,SAAS,KAAK,GAAG;AACxC,QAAI,SAAS,KAAK,GAAG;AACpB,aAAO,WAAW,KAAK;eAEf,SAAS,KAAK,GAAG;AACzB,aAAO,MAAM,SAAQ;;;AAGvB,SAAO;AACR;AAaM,SAAU,kBAAkB,OAAU;AAC3C,MAAI,CAAC,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,UAAU,KAAK,GAAG;AAC5D,WAAO;;AAER,MAAI,SAAS,KAAK,KAAK,MAAM,QAAQ,GAAG,KAAK,IAAI;AAChD,WAAO,QAAQ,SAAS,KAAK,CAAC;;AAE/B,SAAO,SAAS,KAAK;AACtB;AAqBM,SAAU,SAAY,GAAqB;AAChD,SAAO,KAAK;AACb;AASM,SAAU,SAAY,GAAqB;AAChD,MAAI,SAAS,CAAC,GAAG;AAChB,WAAO;SAED;AACN,UAAM,IAAI,MAAM,qBAAqB;;AAEvC;AAQM,SAAU,gBAAmB,GAAuB,cAAe;AACxE,MAAI,SAAS,CAAC,GAAG;AAChB,WAAO;SAED;AACN,WAAO;;AAET;AAgBM,SAAU,OAAO,OAAU;AAChC,SAAO,QAAQ,KAAK,MAAM;AAC3B;AAQM,SAAU,SAAS,OAAU;AAClC,SAAO,OAAO,UAAU;AACzB;AAQM,SAAU,SAAS,OAAU;AAClC,SAAO,OAAO,UAAU,YAAY,OAAO,KAAK,KAAK;AACtD;AAQM,SAAU,SAAS,OAAU;AAClC,SAAO,OAAO,UAAU,YAAY,SAAS;AAC9C;AAQM,SAAU,QAAQ,OAAU;AACjC,SAAO,MAAM,QAAQ,KAAK;AAC3B;;;ACpdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBO,IAAM,KAAK,KAAK;AAChB,IAAM,SAAS,KAAK;AACpB,IAAM,UAAU,KAAK;AACrB,IAAM,UAAU,MAAM;AAUvB,SAAU,cAAc,OAAYE,MAAaC,MAAW;AACjE,MAAU,SAAS,KAAK,GAAG;AAC1B,YAAc,SAAS,KAAK;AAC5B,WAAO,WAAW,OAAOD,MAAKC,IAAG;;AAElC,SAAO;AACR;AAUM,SAAU,MAAM,OAAe,WAAoB,OAAe;AACvE,MAAI,CAAO,SAAS,SAAS,KAAK,aAAa,GAAG;AAEjD,QAAI,UAAU,KAAK,MAAM,KAAK;AAC9B,QAAI,OAAO;AACV,UAAI,UAAU,SAAS,KAAK;AAC3B;;;AAGF,WAAO;SAEH;AACJ,QAAI,IAAY,KAAK,IAAI,IAAI,SAAS;AACtC,WAAO,KAAK,MAAM,QAAQ,CAAC,IAAI;;AAEjC;AASM,SAAU,KAAK,OAAe,WAAkB;AACrD,MAAI,CAAO,SAAS,SAAS,KAAK,aAAa,GAAG;AACjD,WAAO,KAAK,KAAK,KAAK;SAElB;AACJ,QAAI,IAAY,KAAK,IAAI,IAAI,SAAS;AACtC,WAAO,KAAK,KAAK,QAAQ,CAAC,IAAI;;AAEhC;AAUM,SAAU,QAAQ,GAAW,MAAc,IAAU;AAC1D,SAAQ,KAAK,KAAK,QAAS;AAC5B;AAWM,SAAU,WAAW,OAAe,UAAkC,UAAgC;AAC3G,MAAU,SAAS,QAAQ,GAAG;AAC7B,QAAU,SAAS,QAAQ,KAAK,WAAW,UAAU;AACpD,UAAI,OAAO;AACX,iBAAW;AACX,iBAAW;;AAGZ,QAAI,QAAQ,UAAU;AACrB,cAAQ;;;AAIV,MAAU,SAAS,QAAQ,GAAG;AAC7B,QAAI,QAAQ,UAAU;AACrB,cAAQ;;;AAIV,SAAO;AACR;AAQM,SAAU,IAAI,OAAa;AAChC,SAAO,MAAM,KAAK,IAAI,UAAU,KAAK,GAAG,EAAE;AAC3C;AAQM,SAAU,IAAI,OAAa;AAChC,SAAO,MAAM,KAAK,IAAI,UAAU,KAAK,GAAG,EAAE;AAC3C;AAQM,SAAU,IAAI,OAAa;AAChC,SAAO,MAAM,KAAK,IAAI,UAAU,KAAK,GAAG,EAAE;AAC3C;AAaM,SAAU,IAAI,MAAW,OAAU;AACxC,MAAU,SAAS,IAAI,GAAG;AACzB,QAAU,SAAS,KAAK,GAAG;AAC1B,UAAI,QAAQ,MAAM;AACjB,eAAO;aAED;AACN,eAAO;;WAGF;AACN,aAAO;;aAGQ,SAAS,KAAK,GAAG;AACjC,WAAO;SAED;AACN,WAAO;;AAET;AAaM,SAAU,IAAI,MAAW,OAAU;AACxC,MAAU,SAAS,IAAI,GAAG;AACzB,QAAU,SAAS,KAAK,GAAG;AAC1B,UAAI,QAAQ,MAAM;AACjB,eAAO;aAED;AACN,eAAO;;WAGF;AACN,aAAO;;aAGQ,SAAS,KAAK,GAAG;AACjC,WAAO;SAED;AACN,WAAO;;AAET;AASM,SAAU,QAAQ,QAAkB,gBAAsB;AAC/D,SAAO,OAAO,OAAO,SAAS,MAAM,MAAI;AACvC,WAAQ,KAAK,IAAI,OAAO,cAAc,IAAI,KAAK,IAAI,OAAO,cAAc,IAAI,OAAO;EACpF,CAAC;AACF;AASM,SAAU,UAAU,QAAgB,QAAc;AACvD,MAAI,SAAuB,SAAS,OAAO,KAAK;AAChD,MAAI,SAAuB,SAAS,OAAO,KAAK;AAChD,MAAI,OAAqB,SAAS,OAAO,GAAG;AAC5C,MAAI,OAAqB,SAAS,OAAO,GAAG;AAE5C,SAAO,KAAK,IAAI,QAAQ,MAAM,KAAK,KAAK,IAAI,MAAM,IAAI;AACvD;AAOM,SAAU,YAAY,OAAa;AACxC,MAAI,QAAsB,SAAS,MAAM,KAAK;AAC9C,MAAI,MAAoB,SAAS,MAAM,GAAG;AAC1C,SAAO,EAAE,OAAO,IAAI,KAAK,KAAK,IAAI,MAAK;AACxC;AASM,SAAU,aAAa,QAAgB,QAAc;AAC1D,MAAI,SAAuB,SAAS,OAAO,KAAK;AAChD,MAAI,SAAuB,SAAS,OAAO,KAAK;AAChD,MAAI,OAAqB,SAAS,OAAO,GAAG;AAC5C,MAAI,OAAqB,SAAS,OAAO,GAAG;AAC5C,MAAI,WAAmB,KAAK,IAAI,QAAQ,MAAM;AAC9C,MAAI,SAAiB,KAAK,IAAI,MAAM,IAAI;AAExC,MAAI,SAAS,UAAU;AACtB,WAAO;SAEH;AACJ,WAAO,EAAE,OAAO,UAAU,KAAK,OAAM;;AAEvC;AAYM,SAAU,YAAY,QAAgB,QAAe;AAC1D,MAAI,CAAC,QAAQ;AACZ,WAAO;;AAGR,MAAI,CAAC,QAAQ;AACZ,aAAS,EAAE,GAAG,GAAG,GAAG,EAAC;;AAEtB,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,KAAK,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC;AACzG;AAYM,SAAU,sBAAsB,QAAgB,QAAe;AACpE,MAAI,CAAC,QAAQ;AACZ,WAAO;;AAGR,MAAI,CAAC,QAAQ;AACZ,aAAS,EAAE,GAAG,GAAG,GAAG,EAAC;;AAEtB,SAAO,KAAK,IAAI,OAAO,IAAI,OAAO,CAAC;AACpC;AAYM,SAAU,oBAAoB,QAAgB,QAAe;AAClE,MAAI,CAAC,QAAQ;AACZ,WAAO;;AAGR,MAAI,CAAC,QAAQ;AACZ,aAAS,EAAE,GAAG,GAAG,GAAG,EAAC;;AAEtB,SAAO,KAAK,IAAI,OAAO,IAAI,OAAO,CAAC;AACpC;AAeM,SAAU,sBAAsB,QAAgB,QAAgB,eAAuB,eAAuB,WAAgB;AACnI,MAAI,CAAC,QAAQ;AACZ,WAAO;;AAGR,MAAI,CAAC,QAAQ;AACZ,aAAS,EAAE,GAAG,GAAG,GAAG,EAAC;;AAGtB,MAAI,WAAW;AACf,MAAI,YAAoB;AACxB,MAAI,YAAY,GAAG;AAClB,aAAS,IAAI,GAAG,KAAK,WAAW,KAAK;AACpC,UAAI,QAAQ,qBAAqB,QAAQ,QAAQ,eAAe,eAAe,IAAI,SAAS;AAC5F,kBAAY,YAAY,WAAW,KAAK;AACxC,kBAAY;;;AAGd,SAAO;AACR;AAWM,SAAU,SAAS,QAAgB,aAAqB,QAAgB,aAAmB;AAChG,MAAI,kBAA0B,YAAY,aAAa,WAAW;AAClE,MAAI,kBAA0B,YAAY,QAAQ,MAAM;AAExD,SAAO,KAAK,IAAI,kBAAkB,eAAe;AAClD;AASM,SAAU,YAAY,QAAgB,QAAgB,UAAiB;AAC5E,MAAI,CAAO,SAAS,QAAQ,GAAG;AAC9B,eAAW;;AAGZ,SAAO;IACN,KAAM,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK;IACzC,KAAM,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK;;AAE3C;AAYM,SAAU,YAAY,QAAgB,aAAqB,QAAgB,aAAmB;AAGnG,MAAI,aAAqB,SAAS,aAAa,WAAW;AAC1D,MAAI,QAAgB,SAAS,QAAQ,MAAM;AAG3C,MAAI,OAAe,aAAa;AAChC,MAAI,OAAO,GAAG;AACb,YAAQ;;AAGT,SAAO;AACR;AASM,SAAU,SAAS,QAAgB,QAAe;AACvD,MAAI,CAAC,QAAQ;AACZ,aAAS,EAAE,GAAG,OAAO,IAAI,GAAG,GAAG,OAAO,IAAI,EAAC;;AAE5C,MAAI,QAAgB,OAAO,IAAI,OAAO;AACtC,MAAI,QAAgB,OAAO,IAAI,OAAO;AACtC,MAAI,QAAgB,KAAK,MAAM,OAAO,KAAK,IAAI;AAC/C,MAAI,QAAQ,GAAG;AACd,aAAS;;AAEV,SAAO,eAAe,KAAK;AAC5B;AAaM,SAAU,eAAe,QAAgB,QAAgB,aAAqB,QAAgB,aAAmB;AAGtH,MAAI,QAAgB,YAAY,QAAQ,aAAa,QAAQ,WAAW,IAAI;AAC5E,MAAI,QAAQ,GAAG;AACd,aAAS;;AAIV,MAAI,WAAmB,YAAY,QAAQ,MAAM;AAGjD,MAAI,IAAY,KAAK,IAAI,KAAK,IAAI,WAAW,OAAO;AACpD,MAAI,IAAY,KAAK,IAAI,KAAK,IAAI,WAAW,OAAO;AAEpD,MAAI,QAAgB;IACnB,KAAK,IAAI,OAAO;IAChB,KAAK,IAAI,OAAO;;AAEjB,SAAO;AACR;AAUM,SAAU,QAAQ,QAAgB;AACvC,MAAI,QAAQ;AACX,QAAI,WAAS,OAAO;AAEpB,QAAI,aAAW,GAAG;AACjB,UAAI,OAAI;AACR,UAAI,QAAK;AACT,UAAI;AACJ,UAAI,SAAM;AAEV,eAAS,IAAI,GAAG,IAAI,UAAQ,KAAK;AAChC,YAAI,QAAgB,OAAO,CAAC;AAE5B,YAAI,CAAO,SAAS,KAAK,KAAM,MAAM,IAAI,OAAQ;AAChD,kBAAQ,MAAM;;AAEf,YAAI,CAAO,SAAS,IAAI,KAAM,MAAM,IAAI,MAAO;AAC9C,iBAAO,MAAM;;AAGd,YAAI,CAAO,SAAS,KAAG,KAAM,MAAM,IAAI,OAAM;AAC5C,kBAAM,MAAM;;AAEb,YAAI,CAAO,SAAS,MAAM,KAAM,MAAM,IAAI,QAAS;AAClD,mBAAS,MAAM;;;AAIjB,aAAO,EAAE,GAAG,MAAM,GAAG,OAAK,OAAO,QAAQ,MAAM,QAAQ,SAAS,MAAG;;;AAIrE,SAAO,EAAE,GAAG,GAAG,GAAG,GAAG,OAAO,GAAG,QAAQ,EAAC;AACzC;AASM,SAAU,mBAAmB,YAAwB;AAC1D,MAAIC,UAAS,WAAW;AAExB,MAAIA,YAAW,GAAG;AACjB,QAAI,OAAI;AACR,QAAI,OAAI;AACR,QAAI,OAAI;AACR,QAAI,OAAI;AAER,aAAS,IAAI,GAAG,IAAIA,SAAQ,KAAK;AAChC,UAAI,YAAY,WAAW,CAAC;AAC5B,aAAO,IAAI,UAAU,GAAG,IAAI;AAC5B,aAAO,IAAI,UAAU,GAAG,IAAI;AAC5B,aAAO,IAAI,UAAU,IAAI,UAAU,OAAO,IAAI;AAC9C,aAAO,IAAI,UAAU,IAAI,UAAU,QAAQ,IAAI;;AAGhD,WAAO,EAAE,GAAG,MAAM,GAAG,MAAM,OAAO,OAAO,MAAM,QAAQ,OAAO,KAAI;;AAEpE;AAaM,SAAU,yBAAyB,QAAgB,QAAgB,cAAsB,UAAgB;AAC9G,MAAI,KAAa,IAAI,aAAa,IAAI,YAAY,OAAO,IAAI,KAAK,IAAI,YAAY,WAAW,aAAa,IAAI,WAAW,WAAW,OAAO;AAC3I,MAAI,KAAa,IAAI,aAAa,IAAI,YAAY,OAAO,IAAI,KAAK,IAAI,YAAY,WAAW,aAAa,IAAI,WAAW,WAAW,OAAO;AAC3I,SAAO,EAAE,GAAM,EAAI;AACpB;AAcM,SAAU,qBAAqB,QAAgB,QAAgB,eAAuB,eAAuB,UAAgB;AAClI,MAAI,QAAgB,EAAE,GAAG,GAAG,GAAG,EAAC;AAChC,MAAI,MAAc,IAAI;AACtB,MAAI,MAAc,MAAM;AACxB,MAAI,MAAc,MAAM;AAExB,QAAM,IAAI,OAAO,IAAI,MAAM,cAAc,IAAI,IAAI,MAAM,WAAW,cAAc,IAAI,IAAI,MAAM,WAAW,WAAW,OAAO,IAAI,WAAW,WAAW;AACrJ,QAAM,IAAI,OAAO,IAAI,MAAM,cAAc,IAAI,IAAI,MAAM,WAAW,cAAc,IAAI,IAAI,MAAM,WAAW,WAAW,OAAO,IAAI,WAAW,WAAW;AAErJ,SAAO;AACR;AAeM,SAAU,sBAAsB,IAAY,IAAY,IAAY,IAAY,UAAkB,UAAgB;AACvH,aAAW,cAAc,QAAQ;AACjC,aAAW,cAAc,QAAQ;AACjC,SAAO,EAAE,IAAK,CAAC,GAAG,IAAI,GAAG,IAAI,WAAW,GAAG,KAAK,UAAW,IAAK,CAAC,GAAG,IAAI,GAAG,IAAI,WAAW,GAAG,KAAK,SAAS;AAC5G;AAeM,SAAU,sBAAsB,IAAY,IAAY,IAAY,IAAY,UAAkB,UAAgB;AACvH,aAAW,cAAc,QAAQ;AACjC,aAAW,cAAc,QAAQ;AACjC,SAAO,EAAE,IAAK,GAAG,IAAI,GAAG,IAAI,WAAW,GAAG,KAAK,UAAW,IAAK,GAAG,IAAI,GAAG,IAAI,WAAW,GAAG,KAAK,SAAS;AAC1G;AAUM,SAAU,cAAc,SAAe;AAC5C,SAAO,IAAI,UAAU;AACtB;AAUM,SAAU,eAAe,OAAa;AAC3C,MAAI,SAAS,KAAK;AACjB,WAAO;;AAER,SAAO,QAAQ;AAChB;AAeM,SAAU,gBAAgB,OAAe,YAAoB,UAAgB;AAElF,MAAI,aAAa,UAAU;AAC1B,QAAI,OAAe;AACnB,iBAAa;AACb,eAAW;;AAGZ,UAAQ,eAAe,KAAK;AAE5B,MAAI,SAAS,aAAa,eAAe,UAAU,KAAK;AAExD,MAAI,QAAQ,YAAY;AACvB,aAAS,OAAO,QAAQ;;AAGzB,MAAI,SAAiB,cAAc,WAAW,cAAc,IAAI;AAChE,MAAI,WAAmB,cAAc,WAAW,cAAc,IAAI;AAElE,MAAI,QAAQ,UAAU;AAErB,QAAI,QAAQ,MAAM,YAAY;AAC7B,eAAS;WAEL;AACJ,UAAI,QAAQ,QAAQ;AACnB,gBAAQ;aAEJ;AACJ,gBAAQ;;;;AAKX,MAAI,QAAQ,YAAY;AACvB,QAAI,QAAQ,UAAU;AACrB,cAAQ;WAEJ;AACJ,cAAQ;;;AAIV,SAAO;AACR;AAeM,SAAU,WAAW,YAAoB,UAAkB,QAAe;AAE/E,MAAI,OAAO,OAAO;AAClB,MAAI,OAAO,OAAO;AAClB,MAAI,OAAO,CAAC,OAAO;AACnB,MAAI,OAAO,CAAC,OAAO;AAEnB,MAAI,UAAU,CAAA;AAEd,MAAI,CAAO,SAAS,MAAM,GAAG;AAC5B,aAAS;;AAGV,UAAQ,KAAK,YAAY,QAAQ,UAAU,CAAC;AAC5C,UAAQ,KAAK,YAAY,QAAQ,QAAQ,CAAC;AAE1C,MAAI,YAAY,KAAK,IAAI,KAAK,MAAM,aAAa,EAAE,IAAI,IAAI,KAAK,MAAM,WAAW,EAAE,IAAI,EAAE;AACzF,MAAI,UAAU,KAAK,IAAI,KAAK,KAAK,aAAa,EAAE,IAAI,IAAI,KAAK,KAAK,WAAW,EAAE,IAAI,EAAE;AAErF,WAAS,QAAQ,WAAW,SAAS,SAAS,SAAS,IAAI;AAC1D,QAAI,SAAS,cAAc,SAAS,UAAU;AAC7C,cAAQ,KAAK,YAAY,QAAQ,KAAK,CAAC;;;AAIzC,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACxC,QAAI,KAAK,QAAQ,CAAC;AAClB,QAAI,GAAG,IAAI,MAAM;AAAE,aAAO,GAAG;;AAC7B,QAAI,GAAG,IAAI,MAAM;AAAE,aAAO,GAAG;;AAC7B,QAAI,GAAG,IAAI,MAAM;AAAE,aAAO,GAAG;;AAC7B,QAAI,GAAG,IAAI,MAAM;AAAE,aAAO,GAAG;;;AAG9B,SAAQ,EAAE,GAAG,MAAM,GAAG,MAAM,OAAO,OAAO,MAAM,QAAQ,OAAO,KAAI;AACpE;AAUM,SAAU,YAAY,QAAgB,KAAW;AACtD,SAAQ,EAAE,GAAG,SAAS,IAAI,GAAG,GAAG,GAAG,SAAS,IAAI,GAAG,EAAC;AACrD;AASM,SAAU,cAAc,OAAe,WAAqB;AACjE,MAAI,MAAM,KAAK,UAAU,KAAK,MAAM,KAAK,UAAU,IAAI,UAAU,SAAS,MAAM,KAAK,UAAU,KAAK,MAAM,KAAK,UAAU,IAAI,UAAU,QAAQ;AAC9I,WAAO;;AAER,SAAO;AACR;AAGM,SAAU,oBAAoB,SAAiB,SAAiB,SAAiB,SAAe;AACrG,MAAI,MAAM,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,QAAQ,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ;AACtQ,MAAI,MAAM,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,QAAQ,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ,MAAM,QAAQ,IAAI,QAAQ;AACtQ,SAAO,EAAE,GAAM,EAAI;AACpB;;;ACtyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBM,SAAU,QAAW,OAAqB,OAAQ;AACvD,MAAMC,UAAS,MAAM;AAErB,WAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAEhC,QAAI,MAAM,CAAC,MAAM,OAAO;AACvB,aAAO;;;AAIT,SAAO;AACR;AAaM,SAAU,IAAO,OAAqB,MAA2B;AACtE,MAAMA,UAAS,MAAM;AAErB,WAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAChC,QAAI,KAAK,MAAM,CAAC,CAAC,GAAG;AACnB,aAAO;;;AAIT,SAAO;AACR;AAUM,SAAU,IAAU,OAAqB,IAAkC;AAChF,MAAMA,UAAS,MAAM;AACrB,MAAM,SAAS,IAAI,MAAMA,OAAM;AAE/B,WAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAChC,WAAO,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC;;AAG3B,SAAO;AACR;AASM,SAAU,KAAQ,OAAqB,IAAqC;AACjF,MAAMA,UAAS,MAAM;AAErB,WAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAChC,OAAG,MAAM,CAAC,GAAG,CAAC;;AAEhB;AASM,SAAU,YAAe,OAAqB,IAAqC;AACxF,MAAI,IAAI,MAAM;AAEd,SAAO,KAAK;AACX,OAAG,MAAM,CAAC,GAAG,CAAC;;AAEhB;AAWM,SAAU,aAAgB,OAAqB,IAAwC;AAC5F,MAAMA,UAAS,MAAM;AAErB,WAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAChC,QAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG;AACrB;;;AAGH;AAQM,SAAU,UAAa,OAAiB,OAAa;AAC1D,MAAMA,UAAS,MAAM;AAErB,WAAS,IAAI,OAAO,IAAIA,SAAQ,EAAE,GAAG;AACpC,UAAM,IAAI,KAAK,IAAI,MAAM,CAAC;;AAG3B,QAAM,SAASA,UAAS;AACzB;AAQM,SAAU,KAAQ,OAAe;AACtC,MAAMA,UAAS,MAAM;AACrB,SAAOA,UAAS,MAAMA,UAAS,CAAC,IAAI;AACrC;AAQM,SAAU,MAAS,OAAe;AACvC,SAAO,MAAM,CAAC;AACf;AAWM,SAAU,OAAU,OAAiB,SAAY,OAAa;AAEnE,UAAc,WAAW,OAAO,GAAG,MAAM,MAAM;AAC/C,QAAM,OAAO,OAAO,GAAG,OAAO;AAE/B;AAUM,SAAU,SAAY,OAAiB,SAAY,OAAa;AACrE,SAAO,OAAO,OAAO;AACrB,SAAO,OAAO,SAAS,KAAK;AAC7B;AASM,SAAU,QAAW,OAAiB,OAAe;AAC1D,MAAMA,UAAS,MAAM;AAErB,WAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAChC,UAAM,KAAK,MAAM,CAAC,CAAC;;AAErB;AAWM,SAAU,OAAU,OAAiB,SAAU;AACpD,MAAI,QAAiB;AACrB,MAAI,QAAgB,MAAM,QAAQ,OAAO;AAEzC,MAAI,UAAU,IAAI;AACjB,YAAQ;AACR,UAAM,OAAO,OAAO,CAAC;AAErB,QAAI,WAAiB,MAAM;AAE3B,WAAO,QAAQ,UAAQ;AAEtB,UAAI,MAAM,KAAK,MAAM,SAAS;AAC7B,cAAM,OAAO,OAAO,CAAC;AACrB,UAAE;aAEI;AACN,UAAE;;;;AAKL,SAAO;AACR;AAcM,SAAU,KAAQ,OAAiB,SAAY,SAAgB;AAGpE,MAAI,QAAQ,QAAQ,OAAO,OAAO;AAGlC,MAAI,UAAU,IAAI;AACjB,gBAAY,OAAO,KAAK;;AAGzB,MAAI,WAAW,MAAM;AACpB,UAAM,KAAK,OAAO;SACZ;AACN,gBAAY,OAAO,SAAS,OAAO;;AAErC;AAYM,SAAU,IAAO,OAAiB,SAAY,OAAc;AAEjE,MAAI,CAAO,SAAS,KAAK,GAAG;AAC3B,UAAM,KAAK,OAAO;aAIV,UAAU,GAAG;AACrB,UAAM,QAAQ,OAAO;SAGjB;AACJ,UAAM,OAAO,OAAO,GAAG,OAAO;;AAEhC;AAYM,SAAU,QAAW,OAAiB,SAAY,OAAc;AAErE,MAAI,MAAc,MAAM,QAAQ,OAAO;AAGvC,MAAI,QAAQ,IAAI;AACf,UAAM,OAAO,KAAK,CAAC;;AAIpB,MAAI,CAAO,SAAS,KAAK,GAAG;AAC3B,UAAM,KAAK,OAAO;SAGd;AACJ,UAAM,OAAO,OAAO,GAAG,OAAO;;AAEhC;AAQM,SAAU,QAAW,OAAmB;AAC7C,MAAI,MAAM,QAAQ,KAAK,GAAG;AACzB,WAAO;SAEH;AACJ,WAAO,CAAC,KAAK;;AAEf;AASM,SAAU,IAAO,OAAqB,SAAU;AACrD,SAAO,QAAQ,OAAO,OAAO,MAAM;AACpC;AAQM,SAAU,KAAQ,OAAmB;AAC1C,MAAMA,UAAS,MAAM;AAGrB,MAAM,SAAS,IAAI,MAAMA,OAAM;AAE/B,WAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAGhC,WAAO,CAAC,IAAI,MAAM,CAAC;;AAGpB,SAAO;AACR;AAcM,SAAU,MAAS,OAAqB,OAAe,KAA0B;AAA1B,MAAA,QAAA,QAAA;AAAA,UAAc,MAAM;EAAM;AACtF,MAAM,SAAS,IAAI,MAAM,MAAM,KAAK;AAEpC,WAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AACjC,WAAO,IAAI,KAAK,IAAI,MAAM,CAAC;;AAG5B,SAAO;AACR;AASM,SAAU,YAAe,OAAiB,OAAe,OAAQ;AACtE,QAAM,OAAO,OAAO,GAAG,KAAK;AAC7B;AAQM,SAAU,YAAe,OAAiB,OAAa;AAC5D,QAAM,OAAO,OAAO,CAAC;AACtB;AAqBM,SAAU,eAAkB,OAAqB,UAA2C,OAAQ;AACzG,MAAI,QAAQ;AACZ,MAAI,MAAQ,MAAM;AAClB,MAAI,QAAQ;AAEZ,SAAO,QAAQ,KAAK;AAEnB,QAAM,QAAS,QAAQ,OAAQ;AAE/B,QAAMC,SAAQ,SAAS,OAAO,MAAM,KAAK,CAAC;AAG1C,QAAIA,SAAQ,GAAG;AACd,YAAM;eAGIA,WAAU,GAAG;AACvB,cAAQ;AACR,cAAQ,QAAQ;WAGV;AACN,cAAQ,QAAQ;;;AAIlB,SAAO;IACN;IACA,OAAQ,QAAQ,QAAQ,IAAI;;AAE9B;AAeM,SAAU,UAAa,OAAqB,SAA6C;AAC9F,MAAMD,UAAS,MAAM;AAErB,WAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAChC,QAAI,QAAQ,MAAM,CAAC,GAAG,CAAC,GAAG;AACzB,aAAO;;;AAIT,SAAO;AACR;AAcM,SAAU,KAAQ,OAAqB,SAA6C;AACzF,MAAM,QAAQ,UAAU,OAAO,OAAO;AAEtC,MAAI,UAAU,IAAI;AACjB,WAAO,MAAM,KAAK;;AAEpB;AASM,SAAU,QAAW,OAAe;AAEzC,MAAI,eAAe,MAAM,QACxB,gBACA;AAGD,SAAO,MAAM,cAAc;AAE1B,kBAAc,KAAK,MAAM,KAAK,OAAM,IAAK,YAAY;AACrD,oBAAgB;AAGhB,qBAAiB,MAAM,YAAY;AACnC,UAAM,YAAY,IAAI,MAAM,WAAW;AACvC,UAAM,WAAW,IAAI;;AAEvB;AAGM,SAAU,OAAU,OAAiB,MAA2B;AACrE,MAAIA,UAAS,MAAM;AACnB,MAAI,IAAI;AAER,SAAO,IAAIA,SAAQ;AAClB,QAAI,KAAK,MAAM,CAAC,CAAC,GAAG;AACnB,QAAE;WAEI;AACN,YAAM,OAAO,GAAG,CAAC;AACjB,QAAEA;;;AAGL;;;ACphBA,IAAA;;EAAA,WAAA;AAiBC,aAAAE,UAAY,SAAmB;AAC9B,WAAK,YAAY;AACjB,WAAK,WAAW;IACjB;AAOO,IAAAA,UAAA,UAAA,aAAP,WAAA;AACC,aAAO,KAAK;IACb;AAKO,IAAAA,UAAA,UAAA,UAAP,WAAA;AACC,UAAI,CAAC,KAAK,WAAW;AACpB,aAAK,YAAY;AACjB,aAAK,SAAQ;;IAEf;AAED,WAAAA;EAAA,EAzCA;;AAgDA,IAAA;;EAAA,SAAA,QAAA;AAAmC,cAAAC,gBAAA,MAAA;AAClC,aAAAA,eAAY,WAA2B;aACtC,OAAA,KAAA,MAAM,WAAA;AACL,QAAO,KAAK,WAAW,SAAC,GAAC;AACxB,YAAE,QAAO;QACV,CAAC;MACF,CAAC,KAAC;IACH;AACD,WAAAA;EAAA,EARmC,QAAQ;;AAmB3C,IAAA;;EAAA,SAAA,QAAA;AAA+D,cAAAC,uBAAA,MAAA;AAe9D,aAAAA,wBAAA;AAAA,UAAA,QACC,OAAA,KAAA,MAAM,WAAA;AACL,YAAU,SAAS,MAAK,SAAS,GAAG;AACnC,gBAAK,UAAU,QAAO;AACtB,gBAAK,YAAY;;MAEnB,CAAC,KAAC;;IACH;AAOO,IAAAA,sBAAA,UAAA,MAAP,WAAA;AACC,aAAO,KAAK;IACb;AAQO,IAAAA,sBAAA,UAAA,MAAP,SAAW,OAAoB,UAA6B;AAC3D,UAAU,SAAS,KAAK,SAAS,GAAG;AACnC,aAAK,UAAU,QAAO;;AAGvB,WAAK,YAAY;AACjB,WAAK,SAAS;IACf;AAKO,IAAAA,sBAAA,UAAA,QAAP,WAAA;AACC,WAAK,IAAI,QAAW,MAAS;IAC9B;AAED,WAAAA;EAAA,EAvD+D,QAAQ;;AA6DvE,IAAA;;EAAA,SAAA,QAAA;AAAqC,cAAAC,kBAAA,MAAA;AAArC,aAAAA,mBAAA;AAAA,UAAA,QAAA,WAAA,QAAA,OAAA,MAAA,MAAA,SAAA,KAAA;AAOS,YAAA,WAAmB;;IAqB5B;AAdQ,IAAAA,iBAAA,UAAA,YAAP,WAAA;AAAA,UAAA,QAAA;AAEC,QAAE,KAAK;AAGP,aAAO,IAAI,SAAS,WAAA;AACnB,UAAE,MAAK;AAEP,YAAI,MAAK,aAAa,GAAG;AACxB,gBAAK,QAAO;;MAEd,CAAC;IACF;AAED,WAAAA;EAAA,EA5BqC,QAAQ;;;;ACrI7C,IAAI,eAAe;AAEnB,IAAM,YAA6B,CAAA;AACnC,IAAM,YAA6B,CAAA;AACnC,IAAM,aAA8B,CAAA;AACpC,IAAM,YAA6B,CAAA;AAGnC,IAAM,MAAM,MAAO;AAQZ,IAAM,MACX,OAAO,0BAA0B,aAC/B,SAAS,IAAc;AACxB,wBAAsB,EAAE;AACzB,IACE,SAAS,IAAc;AACxB,aAAW,IAAI,GAAG;AACnB;AAQF,SAAS,YAAS;AACjB,MAAM,MAAM,KAAK,IAAG;AAGpB,MAAMC,UAAS,UAAU;AAEzB,WAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAChC,cAAU,CAAC,EAAE,GAAG;;AAGjB,EAAO,UAAU,WAAWA,OAAM;AAGlC,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,EAAE,GAAG;AAC1C,cAAU,CAAC,EAAE,GAAG;;AAGjB,YAAU,SAAS;AAGnB,WAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,EAAE,GAAG;AAC3C,eAAW,CAAC,EAAE,GAAG;;AAGlB,aAAW,SAAS;AAGpB,MAAI,UAAU,WAAW,KAAK,UAAU,WAAW,GAAG;AACrD,mBAAe;SAET;AACN,QAAI,SAAS;;AAEf;AAQA,SAAS,YAAS;AACjB,MAAI,CAAC,cAAc;AAClB,mBAAe;AAEf,QAAI,SAAS;;AAEf;AAUM,SAAU,UAAU,IAAY;AACrC,YAAU,KAAK,EAAE;AACjB,YAAS;AACV;AASM,SAAU,UAAU,IAAY;AACrC,YAAU,KAAK,EAAE;AACjB,YAAS;AACV;AASM,SAAU,WAAW,IAAY;AACtC,aAAW,KAAK,EAAE;AAClB,YAAS;AACV;AASM,SAAU,SAAS,IAAY;AACpC,YAAU,KAAK,EAAE;AAClB;AASM,SAAU,cAAW;AAC1B,MAAM,MAAM,KAAK,IAAG;AAEpB,MAAMA,UAAS,UAAU;AAEzB,WAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAC1B,cAAU,MAAK,EAAI,GAAG;;AAE9B;;;ACrGA,IAAA;;EAAA,WAAA;AAaC,aAAAC,mBAAA;AACC,WAAK,aAAa,CAAA;AAClB,WAAK,UAAU,CAAA;AACf,WAAK,YAAY,CAAA;AACjB,WAAK,aAAa;AAClB,WAAK,WAAW;AAChB,WAAK,YAAY;IAClB;AAOO,IAAAA,iBAAA,UAAA,aAAP,WAAA;AACC,aAAO,KAAK;IACb;AAKO,IAAAA,iBAAA,UAAA,UAAP,WAAA;AACC,UAAI,CAAC,KAAK,WAAW;AACpB,aAAK,YAAY;AAEjB,YAAM,IAAI,KAAK;AAEf,aAAK,aAAa;AAClB,aAAK,aAAkB;AACvB,aAAK,YAAiB;AAEtB,YAAI;AACH,UAAO,KAAK,GAAG,SAAC,GAAC;AAChB,cAAE,SAAS,QAAO;UACnB,CAAC;;AAGD,eAAK,UAAe;AACpB,eAAK,aAAkB;;;IAG1B;AAOO,IAAAA,iBAAA,UAAA,eAAP,WAAA;AACC,aAAO,KAAK,WAAW,WAAW;IACnC;AAOO,IAAAA,iBAAA,UAAA,qBAAP,SAA+C,MAAS;AACvD,aAAc,IAAI,KAAK,YAAY,SAAC,GAAC;AAAK,gBAAC,EAAE,SAAS,QAAQ,EAAE,SAAS,SAAS,CAAC,EAAE;MAA3C,CAAiD;IAC5F;AAMO,IAAAA,iBAAA,UAAA,SAAP,WAAA;AACC,WAAK,WAAW;IACjB;AAKO,IAAAA,iBAAA,UAAA,UAAP,WAAA;AACC,WAAK,WAAW;IACjB;AAQO,IAAAA,iBAAA,UAAA,aAAP,SAAuC,MAAS;AAC/C,aAAO,KAAK,UAAU,IAAI;IAC3B;AAWO,IAAAA,iBAAA,UAAA,cAAP,SAAwC,MAAW,QAAyB;AAAzB,UAAA,WAAA,QAAA;AAAA,iBAAA;MAAyB;AAC3E,WAAK,UAAU,IAAI,IAAI;IACxB;AASU,IAAAA,iBAAA,UAAA,kBAAV,SAA0B,UAA0B;AACnD,UAAI,KAAK,eAAe,GAAG;AAC1B,YAAM,QAAQ,KAAK,WAAW,QAAQ,QAAQ;AAE9C,YAAI,UAAU,IAAI;AACjB,gBAAM,IAAI,MAAM,0CAA0C;;AAG3D,aAAK,WAAW,OAAO,OAAO,CAAC;aAEzB;AACN,aAAK,QAAQ,KAAK,QAAQ;;IAE5B;AAUU,IAAAA,iBAAA,UAAA,0BAAV,SAA6D,MAAe,MAAkB,UAAc,SAAW;AACtH,UAAI,KAAK,WAAW;AACnB,cAAM,IAAI,MAAM,6BAA6B;;AAG9C,WAAK,cAAc,SAAC,MAAI;AACvB,YAAI,KAAK,SAAS;QACjB,KAAK,SAAS,SACb,YAAY,QAAQ,KAAK,aAAa,aACvC,KAAK,YAAY,SAAS;AAC1B,eAAK,SAAS,QAAO;;MAEvB,CAAC;IACF;AAQO,IAAAA,iBAAA,UAAA,YAAP,SAAsC,MAAS;AAC9C,UAAI,KAAK,WAAW;AACnB,cAAM,IAAI,MAAM,6BAA6B;;AAI9C,aAAO,KAAK,YAAY,KAAK,WAAW,SAAS,KAAK,KAAK,mBAAmB,IAAI,KAAK,KAAK,UAAU,IAAI,KAAK;IAChH;AAUO,IAAAA,iBAAA,UAAA,MAAP,SAAmC,MAAW,UAA6C,SAAW;AACrG,UAAM,QAAe,UAAU,KAAK,YAAY,SAAC,MAAI;AACpD,eAAO,KAAK,SAAS;QACpB,KAAK,SAAS,SACb,YAAY,QAAQ,KAAK,aAAa,aACvC,KAAK,YAAY;MACnB,CAAC;AAED,aAAO,UAAU;IAClB;AAQU,IAAAA,iBAAA,UAAA,kBAAV,SAA+C,MAAS;AACvD,UAAI,KAAK,WAAW;AACnB,cAAM,IAAI,MAAM,6BAA6B;;AAG9C,UAAM,QAAQ,KAAK,UAAU,IAAI;AAEjC,UAAI,CAAO,SAAS,KAAK,GAAG;AAC3B,eAAO,KAAK;aAEN;AACN,YAAI,SAAS,GAAG;AACf,iBAAO,KAAK,UAAU,IAAI;eAEpB;AACN,YAAE,KAAK,UAAU,IAAI;;AAGtB,eAAO;;IAET;AAUU,IAAAA,iBAAA,UAAA,gBAAV,SAAwB,IAAwC;AAAhE,UAAA,QAAA;AACC,QAAE,KAAK;AAEP,UAAI;AACH,QAAO,KAAK,KAAK,YAAY,EAAE;;AAG/B,UAAE,KAAK;AAGP,YAAI,KAAK,eAAe,KAAK,KAAK,QAAQ,WAAW,GAAG;AAEvD,UAAO,KAAK,KAAK,SAAS,SAAC,QAAM;AAChC,kBAAK,gBAAgB,MAAM;UAC5B,CAAC;AAED,eAAK,QAAQ,SAAS;;;IAGzB;AASO,IAAAA,iBAAA,UAAA,sBAAP,SAAgD,MAAW,OAAa;AACvE,UAAI,KAAK,gBAAgB,IAAI,GAAG;AAG/B,aAAK,cAAc,SAAC,UAAQ;AAC3B,cAAI,CAAC,SAAS,WAAW,SAAS,SAAS,QAAQ,SAAS,SAAS,OAAO;AAC3E,qBAAS,SAAS,MAAM,KAAK;;QAE/B,CAAC;;IAEH;AASO,IAAAA,iBAAA,UAAA,WAAP,SAAqC,MAAW,OAAa;AAC5D,UAAI,KAAK,gBAAgB,IAAI,GAAG;AAC/B,aAAK,cAAc,SAAC,UAAQ;AAE3B,cAAI,CAAC,SAAS,WAAW,SAAS,SAAS,QAAQ,SAAS,SAAS,OAAO;AAG3E,YAAO,SAAS,WAAA;AACf,kBAAI,CAAC,SAAS,QAAQ;AACrB,yBAAS,SAAS,MAAM,KAAK;;YAE/B,CAAC;;QAEH,CAAC;;IAEH;AAeU,IAAAA,iBAAA,UAAA,MAAV,SAAyC,MAAe,MAAkB,UAAa,SAAY,aAAsB,UAA4C;AAArK,UAAA,QAAA;AACC,UAAI,KAAK,WAAW;AACnB,cAAM,IAAI,MAAM,6BAA6B;;AAG9C,WAAK,wBAAwB,MAAM,MAAM,UAAU,OAAO;AAE1D,UAAM,OAAyB;QAC9B;QACA;QACA;QACA;QACA;QACA,QAAQ;QACR;QACA,UAAU,IAAI,SAAS,WAAA;AACtB,eAAK,SAAS;AACd,gBAAK,gBAAgB,IAAI;QAC1B,CAAC;;AAGF,WAAK,WAAW,KAAK,IAAI;AAEzB,aAAO;IACR;AAWO,IAAAA,iBAAA,UAAA,QAAP,SAAqC,UAAuD,SAAa,aAA2B;AAA3B,UAAA,gBAAA,QAAA;AAAA,sBAAA;MAA2B;AACnI,aAAO,KAAK,IAAI,OAAO,MAAM,UAAU,SAAS,aAAa,SAAC,MAAM,OAAK;AAAK,eAAA,SAAS,KAAK,SAAS,MAAM,KAAK;MAAlC,CAAmC,EAAE;IACpH;AAuCO,IAAAA,iBAAA,UAAA,KAAP,SAAkC,MAAW,UAA4C,SAAa,aAA2B;AAA3B,UAAA,gBAAA,QAAA;AAAA,sBAAA;MAA2B;AAChI,aAAO,KAAK,IAAI,OAAO,MAAM,UAAU,SAAS,aAAa,SAACC,OAAM,OAAK;AAAK,eAAA,SAAS,KAAK,SAAS,KAAK;MAA5B,CAA6B,EAAE;IAC9G;AAyCO,IAAAD,iBAAA,UAAA,OAAP,SAAoC,MAAW,UAA4C,SAAa,aAA2B;AAA3B,UAAA,gBAAA,QAAA;AAAA,sBAAA;MAA2B;AAClI,UAAM,IAAI,KAAK,IAAI,MAAM,MAAM,UAAU,SAAS,aAAa,SAACC,OAAM,OAAK;AAC1E,UAAE,SAAS,QAAO;AAClB,iBAAS,KAAK,SAAS,KAAK;MAC7B,CAAC;AAGD,aAAO,EAAE;IACV;AASO,IAAAD,iBAAA,UAAA,MAAP,SAAmC,MAAW,UAA6C,SAAW;AACrG,WAAK,wBAAwB,OAAO,MAAM,UAAU,OAAO;IAC5D;AASO,IAAAA,iBAAA,UAAA,WAAP,SAAgB,QAAY;AAA5B,UAAA,QAAA;AACC,UAAI,KAAK,WAAW;AACnB,cAAM,IAAI,MAAM,6BAA6B;;AAG9C,UAAI,WAAW,MAAM;AACpB,cAAM,IAAI,MAAM,kDAAkD;;AAGnE,MAAO,KAAK,OAAO,YAAY,SAAC,GAAC;AAEhC,YAAI,CAAC,EAAE,UAAU,EAAE,aAAa;AAC/B,cAAI,EAAE,SAAS,MAAM;AACpB,kBAAK,MAAM,EAAE,UAAU,EAAE,OAAO;qBAEtB,EAAE,MAAM;AAClB,kBAAK,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO;iBAEjC;AACN,kBAAK,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO;;;MAGxC,CAAC;IACF;AAED,WAAAA;EAAA,EA5dA;;AAoeA,IAAA;;EAAA,SAAA,QAAA;AAAwD,cAAAE,0BAAA,MAAA;AAYvD,aAAAA,yBAAY,QAAc;AAA1B,UAAA,QACC,OAAA,KAAA,IAAA,KAAO;AACP,YAAK,SAAS;;IACf;AAQO,IAAAA,yBAAA,UAAA,WAAP,SAAgB,QAAY;AAA5B,UAAA,QAAA;AACC,UAAI,KAAK,WAAW;AACnB,cAAM,IAAI,MAAM,6BAA6B;;AAG9C,UAAI,WAAW,MAAM;AACpB,cAAM,IAAI,MAAM,kDAAkD;;AAGnE,MAAO,KAAK,OAAO,YAAY,SAAC,GAAC;AAEhC,YAAI,EAAE,YAAY,OAAO,QAAQ;AAChC;;AAGD,YAAI,CAAC,EAAE,UAAU,EAAE,aAAa;AAC/B,cAAI,EAAE,SAAS,MAAM;AACpB,kBAAK,MAAM,EAAE,UAAU,EAAE,OAAO;qBAEtB,EAAE,MAAM;AAClB,kBAAK,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO;iBAEjC;AACN,kBAAK,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO;;;MAGxC,CAAC;IACF;AAED,WAAAA;EAAA,EApDwD,eAAe;;;;ACliBvE;;;cAAAC;EAAA;;cAAAC;EAAA,oBAAAC;EAAA;;;;;;;;;;AA2BM,SAAU,QAAgB,QAAc;AAC7C,SAAO,SAAC,MAAI;AAEX,aAAS,OAAO,QAAQ;AACvB,UAAI,OAAO,QAAQ,GAAG,GAAG;AACxB,YAAI,CAAC,KAAK,CAAC,KAA4B,OAAO,GAAG,CAAgC,CAAC,GAAG;AACpF;;;;EAIJ;AACD;AAQM,SAAU,KAAa,QAAc;AAC1C,MAAM,SAAS,CAAA;AAEf,WAAS,OAAO,QAAQ;AACvB,QAAI,OAAO,QAAQ,GAAG,GAAG;AACxB,aAAO,KAAK,GAA0B;;;AAIxC,SAAO;AACR;AAUM,SAAU,YAAoB,QAAgBC,QAAmE;AACtH,SAAO,KAAK,MAAM,EAAE,KAAKA,MAAK;AAC/B;AASM,SAAU,OAAyC,QAAgB,KAAQ;AAChF,SAAO,CAAA,EAAG,eAAe,KAAK,QAAQ,GAAG;AAC1C;AASM,SAAU,OAAyC,QAAgB,KAAQ;AAChF,SAAO,OAAO,GAAG;AAClB;AAWM,SAAUC,cAAqB,QAAgB,IAA8E;AAClI,WAAS,OAAO,QAAQ;AACvB,QAAI,OAAO,QAAQ,GAAG,GAAG;AACxB,UAAI,CAAC,GAAG,KAA4B,OAAO,GAAG,CAAgC,GAAG;AAChF;;;;AAIJ;AAQM,SAAUC,MAAa,QAAgB,IAA2E;AACvH,EAAAD,cAAa,QAAQ,SAAC,KAAK,OAAK;AAC/B,OAAG,KAAK,KAAK;AACb,WAAO;EACR,CAAC;AACF;AAUM,SAAU,YAAoB,QAAgB,IAA6E,KAAiE;AACjM,EAAO,KAAK,YAAY,QAAQ,GAAG,GAAG,SAAC,KAAG;AACzC,OAAG,KAAK,OAAO,GAAG,CAAC;EACpB,CAAC;AACF;AAQM,SAAUE,MAAa,QAAc;AAC1C,SAAO,OAAO,OAAO,CAAA,GAAI,MAAM;AAChC;AAUM,SAAU,MAAwB,SAAkB,SAAgB;AACzE,SAAO,OAAO,OAAO,CAAA,GAAI,SAAS,OAAO;AAC1C;AAQM,SAAU,MAAc,QAAc;AAC3C,SAAO,KAAK,MAAM,KAAK,UAAU,MAAM,CAAC;AACzC;AAUM,SAAU,eAAe,QAAgC,QAAgCC,OAAmB;AACjH,EAAO,KAAKA,OAAM,SAAC,KAAG;AACrB,QAAU,SAAS,OAAO,GAAG,CAAC,GAAG;AAChC,aAAO,GAAG,IAAI,OAAO,GAAG;;EAE1B,CAAC;AACF;AAWM,SAAU,mBAAmB,QAAgC,QAAgCA,OAAmB;AACrH,EAAO,KAAKA,OAAM,SAAC,KAAG;AACrB,QAAU,SAAS,OAAO,GAAG,CAAC,KAAK,CAAQ,SAAe,OAAQ,GAAG,CAAC,GAAI;AACzE,aAAO,GAAG,IAAI,OAAO,GAAG;;EAE1B,CAAC;AACF;AAWM,SAAU,oBAAoB,QAAgC,QAAgCA,OAAmB;AACtH,EAAO,KAAKA,OAAM,SAAC,KAAG;AACrB,WAAO,GAAG,IAAI,OAAO,GAAG;EACzB,CAAC;AACF;AAQM,SAAU,kBAAkB,MAA8B,IAA0B;AACzF,iBAAe,MAAM,IAAI,KAAK,IAAI,CAAC;AACpC;;;AC1NA;;;;;cAAAC;EAAA,oBAAAC;EAAA;cAAAC;EAAA,iBAAAC;EAAA;;;;;;;aAAAC;EAAA,WAAAC;EAAA,WAAAC;EAAA;iBAAAC;;AA+BM,SAAU,UAAa,OAAe;AAC3C,SAAO,SAAC,MAAI;AACX,QAAMC,UAAS,MAAM;AAErB,aAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAChC,UAAI,CAAC,KAAK,MAAM,CAAC,CAAC,GAAG;AACpB;;;EAGH;AACD;AAMM,SAAU,OAAU,MAAiB;AAC1C,MAAI,MAAM;AAEV,OAAK,SAAC,GAAC;AACN,MAAE;AACF,WAAO;EACR,CAAC;AAED,SAAO;AACR;AAMM,SAAUC,SAAW,MAAiB;AAC3C,MAAM,SAAmB,CAAA;AAEzB,OAAK,SAAC,OAAK;AACV,WAAO,KAAK,KAAK;AACjB,WAAO;EACR,CAAC;AAED,SAAO;AACR;AAQM,SAAUC,cAAgB,MAAmB,IAAyB;AAC3E,OAAK,EAAE;AACR;AAQM,SAAUC,MAAQ,MAAmB,IAAsB;AAChE,OAAK,SAAC,OAAK;AACV,OAAG,KAAK;AACR,WAAO;EACR,CAAC;AACF;AAQM,SAAU,KAAQ,MAAmB,IAAmC;AAC7E,SAAO,UAAUF,SAAQ,IAAI,EAAE,KAAK,EAAE,CAAC;AACxC;AAQM,SAAUG,KAAU,MAAmB,IAAmB;AAC/D,SAAO,SAAC,MAAI;AAAK,WAAA,KAAK,SAAC,OAAK;AAAK,aAAA,KAAK,GAAG,KAAK,CAAC;IAAd,CAAe;EAA/B;AAClB;AAQM,SAAU,OAAU,MAAmB,IAAyB;AACrE,SAAO,SAAC,MAAI;AAAK,WAAA,KAAK,SAAC,OAAK;AAC3B,UAAI,GAAG,KAAK,GAAG;AACd,eAAO,KAAK,KAAK;aAEX;AACN,eAAO;;IAET,CAAC;EAPgB;AAQlB;AAMM,SAAU,SAAM;AAAI,MAAA,OAAA,CAAA;WAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAA2B;AAA3B,SAAA,EAAA,IAAA,UAAA,EAAA;;AACzB,SAAO,SAAC,MAAI;AACX,QAAI,KAAK;AAET,QAAM,QAAQ,SAAC,OAAQ;AAAK,aAAC,KAAK,KAAK,KAAK;IAAhB;AAE5B,QAAMJ,UAAS,KAAK;AAEpB,aAAS,IAAI,GAAG,IAAIA,SAAQ,EAAE,GAAG;AAChC,WAAK,CAAC,EAAE,KAAK;AAEb,UAAI,CAAC,IAAI;AACR;;;EAGH;AACD;AAMM,SAAU,QAAW,MAA2B;AACrD,SAAO,SAAC,MAAI;AACX,QAAI,KAAK;AAET,QAAM,QAAQ,SAAC,OAAQ;AAAK,aAAC,KAAK,KAAK,KAAK;IAAhB;AAE5B,SAAK,SAAC,OAAK;AACV,YAAM,KAAK;AACX,aAAO;IACR,CAAC;EACF;AACD;AAQM,SAAU,QAAW,MAAiB;AAC3C,SAAO,SAAC,MAAI;AACX,QAAI,QAAQ;AAEZ,SAAK,SAAC,OAAK;AAAK,aAAA,KAAK,CAAC,SAAS,KAAK,CAAC;IAArB,CAAsB;EACvC;AACD;AAQM,SAAUK,WAAa,MAAmB,SAA8B;AAC7E,MAAI,QAAQ;AACZ,MAAI,IAAI;AAER,OAAK,SAAC,OAAK;AACV,QAAI,QAAQ,KAAK,GAAG;AACnB,cAAQ;AACR,aAAO;WAED;AACN,QAAE;AACF,aAAO;;EAET,CAAC;AAED,SAAQ,QAAQ,IAAI;AACrB;AAQM,SAAUC,MAAQ,MAAmB,SAA8B;AACxE,MAAI;AAEJ,OAAK,SAAC,OAAK;AACV,QAAI,QAAQ,KAAK,GAAG;AACnB,eAAS;AACT,aAAO;WAED;AACN,aAAO;;EAET,CAAC;AAED,SAAO;AACR;AAQM,SAAU,QAAc,MAAmB,SAA+B;AAC/E,MAAI;AAEJ,OAAK,SAAC,OAAK;AACV,QAAM,IAAI,QAAQ,KAAK;AAEvB,QAAI,MAAM,MAAM;AACf,eAAS;AACT,aAAO;WAED;AACN,aAAO;;EAET,CAAC;AAED,SAAO;AACR;AAQM,SAAU,SAAY,MAAmB,SAA8B;AAC5E,MAAI,SAAS;AAEb,OAAK,SAAC,OAAK;AACV,QAAI,QAAQ,KAAK,GAAG;AACnB,eAAS;AACT,aAAO;WAED;AACN,aAAO;;EAET,CAAC;AAED,SAAO;AACR;AAQM,SAAU,MAAY,MAAmB,MAAS,IAA6B;AACpF,OAAK,SAAC,OAAK;AACV,WAAO,GAAG,MAAM,KAAK;AACrB,WAAO;EACR,CAAC;AAED,SAAO;AACR;AAWA,SAAS,KAAK,MAAqB,OAAa;AAC/C,MAAI,QAAQ,QAAQ,QAAQ,MAAM;AACjC,WAAO;SAED;AACN,WAAO;;AAET;AAWM,SAAUC,KAAI,GAAmB;AACtC,SAAO,MAAM,GAAG,MAAM,IAAI;AAC3B;AAWA,SAAS,KAAK,MAAqB,OAAa;AAC/C,MAAI,QAAQ,QAAQ,QAAQ,MAAM;AACjC,WAAO;SAED;AACN,WAAO;;AAET;AAWM,SAAUC,KAAI,GAAmB;AACtC,SAAO,MAAM,GAAG,MAAM,IAAI;AAC3B;AAYM,SAAU,KAAK,MAAwB,WAAsB;AAAtB,MAAA,cAAA,QAAA;AAAA,gBAAA;EAAsB;AAClE,MAAIC,SAAQ;AACZ,MAAI,OAAO;AAEX,OAAK,SAAC,OAAK;AACV,QAAIA,QAAO;AACV,MAAAA,SAAQ;WAEF;AACN,cAAQ;;AAGT,YAAQ;AAER,WAAO;EACR,CAAC;AAED,SAAO;AACR;AAMA,IAAA;;EAAA,WAAA;AAeC,aAAAC,cAAY,MAAmB,QAAe;AARvC,WAAA,iBAA0B;AAShC,WAAK,OAAO;AACZ,WAAK,UAAU;AACf,WAAK,MAAK;IACX;AAEA,IAAAA,cAAA,UAAA,QAAA,WAAA;AACC,WAAK,YAAYT,SAAQ,KAAK,KAAK,SAAQ,CAAE;IAC9C;AAEA,IAAAS,cAAA,UAAA,QAAA,WAAA;AACC,WAAK,UAAU,SAAS;IACzB;AAEA,IAAAA,cAAA,UAAA,WAAA,WAAA;AACC,aAAO,KAAK,WAAW,CAAC;IACzB;AAEA,IAAAA,cAAA,UAAA,UAAA,WAAA;AACC,aAAO,KAAK,WAAW,KAAK,UAAU,SAAS,CAAC;IACjD;AAEA,IAAAA,cAAA,UAAA,OAAA,SAAK,IAAyB;AAC7B,UAAI,QAAuB,UAAU,KAAK,WAAW,EAAE;AAEvD,UAAI,UAAU,IAAI;AACjB,YAAI,OAAO,KAAK,UAAU,KAAK;AAE/B,QAAO,OAAO,KAAK,WAAW,IAAI;AAClC,eAAO;aAED;AACN,eAAO,KAAK,QAAO;;IAErB;AAEA,IAAAA,cAAA,UAAA,aAAA,SAAW,MAAO;AACjB,aAAc,OAAO,KAAK,WAAW,IAAI;IAC1C;AAEU,IAAAA,cAAA,UAAA,aAAV,SAAqB,OAAa;AACjC,UAAI,SAAS,KAAK,QAAQ,KAAK,UAAU,QAAQ;AAChD,YAAI,OAAO,KAAK,UAAU,KAAK;AAE/B,QAAO,OAAO,KAAK,WAAW,IAAI;AAClC,eAAO;iBAEG,KAAK,gBAAgB;AAC/B,eAAO,KAAK,QAAO;;IAErB;AAEA,IAAAA,cAAA,UAAA,WAAA,WAAA;AACC,aAAO,UAAU,KAAK,SAAS;IAChC;AACD,WAAAA;EAAA,EAtEA;;;;ACpYA;;;;;;AAgBM,SAAU,MAAM,GAAW,GAAS;AACzC,MAAI,MAAM,GAAG;AACZ,WAAO;aAEG,IAAI,GAAG;AACjB,WAAO;SAED;AACN,WAAO;;AAET;AAmBM,SAAU,OAAO,QAAgB,QAAc;AACpD,SAAO,IAAI,MAAM,SAAS,CAAC,EAAE,KAAK,MAAM;AACzC;AAQM,SAAU,OAAO,OAAa;AACnC,MAAI,MAAM;AACV,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC/B,WAAO,OAAO,OAAO,KAAK,MAAM,KAAK,OAAM,IAAK,OAAO,MAAM,CAAC;;AAE/D,SAAO;AACR;;;ACqCA,IAAA;;EAAA,SAAA,QAAA;AAAgE,cAAAC,qBAAA,MAAA;AAC/D,aAAAA,oBAAY,MAA0B;AAAtC,UAAA,QAAA;AACC,UAAM,WAAW,KAAK,OAAO,GAAG,WAAW,SAAC,GAAC;AAC5C,UAAE,SAAS,QAAO;MACnB,GAAG,QAAW,KAAK;AAEnB,cAAA,OAAA,KAAA,MAAM,WAAA;AACL,iBAAS,QAAO;AAGhB,QAAMC,MAAK,KAAK,SAAQ,GAAI,SAAC,GAAC;AAC7B,cAAM,IAAI,EAAE,CAAC;AACb,YAAE,QAAO;QACV,CAAC;MACF,CAAC,KAAC;;IACH;AACD,WAAAD;EAAA,EAhBgE,QAAQ;;AAwBxE,IAAA;;EAAA,WAAA;AAeC,aAAAE,cAAA;AALO,WAAA,SAAkF,IAAI,gBAAe;AAM3G,WAAK,cAAc,CAAA;IACpB;AAQO,IAAAA,YAAA,UAAA,SAAP,SAAc,KAAQ;AACrB,aAAe,OAAO,KAAK,aAAa,GAAG;IAC5C;AAQO,IAAAA,YAAA,UAAA,SAAP,SAAc,KAAQ;AACrB,aAAO,KAAK,YAAY,GAAG;IAC5B;AAUO,IAAAA,YAAA,UAAA,YAAP,SAAiB,KAAU,OAAQ;AAClC,UAAY,OAAO,KAAK,aAAa,GAAG,GAAG;AAC1C,cAAM,IAAI,MAAM,SAAS,MAAM,+BAA+B;aAExD;AACN,aAAK,YAAY,GAAG,IAAI;AAExB,YAAI,KAAK,OAAO,UAAU,WAAW,GAAG;AACvC,eAAK,OAAO,oBAAoB,aAAa;YAC5C,MAAM;YACN,QAAQ;YACR;YACA,UAAU;WACV;;;IAGJ;AAYO,IAAAA,YAAA,UAAA,SAAP,SAAc,KAAU,OAAQ;AAC/B,UAAY,OAAO,KAAK,aAAa,GAAG,GAAG;AAC1C,YAAM,WAAW,KAAK,YAAY,GAAG;AAErC,YAAI,aAAa,OAAO;AACvB,eAAK,YAAY,GAAG,IAAI;AAExB,cAAI,KAAK,OAAO,UAAU,QAAQ,GAAG;AACpC,iBAAK,OAAO,oBAAoB,UAAU;cACzC,MAAM;cACN,QAAQ;cACR;cACA;cACA,UAAU;aACV;;AAGF,cAAI,KAAK,OAAO,UAAU,SAAS,GAAG;AACrC,iBAAK,OAAO,oBAAoB,WAAW;cAC1C,MAAM;cACN,QAAQ;cACR;aACA;;;aAIG;AACN,aAAK,YAAY,GAAG,IAAI;AAExB,YAAI,KAAK,OAAO,UAAU,WAAW,GAAG;AACvC,eAAK,OAAO,oBAAoB,aAAa;YAC5C,MAAM;YACN,QAAQ;YACR;YACA,UAAU;WACV;;;IAGJ;AAcO,IAAAA,YAAA,UAAA,YAAP,SAAiB,KAAU,IAAmB;AAC7C,UAAY,OAAO,KAAK,aAAa,GAAG,GAAG;AAC1C,YAAM,WAAW,KAAK,YAAY,GAAG;AACrC,YAAM,WAAW,GAAG,QAAQ;AAE5B,YAAI,aAAa,UAAU;AAC1B,eAAK,YAAY,GAAG,IAAI;AAExB,cAAI,KAAK,OAAO,UAAU,QAAQ,GAAG;AACpC,iBAAK,OAAO,oBAAoB,UAAU;cACzC,MAAM;cACN,QAAQ;cACR;cACA;cACA;aACA;;AAGF,cAAI,KAAK,OAAO,UAAU,SAAS,GAAG;AACrC,iBAAK,OAAO,oBAAoB,WAAW;cAC1C,MAAM;cACN,QAAQ;cACR;aACA;;;aAIG;AACN,cAAM,IAAI,MAAM,SAAS,MAAM,8BAA8B;;IAE/D;AAOO,IAAAA,YAAA,UAAA,YAAP,SAAiB,KAAQ;AACxB,UAAY,OAAO,KAAK,aAAa,GAAG,GAAG;AAC1C,YAAM,WAAW,KAAK,YAAY,GAAG;AAErC,eAAO,KAAK,YAAY,GAAG;AAE3B,YAAI,KAAK,OAAO,UAAU,WAAW,GAAG;AACvC,eAAK,OAAO,oBAAoB,aAAa;YAC5C,MAAM;YACN,QAAQ;YACR;YACA;WACA;;AAGF,YAAI,KAAK,OAAO,UAAU,SAAS,GAAG;AACrC,eAAK,OAAO,oBAAoB,WAAW;YAC1C,MAAM;YACN,QAAQ;YACR;WACA;;;IAGJ;AAWO,IAAAA,YAAA,UAAA,mBAAP,SAAwB,KAAU,SAAgB;AACjD,UAAI,CAAC,KAAK,OAAO,GAAG,GAAG;AACtB,aAAK,UAAU,KAAK,QAAO,CAAE;;AAG9B,aAAU,KAAK,OAAO,GAAG;IAC1B;AAKO,IAAAA,YAAA,UAAA,QAAP,WAAA;AAAA,UAAA,QAAA;AAEC,UAAI,KAAK,OAAO,UAAU,SAAS,GAAG;AACrC,QAAQC,MAAK,KAAK,aAAa,SAAC,KAAK,OAAK;AACzC,gBAAK,OAAO,oBAAoB,WAAW;YAC1C,MAAM;YACN,QAAQ;YACR,UAAU;WACV;QACF,CAAC;;AAGF,WAAK,cAAc,CAAA;AAEnB,UAAI,KAAK,OAAO,UAAU,SAAS,GAAG;AACrC,aAAK,OAAO,oBAAoB,WAAW;UAC1C,MAAM;UACN,QAAQ;SACR;;IAEH;AAOO,IAAAD,YAAA,UAAA,WAAP,SAAgB,QAAY;AAA5B,UAAA,QAAA;AACC,MAAMC,MAAK,OAAO,SAAQ,GAAI,SAAC,GAAC;AAE/B,cAAK,OAAY,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;MAC5B,CAAC;IACF;AAQO,IAAAD,YAAA,UAAA,WAAP,WAAA;AAGC,aAAyC,QAAQ,KAAK,WAAW;IAClE;AAKQ,IAAAA,YAAA,UAAC,OAAO,QAAQ,IAAxB,WAAA;;;;;;uBAEiB,KAAK;;;;;;;;iBACR,OAAO,KAAK,aAAa,GAAG;AAApC,qBAAA,CAAA,GAAA,CAAA;AACH,mBAAA,CAAA,GAAM,CAAM,KAAK,KAAK,YAAY,GAAG,CAAC,CAAC;;AAAvC,eAAA,KAAA;;;;;;;;;;;;;AAQI,IAAAA,YAAA,UAAA,OAAP,SAAY,GAA+B;AAC1C,MAAMC,MAAK,KAAK,SAAQ,GAAI,SAAC,IAAY;YAAZ,KAAA,OAAA,IAAA,CAAA,GAAC,MAAA,GAAA,CAAA,GAAK,QAAA,GAAA,CAAA;AAAW,eAAA,EAAE,KAAK,KAAK;MAAZ,CAAa;IAC5D;AASO,IAAAD,YAAA,UAAA,iBAAP,WAAA;AACC,aAAa,KAAK,KAAK,SAAQ,GAAI,SAAC,GAAG,GAAC;AAAK,eAAQ,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;MAAxB,CAAyB;IACvE;AAED,WAAAA;EAAA,EA7RA;;AAySA,IAAA;;EAAA,SAAA,QAAA;AAA2G,cAAAE,qBAAA,MAAA;AAa1G,aAAAA,oBAAmB,GAAI;AAAvB,UAAA,QACC,OAAA,KAAA,IAAA,KAAO;AACP,YAAK,WAAW;;IACjB;AAQA,WAAA,eAAWA,oBAAA,WAAA,YAAQ;;;;WAQnB,WAAA;AACC,eAAO,KAAK;MACb;;;;;;;WAVA,SAAoB,GAAI;AACvB,UAAE,aAAa;AACf,aAAK,YAAY;MAClB;;;;AAcO,IAAAA,oBAAA,UAAA,WAAP,SAAgB,QAAY;AAA5B,UAAA,QAAA;AACC,MAAMC,MAAK,OAAO,SAAQ,GAAI,SAAC,GAAC;AAG/B,cAAK,OAAY,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,MAAK,CAAE;MACpC,CAAC;IACF;AASO,IAAAD,oBAAA,UAAA,SAAP,SAAc,KAAQ;AAAtB,UAAA,QAAA;AACC,aAAO,KAAK,iBAAiB,KAAK,WAAA;AAAM,eAAA,MAAK,SAAS,MAAK;MAAnB,CAAqB;IAC9D;AAED,WAAAA;EAAA,EA5D2G,UAAU;;;;AC/WrH,IAAA;;EAAA,WAAA;AAAA,aAAAE,SAAA;AAKS,WAAA,WAAW,IAAI,WAAU;AAK1B,WAAA,MAAc;IA2EtB;AA/DQ,IAAAA,OAAA,UAAA,MAAP,SAAW,OAAe,KAAa,OAAU,KAAY;AAG5D,UAAI,eAAe,KAAK,SAAS,iBAAiB,OAAO,WAAA;AAAM,eAAA,IAAI,WAAU;MAAd,CAAsC;AAGrG,UAAI,OAAqB;QACxB,YAAW,oBAAI,KAAI,GAAG,QAAO;QAC7B,OAAa,SAAS,GAAG,IAAI,MAAM,KAAK;QACxC,SAAS;;AAIV,mBAAa,OAAO,KAAK,IAAI;IAC9B;AAUO,IAAAA,OAAA,UAAA,MAAP,SAAW,OAAe,KAAa,OAAsB;AAAtB,UAAA,UAAA,QAAA;AAAA,gBAAA;MAAsB;AAE5D,UAAI,KAAK,SAAS,OAAO,KAAK,GAAG;AAChC,YAAI,eAAiD,KAAK,SAAS,OAAO,KAAK;AAE/E,YAAI,aAAa,OAAO,GAAG,GAAG;AAC7B,cAAI,YAAwC,aAAa,OAAO,GAAG;AACnE,cAAI,UAAU,OAAS,UAAU,UAAU,UAAU,OAAO,oBAAI,KAAI,GAAG,QAAO,GAAK;AAClF,sBAAU,UAAU;;AAErB,cAAI,UAAU,SAAS;AACtB,yBAAa,UAAU,GAAG;AAC1B,mBAAO;;AAER,iBAAO,UAAU;eAEb;AACJ,iBAAO;;aAGJ;AACJ,eAAO;;IAET;AAOO,IAAAA,OAAA,UAAA,QAAP,SAAa,OAAc;AAC1B,UAAI,OAAO;AACV,aAAK,SAAS,UAAU,KAAK;aAEzB;AACJ,aAAK,SAAS,MAAK;;IAErB;AAED,WAAAA;EAAA,EArFA;;AAmGO,IAAI,QAAoB,IAAI,MAAK;;;AC/GxC,IAAA;;EAAA,WAAA;AA8IC,aAAAC,YAAA;AAAA,UAAA,QAAA;AApIO,WAAA,SAA8D,IAAI,gBAAe;AAcjF,WAAA,SAAmB,CAAA;AAQnB,WAAA,eAA4C,CAAA;AAOzC,WAAA,YAAoB;AAQvB,WAAA,oBAA8C,CAAA;AAK3C,WAAA,gBAA6C,CAAA;AAQhD,WAAA,iBAAqD,CAAA;AAQrD,WAAA,eAAsD,CAAA;AAQtD,WAAA,kBAAoC,CAAA;AAQpC,WAAA,mBAAqC,CAAA;AAQrC,WAAA,mBAAqC,CAAA;AAQrC,WAAA,mBAAuD,CAAA;AAOvD,WAAA,iBAAwD,CAAA;AAQxD,WAAA,cAA6B,CAAA;AAK7B,WAAA,mBAAgD,CAAA;AAOhD,WAAA,QAAuB,CAAA;AAQvB,WAAA,WAKF,CAAA;AAGJ,WAAK,MAAM,KAAK,YAAW;AAE3B,WAAK,eAAe,SAAS,CAAA;AAC7B,WAAK,aAAa,SAAS,CAAA;AAC3B,WAAK,eAAe,SAAS,CAAA;AAC7B,WAAK,iBAAiB,SAAS,CAAA;AAG/B,UAAI,OAAO,qBAAqB,aAAa;AAE5C,yBAAiB,eAAe,WAAA;AAC/B,UAAO,KAAK,MAAK,aAAa,SAAC,QAAM;AACpC,gBAAM,MAAM,OAAO,MAAM;AACzB,gBAAI,aAAa,WAAW,SAAS,IAAI,cAAc,MAAM,IAAI,YAAY;UAC9E,CAAC;QACF,CAAC;AAED,yBAAiB,cAAc,WAAA;AAC9B,UAAO,KAAK,MAAK,aAAa,SAAC,QAAM;AACpC,gBAAM,MAAM,OAAO,MAAM;AACzB,gBAAI,gBAAgB,SAAS;UAC9B,CAAC;QACF,CAAC;;IAEH;AAOO,IAAAA,UAAA,UAAA,cAAP,WAAA;AACC,UAAI,MAAM,KAAK;AACf,WAAK,aAAa;AAClB,aAAO,QAAQ;IAChB;AAQA,WAAA,eAAWA,UAAA,WAAA,OAAG;;;;;;;WAAd,WAAA;AACC,YAAI,CAAC,KAAK,MAAM;AACf,eAAK,OAAO,IAAI,WAAU;;AAE3B,eAAO,KAAK;MACb;;;;AAUO,IAAAA,UAAA,UAAA,WAAP,SAAgB,KAAa,OAAY,KAAY;AACpD,YAAM,IAAI,KAAK,KAAK,KAAK,OAAO,GAAG;IACpC;AAUO,IAAAA,UAAA,UAAA,WAAP,SAAgB,KAAa,OAAsB;AAAtB,UAAA,UAAA,QAAA;AAAA,gBAAA;MAAsB;AAClD,aAAO,MAAM,IAAI,KAAK,KAAK,KAAK,KAAK;IACtC;AAWO,IAAAA,UAAA,UAAA,WAAP,SAAmD,WAAgB,MAAU;AAE5E,UAAI,KAAK,OAAO,UAAU,SAAS,GAAG;AACrC,YAAI,MAAM;AACT,eAAK,OAAO;AACZ,eAAK,SAAS,KAAK,UAAU;AACvB,eAAK,OAAQ,SAAS,WAAW;YACtC,MAAM;YACN,QAAQ;WACR;eAEG;AACE,eAAK,OAAQ,SAAS,WAAW;YACtC,MAAM;YACN,QAAQ;WACR;;;IAGJ;AASO,IAAAA,UAAA,UAAA,sBAAP,SAA8D,WAAgB,MAAU;AAEvF,UAAI,KAAK,OAAO,UAAU,SAAS,GAAG;AACrC,YAAI,MAAM;AACT,eAAK,OAAO;AACZ,eAAK,SAAS,KAAK,UAAU;AACvB,eAAK,OAAQ,oBAAoB,WAAW,IAAI;eAElD;AACE,eAAK,OAAQ,oBAAoB,WAAW;YACjD,MAAM;YACN,QAAQ;WACR;;;IAGJ;AAQO,IAAAA,UAAA,UAAA,iBAAP,SAAsB,KAAW;AAChC,UAAU,SAAS,KAAK,cAAc,GAAG,CAAC,GAAG;AAC5C,eAAO,KAAK,cAAc,GAAG;;AAE9B,WAAK,cAAc,GAAG,IAAI,gBAAgB,MAAM,MAAc,OAAO,CAAC,IAAI;AAC1E,aAAO,KAAK,cAAc,GAAG;IAC9B;AAOO,IAAAA,UAAA,UAAA,yBAAP,SAA8B,WAAoB;AACjD,UAAI,UAAU,QAAQ;AACrB,QAAO,KAAK,KAAK,aAAa,UAAU,MAAM,GAAG,SAAS;aAEtD;AACJ,QAAO,KAAK,KAAK,aAAa,QAAQ,GAAG,SAAS;;IAEpD;AAKO,IAAAA,UAAA,UAAA,8BAAP,SAAmC,WAAoB;AACtD,UAAI,UAAU,QAAQ;AACrB,QAAO,OAAO,KAAK,aAAa,UAAU,MAAM,GAAG,SAAS;;AAG7D,MAAO,OAAO,KAAK,aAAa,QAAQ,GAAG,SAAS;IACrD;AAMO,IAAAA,UAAA,UAAA,sBAAP,SAA2B,QAAc;AACxC,UAAI,OAAO,QAAQ;AAClB,QAAO,IAAI,KAAK,eAAe,OAAO,MAAM,GAAG,MAAM;aAEjD;AACJ,QAAO,IAAI,KAAK,eAAe,QAAQ,GAAG,MAAM;;IAElD;AAKO,IAAAA,UAAA,UAAA,2BAAP,SAAgC,QAAc;AAC7C,UAAI,OAAO,QAAQ;AAClB,QAAO,OAAO,KAAK,eAAe,OAAO,MAAM,GAAG,MAAM;;AAGzD,MAAO,OAAO,KAAK,eAAe,QAAQ,GAAG,MAAM;IACpD;AAMO,IAAAA,UAAA,UAAA,wBAAP,SAA6B,QAAc;AAC1C,UAAI,OAAO,QAAQ;AAClB,QAAO,IAAI,KAAK,iBAAiB,OAAO,MAAM,GAAG,MAAM;aAEnD;AACJ,QAAO,IAAI,KAAK,iBAAiB,QAAQ,GAAG,MAAM;;IAEpD;AAKO,IAAAA,UAAA,UAAA,6BAAP,SAAkC,QAAc;AAC/C,UAAI,OAAO,QAAQ;AAClB,QAAO,OAAO,KAAK,iBAAiB,OAAO,MAAM,GAAG,MAAM;;AAG3D,MAAO,OAAO,KAAK,iBAAiB,QAAQ,GAAG,MAAM;IACtD;AAMO,IAAAA,UAAA,UAAA,sBAAP,SAA2B,QAAiB;AAC3C,UAAI,OAAO,QAAQ;AAClB,QAAO,IAAI,KAAK,eAAe,OAAO,MAAM,GAAG,MAAM;aAEjD;AACJ,QAAO,IAAI,KAAK,eAAe,QAAQ,GAAG,MAAM;;IAElD;AAKO,IAAAA,UAAA,UAAA,2BAAP,SAAgC,QAAiB;AAChD,UAAI,OAAO,QAAQ;AAClB,QAAO,OAAO,KAAK,eAAe,OAAO,MAAM,GAAG,MAAM;;AAGzD,MAAO,OAAO,KAAK,eAAe,QAAQ,GAAG,MAAM;IACpD;AACD,WAAAA;EAAA,EA5XA;;AAmYO,IAAI,WAAW,IAAI,SAAQ;AAU5B,SAAU,GAAM,QAAa,MAAY;AAC9C,MAAM,IAAI,SAAS,kBAAkB,IAAI;AACzC,SAAO,KAAK,QAAQ,kBAAkB;AACvC;",
  "names": ["Percent", "percent", "min", "max", "length", "length", "order", "Disposer", "MultiDisposer", "MutableValueDisposer", "CounterDisposer", "length", "EventDispatcher", "type", "TargetedEventDispatcher", "copy", "each", "eachContinue", "order", "eachContinue", "each", "copy", "keys", "each", "eachContinue", "find", "findIndex", "map", "max", "min", "toArray", "length", "toArray", "eachContinue", "each", "map", "findIndex", "find", "min", "max", "first", "ListIterator", "DictionaryDisposer", "each", "Dictionary", "each", "DictionaryTemplate", "each", "Cache", "Registry"]
}
